// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: points.proto

package qdrant

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WriteOrderingType int32

const (
	WriteOrderingType_Weak   WriteOrderingType = 0 // Write operations may be reordered, works faster, default
	WriteOrderingType_Medium WriteOrderingType = 1 // Write operations go through dynamically selected leader, may be inconsistent for a short period of time in case of leader change
	WriteOrderingType_Strong WriteOrderingType = 2 // Write operations go through the permanent leader, consistent, but may be unavailable if leader is down
)

// Enum value maps for WriteOrderingType.
var (
	WriteOrderingType_name = map[int32]string{
		0: "Weak",
		1: "Medium",
		2: "Strong",
	}
	WriteOrderingType_value = map[string]int32{
		"Weak":   0,
		"Medium": 1,
		"Strong": 2,
	}
)

func (x WriteOrderingType) Enum() *WriteOrderingType {
	p := new(WriteOrderingType)
	*p = x
	return p
}

func (x WriteOrderingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WriteOrderingType) Descriptor() protoreflect.EnumDescriptor {
	return file_points_proto_enumTypes[0].Descriptor()
}

func (WriteOrderingType) Type() protoreflect.EnumType {
	return &file_points_proto_enumTypes[0]
}

func (x WriteOrderingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WriteOrderingType.Descriptor instead.
func (WriteOrderingType) EnumDescriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{0}
}

type ReadConsistencyType int32

const (
	ReadConsistencyType_All      ReadConsistencyType = 0 // Send request to all nodes and return points which are present on all of them
	ReadConsistencyType_Majority ReadConsistencyType = 1 // Send requests to all nodes and return points which are present on majority of them
	ReadConsistencyType_Quorum   ReadConsistencyType = 2 // Send requests to half + 1 nodes, return points which are present on all of them
)

// Enum value maps for ReadConsistencyType.
var (
	ReadConsistencyType_name = map[int32]string{
		0: "All",
		1: "Majority",
		2: "Quorum",
	}
	ReadConsistencyType_value = map[string]int32{
		"All":      0,
		"Majority": 1,
		"Quorum":   2,
	}
)

func (x ReadConsistencyType) Enum() *ReadConsistencyType {
	p := new(ReadConsistencyType)
	*p = x
	return p
}

func (x ReadConsistencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadConsistencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_points_proto_enumTypes[1].Descriptor()
}

func (ReadConsistencyType) Type() protoreflect.EnumType {
	return &file_points_proto_enumTypes[1]
}

func (x ReadConsistencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadConsistencyType.Descriptor instead.
func (ReadConsistencyType) EnumDescriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{1}
}

type FieldType int32

const (
	FieldType_FieldTypeKeyword  FieldType = 0
	FieldType_FieldTypeInteger  FieldType = 1
	FieldType_FieldTypeFloat    FieldType = 2
	FieldType_FieldTypeGeo      FieldType = 3
	FieldType_FieldTypeText     FieldType = 4
	FieldType_FieldTypeBool     FieldType = 5
	FieldType_FieldTypeDatetime FieldType = 6
	FieldType_FieldTypeUuid     FieldType = 7
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0: "FieldTypeKeyword",
		1: "FieldTypeInteger",
		2: "FieldTypeFloat",
		3: "FieldTypeGeo",
		4: "FieldTypeText",
		5: "FieldTypeBool",
		6: "FieldTypeDatetime",
		7: "FieldTypeUuid",
	}
	FieldType_value = map[string]int32{
		"FieldTypeKeyword":  0,
		"FieldTypeInteger":  1,
		"FieldTypeFloat":    2,
		"FieldTypeGeo":      3,
		"FieldTypeText":     4,
		"FieldTypeBool":     5,
		"FieldTypeDatetime": 6,
		"FieldTypeUuid":     7,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_points_proto_enumTypes[2].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_points_proto_enumTypes[2]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{2}
}

type Direction int32

const (
	Direction_Asc  Direction = 0
	Direction_Desc Direction = 1
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "Asc",
		1: "Desc",
	}
	Direction_value = map[string]int32{
		"Asc":  0,
		"Desc": 1,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_points_proto_enumTypes[3].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_points_proto_enumTypes[3]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{3}
}

// How to use positive and negative vectors to find the results, default is `AverageVector`.
type RecommendStrategy int32

const (
	// Average positive and negative vectors and create a single query with the formula
	// `query = avg_pos + avg_pos - avg_neg`. Then performs normal search.
	RecommendStrategy_AverageVector RecommendStrategy = 0
	// Uses custom search objective. Each candidate is compared against all
	// examples, its score is then chosen from the `max(max_pos_score, max_neg_score)`.
	// If the `max_neg_score` is chosen then it is squared and negated.
	RecommendStrategy_BestScore RecommendStrategy = 1
)

// Enum value maps for RecommendStrategy.
var (
	RecommendStrategy_name = map[int32]string{
		0: "AverageVector",
		1: "BestScore",
	}
	RecommendStrategy_value = map[string]int32{
		"AverageVector": 0,
		"BestScore":     1,
	}
)

func (x RecommendStrategy) Enum() *RecommendStrategy {
	p := new(RecommendStrategy)
	*p = x
	return p
}

func (x RecommendStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecommendStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_points_proto_enumTypes[4].Descriptor()
}

func (RecommendStrategy) Type() protoreflect.EnumType {
	return &file_points_proto_enumTypes[4]
}

func (x RecommendStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecommendStrategy.Descriptor instead.
func (RecommendStrategy) EnumDescriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{4}
}

type Fusion int32

const (
	Fusion_RRF  Fusion = 0 // Reciprocal Rank Fusion
	Fusion_DBSF Fusion = 1 // Distribution-Based Score Fusion
)

// Enum value maps for Fusion.
var (
	Fusion_name = map[int32]string{
		0: "RRF",
		1: "DBSF",
	}
	Fusion_value = map[string]int32{
		"RRF":  0,
		"DBSF": 1,
	}
)

func (x Fusion) Enum() *Fusion {
	p := new(Fusion)
	*p = x
	return p
}

func (x Fusion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fusion) Descriptor() protoreflect.EnumDescriptor {
	return file_points_proto_enumTypes[5].Descriptor()
}

func (Fusion) Type() protoreflect.EnumType {
	return &file_points_proto_enumTypes[5]
}

func (x Fusion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fusion.Descriptor instead.
func (Fusion) EnumDescriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{5}
}

// Sample points from the collection
//
// Available sampling methods:
//
// * `random` - Random sampling
type Sample int32

const (
	Sample_Random Sample = 0
)

// Enum value maps for Sample.
var (
	Sample_name = map[int32]string{
		0: "Random",
	}
	Sample_value = map[string]int32{
		"Random": 0,
	}
)

func (x Sample) Enum() *Sample {
	p := new(Sample)
	*p = x
	return p
}

func (x Sample) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sample) Descriptor() protoreflect.EnumDescriptor {
	return file_points_proto_enumTypes[6].Descriptor()
}

func (Sample) Type() protoreflect.EnumType {
	return &file_points_proto_enumTypes[6]
}

func (x Sample) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sample.Descriptor instead.
func (Sample) EnumDescriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{6}
}

type UpdateStatus int32

const (
	UpdateStatus_UnknownUpdateStatus UpdateStatus = 0
	UpdateStatus_Acknowledged        UpdateStatus = 1 // Update is received, but not processed yet
	UpdateStatus_Completed           UpdateStatus = 2 // Update is applied and ready for search
	UpdateStatus_ClockRejected       UpdateStatus = 3 // Internal: update is rejected due to an outdated clock
)

// Enum value maps for UpdateStatus.
var (
	UpdateStatus_name = map[int32]string{
		0: "UnknownUpdateStatus",
		1: "Acknowledged",
		2: "Completed",
		3: "ClockRejected",
	}
	UpdateStatus_value = map[string]int32{
		"UnknownUpdateStatus": 0,
		"Acknowledged":        1,
		"Completed":           2,
		"ClockRejected":       3,
	}
)

func (x UpdateStatus) Enum() *UpdateStatus {
	p := new(UpdateStatus)
	*p = x
	return p
}

func (x UpdateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_points_proto_enumTypes[7].Descriptor()
}

func (UpdateStatus) Type() protoreflect.EnumType {
	return &file_points_proto_enumTypes[7]
}

func (x UpdateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateStatus.Descriptor instead.
func (UpdateStatus) EnumDescriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{7}
}

type WriteOrdering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type WriteOrderingType `protobuf:"varint,1,opt,name=type,proto3,enum=qdrant.WriteOrderingType" json:"type,omitempty"` // Write ordering guarantees
}

func (x *WriteOrdering) Reset() {
	*x = WriteOrdering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteOrdering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteOrdering) ProtoMessage() {}

func (x *WriteOrdering) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteOrdering.ProtoReflect.Descriptor instead.
func (*WriteOrdering) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{0}
}

func (x *WriteOrdering) GetType() WriteOrderingType {
	if x != nil {
		return x.Type
	}
	return WriteOrderingType_Weak
}

type ReadConsistency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ReadConsistency_Type
	//	*ReadConsistency_Factor
	Value isReadConsistency_Value `protobuf_oneof:"value"`
}

func (x *ReadConsistency) Reset() {
	*x = ReadConsistency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadConsistency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadConsistency) ProtoMessage() {}

func (x *ReadConsistency) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadConsistency.ProtoReflect.Descriptor instead.
func (*ReadConsistency) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{1}
}

func (m *ReadConsistency) GetValue() isReadConsistency_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ReadConsistency) GetType() ReadConsistencyType {
	if x, ok := x.GetValue().(*ReadConsistency_Type); ok {
		return x.Type
	}
	return ReadConsistencyType_All
}

func (x *ReadConsistency) GetFactor() uint64 {
	if x, ok := x.GetValue().(*ReadConsistency_Factor); ok {
		return x.Factor
	}
	return 0
}

type isReadConsistency_Value interface {
	isReadConsistency_Value()
}

type ReadConsistency_Type struct {
	Type ReadConsistencyType `protobuf:"varint,1,opt,name=type,proto3,enum=qdrant.ReadConsistencyType,oneof"` // Common read consistency configurations
}

type ReadConsistency_Factor struct {
	Factor uint64 `protobuf:"varint,2,opt,name=factor,proto3,oneof"` // Send request to a specified number of nodes, and return points which are present on all of them
}

func (*ReadConsistency_Type) isReadConsistency_Value() {}

func (*ReadConsistency_Factor) isReadConsistency_Value() {}

type PointId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PointIdOptions:
	//
	//	*PointId_Num
	//	*PointId_Uuid
	PointIdOptions isPointId_PointIdOptions `protobuf_oneof:"point_id_options"`
}

func (x *PointId) Reset() {
	*x = PointId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointId) ProtoMessage() {}

func (x *PointId) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointId.ProtoReflect.Descriptor instead.
func (*PointId) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{2}
}

func (m *PointId) GetPointIdOptions() isPointId_PointIdOptions {
	if m != nil {
		return m.PointIdOptions
	}
	return nil
}

func (x *PointId) GetNum() uint64 {
	if x, ok := x.GetPointIdOptions().(*PointId_Num); ok {
		return x.Num
	}
	return 0
}

func (x *PointId) GetUuid() string {
	if x, ok := x.GetPointIdOptions().(*PointId_Uuid); ok {
		return x.Uuid
	}
	return ""
}

type isPointId_PointIdOptions interface {
	isPointId_PointIdOptions()
}

type PointId_Num struct {
	Num uint64 `protobuf:"varint,1,opt,name=num,proto3,oneof"` // Numerical ID of the point
}

type PointId_Uuid struct {
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3,oneof"` // UUID
}

func (*PointId_Num) isPointId_PointIdOptions() {}

func (*PointId_Uuid) isPointId_PointIdOptions() {}

type SparseIndices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []uint32 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *SparseIndices) Reset() {
	*x = SparseIndices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseIndices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseIndices) ProtoMessage() {}

func (x *SparseIndices) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseIndices.ProtoReflect.Descriptor instead.
func (*SparseIndices) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{3}
}

func (x *SparseIndices) GetData() []uint32 {
	if x != nil {
		return x.Data
	}
	return nil
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text    string            `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`                                                                                               // Text of the document
	Model   string            `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`                                                                                             // Model name
	Options map[string]*Value `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Model options
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{4}
}

func (x *Document) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Document) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Document) GetOptions() map[string]*Value {
	if x != nil {
		return x.Options
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image   *Value            `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`                                                                                             // Image data, either base64 encoded or URL
	Model   string            `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`                                                                                             // Model name
	Options map[string]*Value `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Model options
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{5}
}

func (x *Image) GetImage() *Value {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Image) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Image) GetOptions() map[string]*Value {
	if x != nil {
		return x.Options
	}
	return nil
}

type InferenceObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object  *Value            `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`                                                                                           // Object to infer
	Model   string            `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`                                                                                             // Model name
	Options map[string]*Value `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Model options
}

func (x *InferenceObject) Reset() {
	*x = InferenceObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferenceObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferenceObject) ProtoMessage() {}

func (x *InferenceObject) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferenceObject.ProtoReflect.Descriptor instead.
func (*InferenceObject) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{6}
}

func (x *InferenceObject) GetObject() *Value {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *InferenceObject) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *InferenceObject) GetOptions() map[string]*Value {
	if x != nil {
		return x.Options
	}
	return nil
}

// Legacy vector format, which determines the vector type by the configuration of its fields.
type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         []float32      `protobuf:"fixed32,1,rep,packed,name=data,proto3" json:"data,omitempty"`                                   // Vector data (flatten for multi vectors), deprecated
	Indices      *SparseIndices `protobuf:"bytes,2,opt,name=indices,proto3,oneof" json:"indices,omitempty"`                                // Sparse indices for sparse vectors, deprecated
	VectorsCount *uint32        `protobuf:"varint,3,opt,name=vectors_count,json=vectorsCount,proto3,oneof" json:"vectors_count,omitempty"` // Number of vectors per multi vector, deprecated
	// Types that are assignable to Vector:
	//
	//	*Vector_Dense
	//	*Vector_Sparse
	//	*Vector_MultiDense
	//	*Vector_Document
	//	*Vector_Image
	//	*Vector_Object
	Vector isVector_Vector `protobuf_oneof:"vector"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{7}
}

func (x *Vector) GetData() []float32 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Vector) GetIndices() *SparseIndices {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *Vector) GetVectorsCount() uint32 {
	if x != nil && x.VectorsCount != nil {
		return *x.VectorsCount
	}
	return 0
}

func (m *Vector) GetVector() isVector_Vector {
	if m != nil {
		return m.Vector
	}
	return nil
}

func (x *Vector) GetDense() *DenseVector {
	if x, ok := x.GetVector().(*Vector_Dense); ok {
		return x.Dense
	}
	return nil
}

func (x *Vector) GetSparse() *SparseVector {
	if x, ok := x.GetVector().(*Vector_Sparse); ok {
		return x.Sparse
	}
	return nil
}

func (x *Vector) GetMultiDense() *MultiDenseVector {
	if x, ok := x.GetVector().(*Vector_MultiDense); ok {
		return x.MultiDense
	}
	return nil
}

func (x *Vector) GetDocument() *Document {
	if x, ok := x.GetVector().(*Vector_Document); ok {
		return x.Document
	}
	return nil
}

func (x *Vector) GetImage() *Image {
	if x, ok := x.GetVector().(*Vector_Image); ok {
		return x.Image
	}
	return nil
}

func (x *Vector) GetObject() *InferenceObject {
	if x, ok := x.GetVector().(*Vector_Object); ok {
		return x.Object
	}
	return nil
}

type isVector_Vector interface {
	isVector_Vector()
}

type Vector_Dense struct {
	Dense *DenseVector `protobuf:"bytes,101,opt,name=dense,proto3,oneof"` // Dense vector
}

type Vector_Sparse struct {
	Sparse *SparseVector `protobuf:"bytes,102,opt,name=sparse,proto3,oneof"` // Sparse vector
}

type Vector_MultiDense struct {
	MultiDense *MultiDenseVector `protobuf:"bytes,103,opt,name=multi_dense,json=multiDense,proto3,oneof"` // Multi dense vector
}

type Vector_Document struct {
	Document *Document `protobuf:"bytes,104,opt,name=document,proto3,oneof"`
}

type Vector_Image struct {
	Image *Image `protobuf:"bytes,105,opt,name=image,proto3,oneof"`
}

type Vector_Object struct {
	Object *InferenceObject `protobuf:"bytes,106,opt,name=object,proto3,oneof"`
}

func (*Vector_Dense) isVector_Vector() {}

func (*Vector_Sparse) isVector_Vector() {}

func (*Vector_MultiDense) isVector_Vector() {}

func (*Vector_Document) isVector_Vector() {}

func (*Vector_Image) isVector_Vector() {}

func (*Vector_Object) isVector_Vector() {}

type VectorOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         []float32      `protobuf:"fixed32,1,rep,packed,name=data,proto3" json:"data,omitempty"`                                   // Vector data (flatten for multi vectors), deprecated
	Indices      *SparseIndices `protobuf:"bytes,2,opt,name=indices,proto3,oneof" json:"indices,omitempty"`                                // Sparse indices for sparse vectors, deprecated
	VectorsCount *uint32        `protobuf:"varint,3,opt,name=vectors_count,json=vectorsCount,proto3,oneof" json:"vectors_count,omitempty"` // Number of vectors per multi vector, deprecated
	// Types that are assignable to Vector:
	//
	//	*VectorOutput_Dense
	//	*VectorOutput_Sparse
	//	*VectorOutput_MultiDense
	Vector isVectorOutput_Vector `protobuf_oneof:"vector"`
}

func (x *VectorOutput) Reset() {
	*x = VectorOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorOutput) ProtoMessage() {}

func (x *VectorOutput) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorOutput.ProtoReflect.Descriptor instead.
func (*VectorOutput) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{8}
}

func (x *VectorOutput) GetData() []float32 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VectorOutput) GetIndices() *SparseIndices {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *VectorOutput) GetVectorsCount() uint32 {
	if x != nil && x.VectorsCount != nil {
		return *x.VectorsCount
	}
	return 0
}

func (m *VectorOutput) GetVector() isVectorOutput_Vector {
	if m != nil {
		return m.Vector
	}
	return nil
}

func (x *VectorOutput) GetDense() *DenseVector {
	if x, ok := x.GetVector().(*VectorOutput_Dense); ok {
		return x.Dense
	}
	return nil
}

func (x *VectorOutput) GetSparse() *SparseVector {
	if x, ok := x.GetVector().(*VectorOutput_Sparse); ok {
		return x.Sparse
	}
	return nil
}

func (x *VectorOutput) GetMultiDense() *MultiDenseVector {
	if x, ok := x.GetVector().(*VectorOutput_MultiDense); ok {
		return x.MultiDense
	}
	return nil
}

type isVectorOutput_Vector interface {
	isVectorOutput_Vector()
}

type VectorOutput_Dense struct {
	Dense *DenseVector `protobuf:"bytes,101,opt,name=dense,proto3,oneof"` // Dense vector
}

type VectorOutput_Sparse struct {
	Sparse *SparseVector `protobuf:"bytes,102,opt,name=sparse,proto3,oneof"` // Sparse vector
}

type VectorOutput_MultiDense struct {
	MultiDense *MultiDenseVector `protobuf:"bytes,103,opt,name=multi_dense,json=multiDense,proto3,oneof"` // Multi dense vector
}

func (*VectorOutput_Dense) isVectorOutput_Vector() {}

func (*VectorOutput_Sparse) isVectorOutput_Vector() {}

func (*VectorOutput_MultiDense) isVectorOutput_Vector() {}

type DenseVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []float32 `protobuf:"fixed32,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *DenseVector) Reset() {
	*x = DenseVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DenseVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenseVector) ProtoMessage() {}

func (x *DenseVector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenseVector.ProtoReflect.Descriptor instead.
func (*DenseVector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{9}
}

func (x *DenseVector) GetData() []float32 {
	if x != nil {
		return x.Data
	}
	return nil
}

type SparseVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values  []float32 `protobuf:"fixed32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	Indices []uint32  `protobuf:"varint,2,rep,packed,name=indices,proto3" json:"indices,omitempty"`
}

func (x *SparseVector) Reset() {
	*x = SparseVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseVector) ProtoMessage() {}

func (x *SparseVector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseVector.ProtoReflect.Descriptor instead.
func (*SparseVector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{10}
}

func (x *SparseVector) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *SparseVector) GetIndices() []uint32 {
	if x != nil {
		return x.Indices
	}
	return nil
}

type MultiDenseVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vectors []*DenseVector `protobuf:"bytes,1,rep,name=vectors,proto3" json:"vectors,omitempty"`
}

func (x *MultiDenseVector) Reset() {
	*x = MultiDenseVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDenseVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDenseVector) ProtoMessage() {}

func (x *MultiDenseVector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDenseVector.ProtoReflect.Descriptor instead.
func (*MultiDenseVector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{11}
}

func (x *MultiDenseVector) GetVectors() []*DenseVector {
	if x != nil {
		return x.Vectors
	}
	return nil
}

// Vector type to be used in queries. Ids will be substituted with their corresponding vectors from the collection.
type VectorInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*VectorInput_Id
	//	*VectorInput_Dense
	//	*VectorInput_Sparse
	//	*VectorInput_MultiDense
	//	*VectorInput_Document
	//	*VectorInput_Image
	//	*VectorInput_Object
	Variant isVectorInput_Variant `protobuf_oneof:"variant"`
}

func (x *VectorInput) Reset() {
	*x = VectorInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorInput) ProtoMessage() {}

func (x *VectorInput) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorInput.ProtoReflect.Descriptor instead.
func (*VectorInput) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{12}
}

func (m *VectorInput) GetVariant() isVectorInput_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *VectorInput) GetId() *PointId {
	if x, ok := x.GetVariant().(*VectorInput_Id); ok {
		return x.Id
	}
	return nil
}

func (x *VectorInput) GetDense() *DenseVector {
	if x, ok := x.GetVariant().(*VectorInput_Dense); ok {
		return x.Dense
	}
	return nil
}

func (x *VectorInput) GetSparse() *SparseVector {
	if x, ok := x.GetVariant().(*VectorInput_Sparse); ok {
		return x.Sparse
	}
	return nil
}

func (x *VectorInput) GetMultiDense() *MultiDenseVector {
	if x, ok := x.GetVariant().(*VectorInput_MultiDense); ok {
		return x.MultiDense
	}
	return nil
}

func (x *VectorInput) GetDocument() *Document {
	if x, ok := x.GetVariant().(*VectorInput_Document); ok {
		return x.Document
	}
	return nil
}

func (x *VectorInput) GetImage() *Image {
	if x, ok := x.GetVariant().(*VectorInput_Image); ok {
		return x.Image
	}
	return nil
}

func (x *VectorInput) GetObject() *InferenceObject {
	if x, ok := x.GetVariant().(*VectorInput_Object); ok {
		return x.Object
	}
	return nil
}

type isVectorInput_Variant interface {
	isVectorInput_Variant()
}

type VectorInput_Id struct {
	Id *PointId `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type VectorInput_Dense struct {
	Dense *DenseVector `protobuf:"bytes,2,opt,name=dense,proto3,oneof"`
}

type VectorInput_Sparse struct {
	Sparse *SparseVector `protobuf:"bytes,3,opt,name=sparse,proto3,oneof"`
}

type VectorInput_MultiDense struct {
	MultiDense *MultiDenseVector `protobuf:"bytes,4,opt,name=multi_dense,json=multiDense,proto3,oneof"`
}

type VectorInput_Document struct {
	Document *Document `protobuf:"bytes,5,opt,name=document,proto3,oneof"`
}

type VectorInput_Image struct {
	Image *Image `protobuf:"bytes,6,opt,name=image,proto3,oneof"`
}

type VectorInput_Object struct {
	Object *InferenceObject `protobuf:"bytes,7,opt,name=object,proto3,oneof"`
}

func (*VectorInput_Id) isVectorInput_Variant() {}

func (*VectorInput_Dense) isVectorInput_Variant() {}

func (*VectorInput_Sparse) isVectorInput_Variant() {}

func (*VectorInput_MultiDense) isVectorInput_Variant() {}

func (*VectorInput_Document) isVectorInput_Variant() {}

func (*VectorInput_Image) isVectorInput_Variant() {}

func (*VectorInput_Object) isVectorInput_Variant() {}

type ShardKeySelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardKeys []*ShardKey `protobuf:"bytes,1,rep,name=shard_keys,json=shardKeys,proto3" json:"shard_keys,omitempty"` // List of shard keys which should be used in the request
}

func (x *ShardKeySelector) Reset() {
	*x = ShardKeySelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardKeySelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardKeySelector) ProtoMessage() {}

func (x *ShardKeySelector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardKeySelector.ProtoReflect.Descriptor instead.
func (*ShardKeySelector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{13}
}

func (x *ShardKeySelector) GetShardKeys() []*ShardKey {
	if x != nil {
		return x.ShardKeys
	}
	return nil
}

type UpsertPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // name of the collection
	Wait             *bool             `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                    // Wait until the changes have been applied?
	Points           []*PointStruct    `protobuf:"bytes,3,rep,name=points,proto3" json:"points,omitempty"`
	Ordering         *WriteOrdering    `protobuf:"bytes,4,opt,name=ordering,proto3,oneof" json:"ordering,omitempty"`                                           // Write ordering guarantees
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,5,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
}

func (x *UpsertPoints) Reset() {
	*x = UpsertPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertPoints) ProtoMessage() {}

func (x *UpsertPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertPoints.ProtoReflect.Descriptor instead.
func (*UpsertPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{14}
}

func (x *UpsertPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *UpsertPoints) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *UpsertPoints) GetPoints() []*PointStruct {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *UpsertPoints) GetOrdering() *WriteOrdering {
	if x != nil {
		return x.Ordering
	}
	return nil
}

func (x *UpsertPoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type DeletePoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`               // name of the collection
	Wait             *bool             `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                                  // Wait until the changes have been applied?
	Points           *PointsSelector   `protobuf:"bytes,3,opt,name=points,proto3" json:"points,omitempty"`                                                     // Affected points
	Ordering         *WriteOrdering    `protobuf:"bytes,4,opt,name=ordering,proto3,oneof" json:"ordering,omitempty"`                                           // Write ordering guarantees
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,5,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
}

func (x *DeletePoints) Reset() {
	*x = DeletePoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePoints) ProtoMessage() {}

func (x *DeletePoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePoints.ProtoReflect.Descriptor instead.
func (*DeletePoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{15}
}

func (x *DeletePoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DeletePoints) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *DeletePoints) GetPoints() *PointsSelector {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *DeletePoints) GetOrdering() *WriteOrdering {
	if x != nil {
		return x.Ordering
	}
	return nil
}

func (x *DeletePoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type GetPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string               `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`               // name of the collection
	Ids              []*PointId           `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`                                                           // List of points to retrieve
	WithPayload      *WithPayloadSelector `protobuf:"bytes,4,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`                        // Options for specifying which payload to include or not
	WithVectors      *WithVectorsSelector `protobuf:"bytes,5,opt,name=with_vectors,json=withVectors,proto3,oneof" json:"with_vectors,omitempty"`                  // Options for specifying which vectors to include into response
	ReadConsistency  *ReadConsistency     `protobuf:"bytes,6,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"`      // Options for specifying read consistency guarantees
	ShardKeySelector *ShardKeySelector    `protobuf:"bytes,7,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Specify in which shards to look for the points, if not specified - look in all shards
	Timeout          *uint64              `protobuf:"varint,8,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                            // If set, overrides global timeout setting for this request. Unit is seconds.
}

func (x *GetPoints) Reset() {
	*x = GetPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoints) ProtoMessage() {}

func (x *GetPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoints.ProtoReflect.Descriptor instead.
func (*GetPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{16}
}

func (x *GetPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *GetPoints) GetIds() []*PointId {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetPoints) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *GetPoints) GetWithVectors() *WithVectorsSelector {
	if x != nil {
		return x.WithVectors
	}
	return nil
}

func (x *GetPoints) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *GetPoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

func (x *GetPoints) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type UpdatePointVectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`               // name of the collection
	Wait             *bool             `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                                  // Wait until the changes have been applied?
	Points           []*PointVectors   `protobuf:"bytes,3,rep,name=points,proto3" json:"points,omitempty"`                                                     // List of points and vectors to update
	Ordering         *WriteOrdering    `protobuf:"bytes,4,opt,name=ordering,proto3,oneof" json:"ordering,omitempty"`                                           // Write ordering guarantees
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,5,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
}

func (x *UpdatePointVectors) Reset() {
	*x = UpdatePointVectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePointVectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePointVectors) ProtoMessage() {}

func (x *UpdatePointVectors) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePointVectors.ProtoReflect.Descriptor instead.
func (*UpdatePointVectors) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{17}
}

func (x *UpdatePointVectors) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *UpdatePointVectors) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *UpdatePointVectors) GetPoints() []*PointVectors {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *UpdatePointVectors) GetOrdering() *WriteOrdering {
	if x != nil {
		return x.Ordering
	}
	return nil
}

func (x *UpdatePointVectors) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type PointVectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *PointId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // ID to update vectors for
	Vectors *Vectors `protobuf:"bytes,2,opt,name=vectors,proto3" json:"vectors,omitempty"` // Named vectors to update, leave others intact
}

func (x *PointVectors) Reset() {
	*x = PointVectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointVectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointVectors) ProtoMessage() {}

func (x *PointVectors) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointVectors.ProtoReflect.Descriptor instead.
func (*PointVectors) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{18}
}

func (x *PointVectors) GetId() *PointId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PointVectors) GetVectors() *Vectors {
	if x != nil {
		return x.Vectors
	}
	return nil
}

type DeletePointVectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`               // name of the collection
	Wait             *bool             `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                                  // Wait until the changes have been applied?
	PointsSelector   *PointsSelector   `protobuf:"bytes,3,opt,name=points_selector,json=pointsSelector,proto3" json:"points_selector,omitempty"`               // Affected points
	Vectors          *VectorsSelector  `protobuf:"bytes,4,opt,name=vectors,proto3" json:"vectors,omitempty"`                                                   // List of vector names to delete
	Ordering         *WriteOrdering    `protobuf:"bytes,5,opt,name=ordering,proto3,oneof" json:"ordering,omitempty"`                                           // Write ordering guarantees
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,6,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
}

func (x *DeletePointVectors) Reset() {
	*x = DeletePointVectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePointVectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePointVectors) ProtoMessage() {}

func (x *DeletePointVectors) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePointVectors.ProtoReflect.Descriptor instead.
func (*DeletePointVectors) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{19}
}

func (x *DeletePointVectors) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DeletePointVectors) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *DeletePointVectors) GetPointsSelector() *PointsSelector {
	if x != nil {
		return x.PointsSelector
	}
	return nil
}

func (x *DeletePointVectors) GetVectors() *VectorsSelector {
	if x != nil {
		return x.Vectors
	}
	return nil
}

func (x *DeletePointVectors) GetOrdering() *WriteOrdering {
	if x != nil {
		return x.Ordering
	}
	return nil
}

func (x *DeletePointVectors) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type SetPayloadPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`                                                     // name of the collection
	Wait             *bool             `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                                                                        // Wait until the changes have been applied?
	Payload          map[string]*Value `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // New payload values
	PointsSelector   *PointsSelector   `protobuf:"bytes,5,opt,name=points_selector,json=pointsSelector,proto3,oneof" json:"points_selector,omitempty"`                                               // Affected points
	Ordering         *WriteOrdering    `protobuf:"bytes,6,opt,name=ordering,proto3,oneof" json:"ordering,omitempty"`                                                                                 // Write ordering guarantees
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,7,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"`                                       // Option for custom sharding to specify used shard keys
	Key              *string           `protobuf:"bytes,8,opt,name=key,proto3,oneof" json:"key,omitempty"`                                                                                           // Option for indicate property of payload
}

func (x *SetPayloadPoints) Reset() {
	*x = SetPayloadPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPayloadPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPayloadPoints) ProtoMessage() {}

func (x *SetPayloadPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPayloadPoints.ProtoReflect.Descriptor instead.
func (*SetPayloadPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{20}
}

func (x *SetPayloadPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SetPayloadPoints) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *SetPayloadPoints) GetPayload() map[string]*Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SetPayloadPoints) GetPointsSelector() *PointsSelector {
	if x != nil {
		return x.PointsSelector
	}
	return nil
}

func (x *SetPayloadPoints) GetOrdering() *WriteOrdering {
	if x != nil {
		return x.Ordering
	}
	return nil
}

func (x *SetPayloadPoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

func (x *SetPayloadPoints) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type DeletePayloadPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`               // name of the collection
	Wait             *bool             `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                                  // Wait until the changes have been applied?
	Keys             []string          `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`                                                         // List of keys to delete
	PointsSelector   *PointsSelector   `protobuf:"bytes,5,opt,name=points_selector,json=pointsSelector,proto3,oneof" json:"points_selector,omitempty"`         // Affected points
	Ordering         *WriteOrdering    `protobuf:"bytes,6,opt,name=ordering,proto3,oneof" json:"ordering,omitempty"`                                           // Write ordering guarantees
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,7,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
}

func (x *DeletePayloadPoints) Reset() {
	*x = DeletePayloadPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePayloadPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePayloadPoints) ProtoMessage() {}

func (x *DeletePayloadPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePayloadPoints.ProtoReflect.Descriptor instead.
func (*DeletePayloadPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{21}
}

func (x *DeletePayloadPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DeletePayloadPoints) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *DeletePayloadPoints) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DeletePayloadPoints) GetPointsSelector() *PointsSelector {
	if x != nil {
		return x.PointsSelector
	}
	return nil
}

func (x *DeletePayloadPoints) GetOrdering() *WriteOrdering {
	if x != nil {
		return x.Ordering
	}
	return nil
}

func (x *DeletePayloadPoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type ClearPayloadPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`               // name of the collection
	Wait             *bool             `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                                  // Wait until the changes have been applied?
	Points           *PointsSelector   `protobuf:"bytes,3,opt,name=points,proto3" json:"points,omitempty"`                                                     // Affected points
	Ordering         *WriteOrdering    `protobuf:"bytes,4,opt,name=ordering,proto3,oneof" json:"ordering,omitempty"`                                           // Write ordering guarantees
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,5,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
}

func (x *ClearPayloadPoints) Reset() {
	*x = ClearPayloadPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearPayloadPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearPayloadPoints) ProtoMessage() {}

func (x *ClearPayloadPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearPayloadPoints.ProtoReflect.Descriptor instead.
func (*ClearPayloadPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{22}
}

func (x *ClearPayloadPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *ClearPayloadPoints) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *ClearPayloadPoints) GetPoints() *PointsSelector {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *ClearPayloadPoints) GetOrdering() *WriteOrdering {
	if x != nil {
		return x.Ordering
	}
	return nil
}

func (x *ClearPayloadPoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type CreateFieldIndexCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string              `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`               // name of the collection
	Wait             *bool               `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                                  // Wait until the changes have been applied?
	FieldName        string              `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`                              // Field name to index
	FieldType        *FieldType          `protobuf:"varint,4,opt,name=field_type,json=fieldType,proto3,enum=qdrant.FieldType,oneof" json:"field_type,omitempty"` // Field type.
	FieldIndexParams *PayloadIndexParams `protobuf:"bytes,5,opt,name=field_index_params,json=fieldIndexParams,proto3,oneof" json:"field_index_params,omitempty"` // Payload index params.
	Ordering         *WriteOrdering      `protobuf:"bytes,6,opt,name=ordering,proto3,oneof" json:"ordering,omitempty"`                                           // Write ordering guarantees
}

func (x *CreateFieldIndexCollection) Reset() {
	*x = CreateFieldIndexCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFieldIndexCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFieldIndexCollection) ProtoMessage() {}

func (x *CreateFieldIndexCollection) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFieldIndexCollection.ProtoReflect.Descriptor instead.
func (*CreateFieldIndexCollection) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{23}
}

func (x *CreateFieldIndexCollection) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CreateFieldIndexCollection) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *CreateFieldIndexCollection) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CreateFieldIndexCollection) GetFieldType() FieldType {
	if x != nil && x.FieldType != nil {
		return *x.FieldType
	}
	return FieldType_FieldTypeKeyword
}

func (x *CreateFieldIndexCollection) GetFieldIndexParams() *PayloadIndexParams {
	if x != nil {
		return x.FieldIndexParams
	}
	return nil
}

func (x *CreateFieldIndexCollection) GetOrdering() *WriteOrdering {
	if x != nil {
		return x.Ordering
	}
	return nil
}

type DeleteFieldIndexCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string         `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // name of the collection
	Wait           *bool          `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                    // Wait until the changes have been applied?
	FieldName      string         `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`                // Field name to delete
	Ordering       *WriteOrdering `protobuf:"bytes,4,opt,name=ordering,proto3,oneof" json:"ordering,omitempty"`                             // Write ordering guarantees
}

func (x *DeleteFieldIndexCollection) Reset() {
	*x = DeleteFieldIndexCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFieldIndexCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFieldIndexCollection) ProtoMessage() {}

func (x *DeleteFieldIndexCollection) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFieldIndexCollection.ProtoReflect.Descriptor instead.
func (*DeleteFieldIndexCollection) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteFieldIndexCollection) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DeleteFieldIndexCollection) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *DeleteFieldIndexCollection) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *DeleteFieldIndexCollection) GetOrdering() *WriteOrdering {
	if x != nil {
		return x.Ordering
	}
	return nil
}

type PayloadIncludeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"` // List of payload keys to include into result
}

func (x *PayloadIncludeSelector) Reset() {
	*x = PayloadIncludeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadIncludeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadIncludeSelector) ProtoMessage() {}

func (x *PayloadIncludeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadIncludeSelector.ProtoReflect.Descriptor instead.
func (*PayloadIncludeSelector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{25}
}

func (x *PayloadIncludeSelector) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type PayloadExcludeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"` // List of payload keys to exclude from the result
}

func (x *PayloadExcludeSelector) Reset() {
	*x = PayloadExcludeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadExcludeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadExcludeSelector) ProtoMessage() {}

func (x *PayloadExcludeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadExcludeSelector.ProtoReflect.Descriptor instead.
func (*PayloadExcludeSelector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{26}
}

func (x *PayloadExcludeSelector) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type WithPayloadSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SelectorOptions:
	//
	//	*WithPayloadSelector_Enable
	//	*WithPayloadSelector_Include
	//	*WithPayloadSelector_Exclude
	SelectorOptions isWithPayloadSelector_SelectorOptions `protobuf_oneof:"selector_options"`
}

func (x *WithPayloadSelector) Reset() {
	*x = WithPayloadSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithPayloadSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithPayloadSelector) ProtoMessage() {}

func (x *WithPayloadSelector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithPayloadSelector.ProtoReflect.Descriptor instead.
func (*WithPayloadSelector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{27}
}

func (m *WithPayloadSelector) GetSelectorOptions() isWithPayloadSelector_SelectorOptions {
	if m != nil {
		return m.SelectorOptions
	}
	return nil
}

func (x *WithPayloadSelector) GetEnable() bool {
	if x, ok := x.GetSelectorOptions().(*WithPayloadSelector_Enable); ok {
		return x.Enable
	}
	return false
}

func (x *WithPayloadSelector) GetInclude() *PayloadIncludeSelector {
	if x, ok := x.GetSelectorOptions().(*WithPayloadSelector_Include); ok {
		return x.Include
	}
	return nil
}

func (x *WithPayloadSelector) GetExclude() *PayloadExcludeSelector {
	if x, ok := x.GetSelectorOptions().(*WithPayloadSelector_Exclude); ok {
		return x.Exclude
	}
	return nil
}

type isWithPayloadSelector_SelectorOptions interface {
	isWithPayloadSelector_SelectorOptions()
}

type WithPayloadSelector_Enable struct {
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3,oneof"` // If `true` - return all payload, if `false` - none
}

type WithPayloadSelector_Include struct {
	Include *PayloadIncludeSelector `protobuf:"bytes,2,opt,name=include,proto3,oneof"`
}

type WithPayloadSelector_Exclude struct {
	Exclude *PayloadExcludeSelector `protobuf:"bytes,3,opt,name=exclude,proto3,oneof"`
}

func (*WithPayloadSelector_Enable) isWithPayloadSelector_SelectorOptions() {}

func (*WithPayloadSelector_Include) isWithPayloadSelector_SelectorOptions() {}

func (*WithPayloadSelector_Exclude) isWithPayloadSelector_SelectorOptions() {}

type NamedVectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vectors map[string]*Vector `protobuf:"bytes,1,rep,name=vectors,proto3" json:"vectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NamedVectors) Reset() {
	*x = NamedVectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedVectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedVectors) ProtoMessage() {}

func (x *NamedVectors) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedVectors.ProtoReflect.Descriptor instead.
func (*NamedVectors) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{28}
}

func (x *NamedVectors) GetVectors() map[string]*Vector {
	if x != nil {
		return x.Vectors
	}
	return nil
}

type NamedVectorsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vectors map[string]*VectorOutput `protobuf:"bytes,1,rep,name=vectors,proto3" json:"vectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NamedVectorsOutput) Reset() {
	*x = NamedVectorsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedVectorsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedVectorsOutput) ProtoMessage() {}

func (x *NamedVectorsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedVectorsOutput.ProtoReflect.Descriptor instead.
func (*NamedVectorsOutput) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{29}
}

func (x *NamedVectorsOutput) GetVectors() map[string]*VectorOutput {
	if x != nil {
		return x.Vectors
	}
	return nil
}

type Vectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to VectorsOptions:
	//
	//	*Vectors_Vector
	//	*Vectors_Vectors
	VectorsOptions isVectors_VectorsOptions `protobuf_oneof:"vectors_options"`
}

func (x *Vectors) Reset() {
	*x = Vectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vectors) ProtoMessage() {}

func (x *Vectors) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vectors.ProtoReflect.Descriptor instead.
func (*Vectors) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{30}
}

func (m *Vectors) GetVectorsOptions() isVectors_VectorsOptions {
	if m != nil {
		return m.VectorsOptions
	}
	return nil
}

func (x *Vectors) GetVector() *Vector {
	if x, ok := x.GetVectorsOptions().(*Vectors_Vector); ok {
		return x.Vector
	}
	return nil
}

func (x *Vectors) GetVectors() *NamedVectors {
	if x, ok := x.GetVectorsOptions().(*Vectors_Vectors); ok {
		return x.Vectors
	}
	return nil
}

type isVectors_VectorsOptions interface {
	isVectors_VectorsOptions()
}

type Vectors_Vector struct {
	Vector *Vector `protobuf:"bytes,1,opt,name=vector,proto3,oneof"`
}

type Vectors_Vectors struct {
	Vectors *NamedVectors `protobuf:"bytes,2,opt,name=vectors,proto3,oneof"`
}

func (*Vectors_Vector) isVectors_VectorsOptions() {}

func (*Vectors_Vectors) isVectors_VectorsOptions() {}

type VectorsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to VectorsOptions:
	//
	//	*VectorsOutput_Vector
	//	*VectorsOutput_Vectors
	VectorsOptions isVectorsOutput_VectorsOptions `protobuf_oneof:"vectors_options"`
}

func (x *VectorsOutput) Reset() {
	*x = VectorsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorsOutput) ProtoMessage() {}

func (x *VectorsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorsOutput.ProtoReflect.Descriptor instead.
func (*VectorsOutput) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{31}
}

func (m *VectorsOutput) GetVectorsOptions() isVectorsOutput_VectorsOptions {
	if m != nil {
		return m.VectorsOptions
	}
	return nil
}

func (x *VectorsOutput) GetVector() *VectorOutput {
	if x, ok := x.GetVectorsOptions().(*VectorsOutput_Vector); ok {
		return x.Vector
	}
	return nil
}

func (x *VectorsOutput) GetVectors() *NamedVectorsOutput {
	if x, ok := x.GetVectorsOptions().(*VectorsOutput_Vectors); ok {
		return x.Vectors
	}
	return nil
}

type isVectorsOutput_VectorsOptions interface {
	isVectorsOutput_VectorsOptions()
}

type VectorsOutput_Vector struct {
	Vector *VectorOutput `protobuf:"bytes,1,opt,name=vector,proto3,oneof"`
}

type VectorsOutput_Vectors struct {
	Vectors *NamedVectorsOutput `protobuf:"bytes,2,opt,name=vectors,proto3,oneof"`
}

func (*VectorsOutput_Vector) isVectorsOutput_VectorsOptions() {}

func (*VectorsOutput_Vectors) isVectorsOutput_VectorsOptions() {}

type VectorsSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"` // List of vectors to include into result
}

func (x *VectorsSelector) Reset() {
	*x = VectorsSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorsSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorsSelector) ProtoMessage() {}

func (x *VectorsSelector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorsSelector.ProtoReflect.Descriptor instead.
func (*VectorsSelector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{32}
}

func (x *VectorsSelector) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type WithVectorsSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SelectorOptions:
	//
	//	*WithVectorsSelector_Enable
	//	*WithVectorsSelector_Include
	SelectorOptions isWithVectorsSelector_SelectorOptions `protobuf_oneof:"selector_options"`
}

func (x *WithVectorsSelector) Reset() {
	*x = WithVectorsSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithVectorsSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithVectorsSelector) ProtoMessage() {}

func (x *WithVectorsSelector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithVectorsSelector.ProtoReflect.Descriptor instead.
func (*WithVectorsSelector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{33}
}

func (m *WithVectorsSelector) GetSelectorOptions() isWithVectorsSelector_SelectorOptions {
	if m != nil {
		return m.SelectorOptions
	}
	return nil
}

func (x *WithVectorsSelector) GetEnable() bool {
	if x, ok := x.GetSelectorOptions().(*WithVectorsSelector_Enable); ok {
		return x.Enable
	}
	return false
}

func (x *WithVectorsSelector) GetInclude() *VectorsSelector {
	if x, ok := x.GetSelectorOptions().(*WithVectorsSelector_Include); ok {
		return x.Include
	}
	return nil
}

type isWithVectorsSelector_SelectorOptions interface {
	isWithVectorsSelector_SelectorOptions()
}

type WithVectorsSelector_Enable struct {
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3,oneof"` // If `true` - return all vectors, if `false` - none
}

type WithVectorsSelector_Include struct {
	Include *VectorsSelector `protobuf:"bytes,2,opt,name=include,proto3,oneof"` // List of payload keys to include into result
}

func (*WithVectorsSelector_Enable) isWithVectorsSelector_SelectorOptions() {}

func (*WithVectorsSelector_Include) isWithVectorsSelector_SelectorOptions() {}

type QuantizationSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true, search will ignore quantized vector data
	Ignore *bool `protobuf:"varint,1,opt,name=ignore,proto3,oneof" json:"ignore,omitempty"`
	// If true, use original vectors to re-score top-k results. If ignored, qdrant decides automatically does rescore enabled or not.
	Rescore *bool `protobuf:"varint,2,opt,name=rescore,proto3,oneof" json:"rescore,omitempty"`
	// Oversampling factor for quantization.
	//
	// Defines how many extra vectors should be pre-selected using quantized index,
	// and then re-scored using original vectors.
	//
	// For example, if `oversampling` is 2.4 and `limit` is 100, then 240 vectors will be pre-selected using quantized index,
	// and then top-100 will be returned after re-scoring.
	Oversampling *float64 `protobuf:"fixed64,3,opt,name=oversampling,proto3,oneof" json:"oversampling,omitempty"`
}

func (x *QuantizationSearchParams) Reset() {
	*x = QuantizationSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantizationSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantizationSearchParams) ProtoMessage() {}

func (x *QuantizationSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantizationSearchParams.ProtoReflect.Descriptor instead.
func (*QuantizationSearchParams) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{34}
}

func (x *QuantizationSearchParams) GetIgnore() bool {
	if x != nil && x.Ignore != nil {
		return *x.Ignore
	}
	return false
}

func (x *QuantizationSearchParams) GetRescore() bool {
	if x != nil && x.Rescore != nil {
		return *x.Rescore
	}
	return false
}

func (x *QuantizationSearchParams) GetOversampling() float64 {
	if x != nil && x.Oversampling != nil {
		return *x.Oversampling
	}
	return 0
}

type SearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Params relevant to HNSW index. Size of the beam in a beam-search.
	// Larger the value - more accurate the result, more time required for search.
	HnswEf *uint64 `protobuf:"varint,1,opt,name=hnsw_ef,json=hnswEf,proto3,oneof" json:"hnsw_ef,omitempty"`
	// Search without approximation. If set to true, search may run long but with exact results.
	Exact *bool `protobuf:"varint,2,opt,name=exact,proto3,oneof" json:"exact,omitempty"`
	// If set to true, search will ignore quantized vector data
	Quantization *QuantizationSearchParams `protobuf:"bytes,3,opt,name=quantization,proto3,oneof" json:"quantization,omitempty"`
	// If enabled, the engine will only perform search among indexed or small segments.
	// Using this option prevents slow searches in case of delayed index, but does not
	// guarantee that all uploaded vectors will be included in search results
	IndexedOnly *bool `protobuf:"varint,4,opt,name=indexed_only,json=indexedOnly,proto3,oneof" json:"indexed_only,omitempty"`
}

func (x *SearchParams) Reset() {
	*x = SearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParams) ProtoMessage() {}

func (x *SearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParams.ProtoReflect.Descriptor instead.
func (*SearchParams) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{35}
}

func (x *SearchParams) GetHnswEf() uint64 {
	if x != nil && x.HnswEf != nil {
		return *x.HnswEf
	}
	return 0
}

func (x *SearchParams) GetExact() bool {
	if x != nil && x.Exact != nil {
		return *x.Exact
	}
	return false
}

func (x *SearchParams) GetQuantization() *QuantizationSearchParams {
	if x != nil {
		return x.Quantization
	}
	return nil
}

func (x *SearchParams) GetIndexedOnly() bool {
	if x != nil && x.IndexedOnly != nil {
		return *x.IndexedOnly
	}
	return false
}

type SearchPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string               `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`                // name of the collection
	Vector           []float32            `protobuf:"fixed32,2,rep,packed,name=vector,proto3" json:"vector,omitempty"`                                             // vector
	Filter           *Filter              `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`                                                      // Filter conditions - return only those points that satisfy the specified conditions
	Limit            uint64               `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`                                                       // Max number of result
	WithPayload      *WithPayloadSelector `protobuf:"bytes,6,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`                         // Options for specifying which payload to include or not
	Params           *SearchParams        `protobuf:"bytes,7,opt,name=params,proto3" json:"params,omitempty"`                                                      // Search config
	ScoreThreshold   *float32             `protobuf:"fixed32,8,opt,name=score_threshold,json=scoreThreshold,proto3,oneof" json:"score_threshold,omitempty"`        // If provided - cut off results with worse scores
	Offset           *uint64              `protobuf:"varint,9,opt,name=offset,proto3,oneof" json:"offset,omitempty"`                                               // Offset of the result
	VectorName       *string              `protobuf:"bytes,10,opt,name=vector_name,json=vectorName,proto3,oneof" json:"vector_name,omitempty"`                     // Which vector to use for search, if not specified - use default vector
	WithVectors      *WithVectorsSelector `protobuf:"bytes,11,opt,name=with_vectors,json=withVectors,proto3,oneof" json:"with_vectors,omitempty"`                  // Options for specifying which vectors to include into response
	ReadConsistency  *ReadConsistency     `protobuf:"bytes,12,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"`      // Options for specifying read consistency guarantees
	Timeout          *uint64              `protobuf:"varint,13,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                            // If set, overrides global timeout setting for this request. Unit is seconds.
	ShardKeySelector *ShardKeySelector    `protobuf:"bytes,14,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Specify in which shards to look for the points, if not specified - look in all shards
	SparseIndices    *SparseIndices       `protobuf:"bytes,15,opt,name=sparse_indices,json=sparseIndices,proto3,oneof" json:"sparse_indices,omitempty"`
}

func (x *SearchPoints) Reset() {
	*x = SearchPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPoints) ProtoMessage() {}

func (x *SearchPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPoints.ProtoReflect.Descriptor instead.
func (*SearchPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{36}
}

func (x *SearchPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SearchPoints) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *SearchPoints) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchPoints) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchPoints) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *SearchPoints) GetParams() *SearchParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SearchPoints) GetScoreThreshold() float32 {
	if x != nil && x.ScoreThreshold != nil {
		return *x.ScoreThreshold
	}
	return 0
}

func (x *SearchPoints) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *SearchPoints) GetVectorName() string {
	if x != nil && x.VectorName != nil {
		return *x.VectorName
	}
	return ""
}

func (x *SearchPoints) GetWithVectors() *WithVectorsSelector {
	if x != nil {
		return x.WithVectors
	}
	return nil
}

func (x *SearchPoints) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *SearchPoints) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *SearchPoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

func (x *SearchPoints) GetSparseIndices() *SparseIndices {
	if x != nil {
		return x.SparseIndices
	}
	return nil
}

type SearchBatchPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName  string           `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // Name of the collection
	SearchPoints    []*SearchPoints  `protobuf:"bytes,2,rep,name=search_points,json=searchPoints,proto3" json:"search_points,omitempty"`
	ReadConsistency *ReadConsistency `protobuf:"bytes,3,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"` // Options for specifying read consistency guarantees
	Timeout         *uint64          `protobuf:"varint,4,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                       // If set, overrides global timeout setting for this request. Unit is seconds.
}

func (x *SearchBatchPoints) Reset() {
	*x = SearchBatchPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBatchPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBatchPoints) ProtoMessage() {}

func (x *SearchBatchPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBatchPoints.ProtoReflect.Descriptor instead.
func (*SearchBatchPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{37}
}

func (x *SearchBatchPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SearchBatchPoints) GetSearchPoints() []*SearchPoints {
	if x != nil {
		return x.SearchPoints
	}
	return nil
}

func (x *SearchBatchPoints) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *SearchBatchPoints) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type WithLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection  string               `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`                            // Name of the collection to use for points lookup
	WithPayload *WithPayloadSelector `protobuf:"bytes,2,opt,name=with_payload,json=withPayload,proto3,oneof" json:"with_payload,omitempty"` // Options for specifying which payload to include (or not)
	WithVectors *WithVectorsSelector `protobuf:"bytes,3,opt,name=with_vectors,json=withVectors,proto3,oneof" json:"with_vectors,omitempty"` // Options for specifying which vectors to include (or not)
}

func (x *WithLookup) Reset() {
	*x = WithLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithLookup) ProtoMessage() {}

func (x *WithLookup) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithLookup.ProtoReflect.Descriptor instead.
func (*WithLookup) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{38}
}

func (x *WithLookup) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *WithLookup) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *WithLookup) GetWithVectors() *WithVectorsSelector {
	if x != nil {
		return x.WithVectors
	}
	return nil
}

type SearchPointGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string               `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`                // Name of the collection
	Vector           []float32            `protobuf:"fixed32,2,rep,packed,name=vector,proto3" json:"vector,omitempty"`                                             // Vector to compare against
	Filter           *Filter              `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`                                                      // Filter conditions - return only those points that satisfy the specified conditions
	Limit            uint32               `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`                                                       // Max number of result
	WithPayload      *WithPayloadSelector `protobuf:"bytes,5,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`                         // Options for specifying which payload to include or not
	Params           *SearchParams        `protobuf:"bytes,6,opt,name=params,proto3" json:"params,omitempty"`                                                      // Search config
	ScoreThreshold   *float32             `protobuf:"fixed32,7,opt,name=score_threshold,json=scoreThreshold,proto3,oneof" json:"score_threshold,omitempty"`        // If provided - cut off results with worse scores
	VectorName       *string              `protobuf:"bytes,8,opt,name=vector_name,json=vectorName,proto3,oneof" json:"vector_name,omitempty"`                      // Which vector to use for search, if not specified - use default vector
	WithVectors      *WithVectorsSelector `protobuf:"bytes,9,opt,name=with_vectors,json=withVectors,proto3,oneof" json:"with_vectors,omitempty"`                   // Options for specifying which vectors to include into response
	GroupBy          string               `protobuf:"bytes,10,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`                                    // Payload field to group by, must be a string or number field. If there are multiple values for the field, all of them will be used. One point can be in multiple groups.
	GroupSize        uint32               `protobuf:"varint,11,opt,name=group_size,json=groupSize,proto3" json:"group_size,omitempty"`                             // Maximum amount of points to return per group
	ReadConsistency  *ReadConsistency     `protobuf:"bytes,12,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"`      // Options for specifying read consistency guarantees
	WithLookup       *WithLookup          `protobuf:"bytes,13,opt,name=with_lookup,json=withLookup,proto3,oneof" json:"with_lookup,omitempty"`                     // Options for specifying how to use the group id to lookup points in another collection
	Timeout          *uint64              `protobuf:"varint,14,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                            // If set, overrides global timeout setting for this request. Unit is seconds.
	ShardKeySelector *ShardKeySelector    `protobuf:"bytes,15,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Specify in which shards to look for the points, if not specified - look in all shards
	SparseIndices    *SparseIndices       `protobuf:"bytes,16,opt,name=sparse_indices,json=sparseIndices,proto3,oneof" json:"sparse_indices,omitempty"`
}

func (x *SearchPointGroups) Reset() {
	*x = SearchPointGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPointGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPointGroups) ProtoMessage() {}

func (x *SearchPointGroups) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPointGroups.ProtoReflect.Descriptor instead.
func (*SearchPointGroups) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{39}
}

func (x *SearchPointGroups) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SearchPointGroups) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *SearchPointGroups) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchPointGroups) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchPointGroups) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *SearchPointGroups) GetParams() *SearchParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SearchPointGroups) GetScoreThreshold() float32 {
	if x != nil && x.ScoreThreshold != nil {
		return *x.ScoreThreshold
	}
	return 0
}

func (x *SearchPointGroups) GetVectorName() string {
	if x != nil && x.VectorName != nil {
		return *x.VectorName
	}
	return ""
}

func (x *SearchPointGroups) GetWithVectors() *WithVectorsSelector {
	if x != nil {
		return x.WithVectors
	}
	return nil
}

func (x *SearchPointGroups) GetGroupBy() string {
	if x != nil {
		return x.GroupBy
	}
	return ""
}

func (x *SearchPointGroups) GetGroupSize() uint32 {
	if x != nil {
		return x.GroupSize
	}
	return 0
}

func (x *SearchPointGroups) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *SearchPointGroups) GetWithLookup() *WithLookup {
	if x != nil {
		return x.WithLookup
	}
	return nil
}

func (x *SearchPointGroups) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *SearchPointGroups) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

func (x *SearchPointGroups) GetSparseIndices() *SparseIndices {
	if x != nil {
		return x.SparseIndices
	}
	return nil
}

type StartFrom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*StartFrom_Float
	//	*StartFrom_Integer
	//	*StartFrom_Timestamp
	//	*StartFrom_Datetime
	Value isStartFrom_Value `protobuf_oneof:"value"`
}

func (x *StartFrom) Reset() {
	*x = StartFrom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFrom) ProtoMessage() {}

func (x *StartFrom) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFrom.ProtoReflect.Descriptor instead.
func (*StartFrom) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{40}
}

func (m *StartFrom) GetValue() isStartFrom_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *StartFrom) GetFloat() float64 {
	if x, ok := x.GetValue().(*StartFrom_Float); ok {
		return x.Float
	}
	return 0
}

func (x *StartFrom) GetInteger() int64 {
	if x, ok := x.GetValue().(*StartFrom_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *StartFrom) GetTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetValue().(*StartFrom_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *StartFrom) GetDatetime() string {
	if x, ok := x.GetValue().(*StartFrom_Datetime); ok {
		return x.Datetime
	}
	return ""
}

type isStartFrom_Value interface {
	isStartFrom_Value()
}

type StartFrom_Float struct {
	Float float64 `protobuf:"fixed64,1,opt,name=float,proto3,oneof"`
}

type StartFrom_Integer struct {
	Integer int64 `protobuf:"varint,2,opt,name=integer,proto3,oneof"`
}

type StartFrom_Timestamp struct {
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3,oneof"`
}

type StartFrom_Datetime struct {
	Datetime string `protobuf:"bytes,4,opt,name=datetime,proto3,oneof"`
}

func (*StartFrom_Float) isStartFrom_Value() {}

func (*StartFrom_Integer) isStartFrom_Value() {}

func (*StartFrom_Timestamp) isStartFrom_Value() {}

func (*StartFrom_Datetime) isStartFrom_Value() {}

type OrderBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                          // Payload key to order by
	Direction *Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=qdrant.Direction,oneof" json:"direction,omitempty"` // Ascending or descending order
	StartFrom *StartFrom `protobuf:"bytes,3,opt,name=start_from,json=startFrom,proto3,oneof" json:"start_from,omitempty"`       // Start from this value
}

func (x *OrderBy) Reset() {
	*x = OrderBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBy) ProtoMessage() {}

func (x *OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBy.ProtoReflect.Descriptor instead.
func (*OrderBy) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{41}
}

func (x *OrderBy) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *OrderBy) GetDirection() Direction {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return Direction_Asc
}

func (x *OrderBy) GetStartFrom() *StartFrom {
	if x != nil {
		return x.StartFrom
	}
	return nil
}

type ScrollPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string               `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Filter           *Filter              `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`                                                     // Filter conditions - return only those points that satisfy the specified conditions
	Offset           *PointId             `protobuf:"bytes,3,opt,name=offset,proto3,oneof" json:"offset,omitempty"`                                               // Start with this ID
	Limit            *uint32              `protobuf:"varint,4,opt,name=limit,proto3,oneof" json:"limit,omitempty"`                                                // Max number of result
	WithPayload      *WithPayloadSelector `protobuf:"bytes,6,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`                        // Options for specifying which payload to include or not
	WithVectors      *WithVectorsSelector `protobuf:"bytes,7,opt,name=with_vectors,json=withVectors,proto3,oneof" json:"with_vectors,omitempty"`                  // Options for specifying which vectors to include into response
	ReadConsistency  *ReadConsistency     `protobuf:"bytes,8,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"`      // Options for specifying read consistency guarantees
	ShardKeySelector *ShardKeySelector    `protobuf:"bytes,9,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Specify in which shards to look for the points, if not specified - look in all shards
	OrderBy          *OrderBy             `protobuf:"bytes,10,opt,name=order_by,json=orderBy,proto3,oneof" json:"order_by,omitempty"`                             // Order the records by a payload field
	Timeout          *uint64              `protobuf:"varint,11,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                           // If set, overrides global timeout setting for this request. Unit is seconds.
}

func (x *ScrollPoints) Reset() {
	*x = ScrollPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrollPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrollPoints) ProtoMessage() {}

func (x *ScrollPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrollPoints.ProtoReflect.Descriptor instead.
func (*ScrollPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{42}
}

func (x *ScrollPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *ScrollPoints) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ScrollPoints) GetOffset() *PointId {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ScrollPoints) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ScrollPoints) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *ScrollPoints) GetWithVectors() *WithVectorsSelector {
	if x != nil {
		return x.WithVectors
	}
	return nil
}

func (x *ScrollPoints) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *ScrollPoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

func (x *ScrollPoints) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ScrollPoints) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type LookupLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	VectorName       *string           `protobuf:"bytes,2,opt,name=vector_name,json=vectorName,proto3,oneof" json:"vector_name,omitempty"`                     // Which vector to use for search, if not specified - use default vector
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,3,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Specify in which shards to look for the points, if not specified - look in all shards
}

func (x *LookupLocation) Reset() {
	*x = LookupLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupLocation) ProtoMessage() {}

func (x *LookupLocation) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupLocation.ProtoReflect.Descriptor instead.
func (*LookupLocation) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{43}
}

func (x *LookupLocation) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *LookupLocation) GetVectorName() string {
	if x != nil && x.VectorName != nil {
		return *x.VectorName
	}
	return ""
}

func (x *LookupLocation) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type RecommendPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string               `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`                // name of the collection
	Positive         []*PointId           `protobuf:"bytes,2,rep,name=positive,proto3" json:"positive,omitempty"`                                                  // Look for vectors closest to the vectors from these points
	Negative         []*PointId           `protobuf:"bytes,3,rep,name=negative,proto3" json:"negative,omitempty"`                                                  // Try to avoid vectors like the vector from these points
	Filter           *Filter              `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`                                                      // Filter conditions - return only those points that satisfy the specified conditions
	Limit            uint64               `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`                                                       // Max number of result
	WithPayload      *WithPayloadSelector `protobuf:"bytes,7,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`                         // Options for specifying which payload to include or not
	Params           *SearchParams        `protobuf:"bytes,8,opt,name=params,proto3" json:"params,omitempty"`                                                      // Search config
	ScoreThreshold   *float32             `protobuf:"fixed32,9,opt,name=score_threshold,json=scoreThreshold,proto3,oneof" json:"score_threshold,omitempty"`        // If provided - cut off results with worse scores
	Offset           *uint64              `protobuf:"varint,10,opt,name=offset,proto3,oneof" json:"offset,omitempty"`                                              // Offset of the result
	Using            *string              `protobuf:"bytes,11,opt,name=using,proto3,oneof" json:"using,omitempty"`                                                 // Define which vector to use for recommendation, if not specified - default vector
	WithVectors      *WithVectorsSelector `protobuf:"bytes,12,opt,name=with_vectors,json=withVectors,proto3,oneof" json:"with_vectors,omitempty"`                  // Options for specifying which vectors to include into response
	LookupFrom       *LookupLocation      `protobuf:"bytes,13,opt,name=lookup_from,json=lookupFrom,proto3,oneof" json:"lookup_from,omitempty"`                     // Name of the collection to use for points lookup, if not specified - use current collection
	ReadConsistency  *ReadConsistency     `protobuf:"bytes,14,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"`      // Options for specifying read consistency guarantees
	Strategy         *RecommendStrategy   `protobuf:"varint,16,opt,name=strategy,proto3,enum=qdrant.RecommendStrategy,oneof" json:"strategy,omitempty"`            // How to use the example vectors to find the results
	PositiveVectors  []*Vector            `protobuf:"bytes,17,rep,name=positive_vectors,json=positiveVectors,proto3" json:"positive_vectors,omitempty"`            // Look for vectors closest to those
	NegativeVectors  []*Vector            `protobuf:"bytes,18,rep,name=negative_vectors,json=negativeVectors,proto3" json:"negative_vectors,omitempty"`            // Try to avoid vectors like this
	Timeout          *uint64              `protobuf:"varint,19,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                            // If set, overrides global timeout setting for this request. Unit is seconds.
	ShardKeySelector *ShardKeySelector    `protobuf:"bytes,20,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Specify in which shards to look for the points, if not specified - look in all shards
}

func (x *RecommendPoints) Reset() {
	*x = RecommendPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendPoints) ProtoMessage() {}

func (x *RecommendPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendPoints.ProtoReflect.Descriptor instead.
func (*RecommendPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{44}
}

func (x *RecommendPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *RecommendPoints) GetPositive() []*PointId {
	if x != nil {
		return x.Positive
	}
	return nil
}

func (x *RecommendPoints) GetNegative() []*PointId {
	if x != nil {
		return x.Negative
	}
	return nil
}

func (x *RecommendPoints) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *RecommendPoints) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RecommendPoints) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *RecommendPoints) GetParams() *SearchParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RecommendPoints) GetScoreThreshold() float32 {
	if x != nil && x.ScoreThreshold != nil {
		return *x.ScoreThreshold
	}
	return 0
}

func (x *RecommendPoints) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *RecommendPoints) GetUsing() string {
	if x != nil && x.Using != nil {
		return *x.Using
	}
	return ""
}

func (x *RecommendPoints) GetWithVectors() *WithVectorsSelector {
	if x != nil {
		return x.WithVectors
	}
	return nil
}

func (x *RecommendPoints) GetLookupFrom() *LookupLocation {
	if x != nil {
		return x.LookupFrom
	}
	return nil
}

func (x *RecommendPoints) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *RecommendPoints) GetStrategy() RecommendStrategy {
	if x != nil && x.Strategy != nil {
		return *x.Strategy
	}
	return RecommendStrategy_AverageVector
}

func (x *RecommendPoints) GetPositiveVectors() []*Vector {
	if x != nil {
		return x.PositiveVectors
	}
	return nil
}

func (x *RecommendPoints) GetNegativeVectors() []*Vector {
	if x != nil {
		return x.NegativeVectors
	}
	return nil
}

func (x *RecommendPoints) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *RecommendPoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type RecommendBatchPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName  string             `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // Name of the collection
	RecommendPoints []*RecommendPoints `protobuf:"bytes,2,rep,name=recommend_points,json=recommendPoints,proto3" json:"recommend_points,omitempty"`
	ReadConsistency *ReadConsistency   `protobuf:"bytes,3,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"` // Options for specifying read consistency guarantees
	Timeout         *uint64            `protobuf:"varint,4,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                       // If set, overrides global timeout setting for this request. Unit is seconds.
}

func (x *RecommendBatchPoints) Reset() {
	*x = RecommendBatchPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendBatchPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendBatchPoints) ProtoMessage() {}

func (x *RecommendBatchPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendBatchPoints.ProtoReflect.Descriptor instead.
func (*RecommendBatchPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{45}
}

func (x *RecommendBatchPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *RecommendBatchPoints) GetRecommendPoints() []*RecommendPoints {
	if x != nil {
		return x.RecommendPoints
	}
	return nil
}

func (x *RecommendBatchPoints) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *RecommendBatchPoints) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type RecommendPointGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string               `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`                // Name of the collection
	Positive         []*PointId           `protobuf:"bytes,2,rep,name=positive,proto3" json:"positive,omitempty"`                                                  // Look for vectors closest to the vectors from these points
	Negative         []*PointId           `protobuf:"bytes,3,rep,name=negative,proto3" json:"negative,omitempty"`                                                  // Try to avoid vectors like the vector from these points
	Filter           *Filter              `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`                                                      // Filter conditions - return only those points that satisfy the specified conditions
	Limit            uint32               `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`                                                       // Max number of groups in result
	WithPayload      *WithPayloadSelector `protobuf:"bytes,6,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`                         // Options for specifying which payload to include or not
	Params           *SearchParams        `protobuf:"bytes,7,opt,name=params,proto3" json:"params,omitempty"`                                                      // Search config
	ScoreThreshold   *float32             `protobuf:"fixed32,8,opt,name=score_threshold,json=scoreThreshold,proto3,oneof" json:"score_threshold,omitempty"`        // If provided - cut off results with worse scores
	Using            *string              `protobuf:"bytes,9,opt,name=using,proto3,oneof" json:"using,omitempty"`                                                  // Define which vector to use for recommendation, if not specified - default vector
	WithVectors      *WithVectorsSelector `protobuf:"bytes,10,opt,name=with_vectors,json=withVectors,proto3,oneof" json:"with_vectors,omitempty"`                  // Options for specifying which vectors to include into response
	LookupFrom       *LookupLocation      `protobuf:"bytes,11,opt,name=lookup_from,json=lookupFrom,proto3,oneof" json:"lookup_from,omitempty"`                     // Name of the collection to use for points lookup, if not specified - use current collection
	GroupBy          string               `protobuf:"bytes,12,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`                                    // Payload field to group by, must be a string or number field. If there are multiple values for the field, all of them will be used. One point can be in multiple groups.
	GroupSize        uint32               `protobuf:"varint,13,opt,name=group_size,json=groupSize,proto3" json:"group_size,omitempty"`                             // Maximum amount of points to return per group
	ReadConsistency  *ReadConsistency     `protobuf:"bytes,14,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"`      // Options for specifying read consistency guarantees
	WithLookup       *WithLookup          `protobuf:"bytes,15,opt,name=with_lookup,json=withLookup,proto3,oneof" json:"with_lookup,omitempty"`                     // Options for specifying how to use the group id to lookup points in another collection
	Strategy         *RecommendStrategy   `protobuf:"varint,17,opt,name=strategy,proto3,enum=qdrant.RecommendStrategy,oneof" json:"strategy,omitempty"`            // How to use the example vectors to find the results
	PositiveVectors  []*Vector            `protobuf:"bytes,18,rep,name=positive_vectors,json=positiveVectors,proto3" json:"positive_vectors,omitempty"`            // Look for vectors closest to those
	NegativeVectors  []*Vector            `protobuf:"bytes,19,rep,name=negative_vectors,json=negativeVectors,proto3" json:"negative_vectors,omitempty"`            // Try to avoid vectors like this
	Timeout          *uint64              `protobuf:"varint,20,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                            // If set, overrides global timeout setting for this request. Unit is seconds.
	ShardKeySelector *ShardKeySelector    `protobuf:"bytes,21,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Specify in which shards to look for the points, if not specified - look in all shards
}

func (x *RecommendPointGroups) Reset() {
	*x = RecommendPointGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendPointGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendPointGroups) ProtoMessage() {}

func (x *RecommendPointGroups) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendPointGroups.ProtoReflect.Descriptor instead.
func (*RecommendPointGroups) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{46}
}

func (x *RecommendPointGroups) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *RecommendPointGroups) GetPositive() []*PointId {
	if x != nil {
		return x.Positive
	}
	return nil
}

func (x *RecommendPointGroups) GetNegative() []*PointId {
	if x != nil {
		return x.Negative
	}
	return nil
}

func (x *RecommendPointGroups) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *RecommendPointGroups) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RecommendPointGroups) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *RecommendPointGroups) GetParams() *SearchParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RecommendPointGroups) GetScoreThreshold() float32 {
	if x != nil && x.ScoreThreshold != nil {
		return *x.ScoreThreshold
	}
	return 0
}

func (x *RecommendPointGroups) GetUsing() string {
	if x != nil && x.Using != nil {
		return *x.Using
	}
	return ""
}

func (x *RecommendPointGroups) GetWithVectors() *WithVectorsSelector {
	if x != nil {
		return x.WithVectors
	}
	return nil
}

func (x *RecommendPointGroups) GetLookupFrom() *LookupLocation {
	if x != nil {
		return x.LookupFrom
	}
	return nil
}

func (x *RecommendPointGroups) GetGroupBy() string {
	if x != nil {
		return x.GroupBy
	}
	return ""
}

func (x *RecommendPointGroups) GetGroupSize() uint32 {
	if x != nil {
		return x.GroupSize
	}
	return 0
}

func (x *RecommendPointGroups) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *RecommendPointGroups) GetWithLookup() *WithLookup {
	if x != nil {
		return x.WithLookup
	}
	return nil
}

func (x *RecommendPointGroups) GetStrategy() RecommendStrategy {
	if x != nil && x.Strategy != nil {
		return *x.Strategy
	}
	return RecommendStrategy_AverageVector
}

func (x *RecommendPointGroups) GetPositiveVectors() []*Vector {
	if x != nil {
		return x.PositiveVectors
	}
	return nil
}

func (x *RecommendPointGroups) GetNegativeVectors() []*Vector {
	if x != nil {
		return x.NegativeVectors
	}
	return nil
}

func (x *RecommendPointGroups) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *RecommendPointGroups) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type TargetVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//
	//	*TargetVector_Single
	Target isTargetVector_Target `protobuf_oneof:"target"`
}

func (x *TargetVector) Reset() {
	*x = TargetVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetVector) ProtoMessage() {}

func (x *TargetVector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetVector.ProtoReflect.Descriptor instead.
func (*TargetVector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{47}
}

func (m *TargetVector) GetTarget() isTargetVector_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *TargetVector) GetSingle() *VectorExample {
	if x, ok := x.GetTarget().(*TargetVector_Single); ok {
		return x.Single
	}
	return nil
}

type isTargetVector_Target interface {
	isTargetVector_Target()
}

type TargetVector_Single struct {
	Single *VectorExample `protobuf:"bytes,1,opt,name=single,proto3,oneof"`
}

func (*TargetVector_Single) isTargetVector_Target() {}

type VectorExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Example:
	//
	//	*VectorExample_Id
	//	*VectorExample_Vector
	Example isVectorExample_Example `protobuf_oneof:"example"`
}

func (x *VectorExample) Reset() {
	*x = VectorExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorExample) ProtoMessage() {}

func (x *VectorExample) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorExample.ProtoReflect.Descriptor instead.
func (*VectorExample) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{48}
}

func (m *VectorExample) GetExample() isVectorExample_Example {
	if m != nil {
		return m.Example
	}
	return nil
}

func (x *VectorExample) GetId() *PointId {
	if x, ok := x.GetExample().(*VectorExample_Id); ok {
		return x.Id
	}
	return nil
}

func (x *VectorExample) GetVector() *Vector {
	if x, ok := x.GetExample().(*VectorExample_Vector); ok {
		return x.Vector
	}
	return nil
}

type isVectorExample_Example interface {
	isVectorExample_Example()
}

type VectorExample_Id struct {
	Id *PointId `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type VectorExample_Vector struct {
	Vector *Vector `protobuf:"bytes,2,opt,name=vector,proto3,oneof"`
}

func (*VectorExample_Id) isVectorExample_Example() {}

func (*VectorExample_Vector) isVectorExample_Example() {}

type ContextExamplePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positive *VectorExample `protobuf:"bytes,1,opt,name=positive,proto3" json:"positive,omitempty"`
	Negative *VectorExample `protobuf:"bytes,2,opt,name=negative,proto3" json:"negative,omitempty"`
}

func (x *ContextExamplePair) Reset() {
	*x = ContextExamplePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextExamplePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextExamplePair) ProtoMessage() {}

func (x *ContextExamplePair) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextExamplePair.ProtoReflect.Descriptor instead.
func (*ContextExamplePair) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{49}
}

func (x *ContextExamplePair) GetPositive() *VectorExample {
	if x != nil {
		return x.Positive
	}
	return nil
}

func (x *ContextExamplePair) GetNegative() *VectorExample {
	if x != nil {
		return x.Negative
	}
	return nil
}

type DiscoverPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string                `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`                // name of the collection
	Target           *TargetVector         `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`                                                      // Use this as the primary search objective
	Context          []*ContextExamplePair `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty"`                                                    // Search will be constrained by these pairs of examples
	Filter           *Filter               `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`                                                      // Filter conditions - return only those points that satisfy the specified conditions
	Limit            uint64                `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`                                                       // Max number of result
	WithPayload      *WithPayloadSelector  `protobuf:"bytes,6,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`                         // Options for specifying which payload to include or not
	Params           *SearchParams         `protobuf:"bytes,7,opt,name=params,proto3" json:"params,omitempty"`                                                      // Search config
	Offset           *uint64               `protobuf:"varint,8,opt,name=offset,proto3,oneof" json:"offset,omitempty"`                                               // Offset of the result
	Using            *string               `protobuf:"bytes,9,opt,name=using,proto3,oneof" json:"using,omitempty"`                                                  // Define which vector to use for recommendation, if not specified - default vector
	WithVectors      *WithVectorsSelector  `protobuf:"bytes,10,opt,name=with_vectors,json=withVectors,proto3,oneof" json:"with_vectors,omitempty"`                  // Options for specifying which vectors to include into response
	LookupFrom       *LookupLocation       `protobuf:"bytes,11,opt,name=lookup_from,json=lookupFrom,proto3,oneof" json:"lookup_from,omitempty"`                     // Name of the collection to use for points lookup, if not specified - use current collection
	ReadConsistency  *ReadConsistency      `protobuf:"bytes,12,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"`      // Options for specifying read consistency guarantees
	Timeout          *uint64               `protobuf:"varint,13,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                            // If set, overrides global timeout setting for this request. Unit is seconds.
	ShardKeySelector *ShardKeySelector     `protobuf:"bytes,14,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Specify in which shards to look for the points, if not specified - look in all shards
}

func (x *DiscoverPoints) Reset() {
	*x = DiscoverPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverPoints) ProtoMessage() {}

func (x *DiscoverPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverPoints.ProtoReflect.Descriptor instead.
func (*DiscoverPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{50}
}

func (x *DiscoverPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DiscoverPoints) GetTarget() *TargetVector {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *DiscoverPoints) GetContext() []*ContextExamplePair {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *DiscoverPoints) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DiscoverPoints) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DiscoverPoints) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *DiscoverPoints) GetParams() *SearchParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *DiscoverPoints) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *DiscoverPoints) GetUsing() string {
	if x != nil && x.Using != nil {
		return *x.Using
	}
	return ""
}

func (x *DiscoverPoints) GetWithVectors() *WithVectorsSelector {
	if x != nil {
		return x.WithVectors
	}
	return nil
}

func (x *DiscoverPoints) GetLookupFrom() *LookupLocation {
	if x != nil {
		return x.LookupFrom
	}
	return nil
}

func (x *DiscoverPoints) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *DiscoverPoints) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *DiscoverPoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type DiscoverBatchPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName  string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // Name of the collection
	DiscoverPoints  []*DiscoverPoints `protobuf:"bytes,2,rep,name=discover_points,json=discoverPoints,proto3" json:"discover_points,omitempty"`
	ReadConsistency *ReadConsistency  `protobuf:"bytes,3,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"` // Options for specifying read consistency guarantees
	Timeout         *uint64           `protobuf:"varint,4,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                       // If set, overrides global timeout setting for this request. Unit is seconds.
}

func (x *DiscoverBatchPoints) Reset() {
	*x = DiscoverBatchPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverBatchPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverBatchPoints) ProtoMessage() {}

func (x *DiscoverBatchPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverBatchPoints.ProtoReflect.Descriptor instead.
func (*DiscoverBatchPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{51}
}

func (x *DiscoverBatchPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DiscoverBatchPoints) GetDiscoverPoints() []*DiscoverPoints {
	if x != nil {
		return x.DiscoverPoints
	}
	return nil
}

func (x *DiscoverBatchPoints) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *DiscoverBatchPoints) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type CountPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`               // Name of the collection
	Filter           *Filter           `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`                                                     // Filter conditions - return only those points that satisfy the specified conditions
	Exact            *bool             `protobuf:"varint,3,opt,name=exact,proto3,oneof" json:"exact,omitempty"`                                                // If `true` - return exact count, if `false` - return approximate count
	ReadConsistency  *ReadConsistency  `protobuf:"bytes,4,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"`      // Options for specifying read consistency guarantees
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,5,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Specify in which shards to look for the points, if not specified - look in all shards
	Timeout          *uint64           `protobuf:"varint,6,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                            // If set, overrides global timeout setting for this request. Unit is seconds.
}

func (x *CountPoints) Reset() {
	*x = CountPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPoints) ProtoMessage() {}

func (x *CountPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPoints.ProtoReflect.Descriptor instead.
func (*CountPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{52}
}

func (x *CountPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CountPoints) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *CountPoints) GetExact() bool {
	if x != nil && x.Exact != nil {
		return *x.Exact
	}
	return false
}

func (x *CountPoints) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *CountPoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

func (x *CountPoints) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type RecommendInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positive []*VectorInput     `protobuf:"bytes,1,rep,name=positive,proto3" json:"positive,omitempty"`                                      // Look for vectors closest to the vectors from these points
	Negative []*VectorInput     `protobuf:"bytes,2,rep,name=negative,proto3" json:"negative,omitempty"`                                      // Try to avoid vectors like the vector from these points
	Strategy *RecommendStrategy `protobuf:"varint,3,opt,name=strategy,proto3,enum=qdrant.RecommendStrategy,oneof" json:"strategy,omitempty"` // How to use the provided vectors to find the results
}

func (x *RecommendInput) Reset() {
	*x = RecommendInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendInput) ProtoMessage() {}

func (x *RecommendInput) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendInput.ProtoReflect.Descriptor instead.
func (*RecommendInput) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{53}
}

func (x *RecommendInput) GetPositive() []*VectorInput {
	if x != nil {
		return x.Positive
	}
	return nil
}

func (x *RecommendInput) GetNegative() []*VectorInput {
	if x != nil {
		return x.Negative
	}
	return nil
}

func (x *RecommendInput) GetStrategy() RecommendStrategy {
	if x != nil && x.Strategy != nil {
		return *x.Strategy
	}
	return RecommendStrategy_AverageVector
}

type ContextInputPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positive *VectorInput `protobuf:"bytes,1,opt,name=positive,proto3" json:"positive,omitempty"` // A positive vector
	Negative *VectorInput `protobuf:"bytes,2,opt,name=negative,proto3" json:"negative,omitempty"` // Repel from this vector
}

func (x *ContextInputPair) Reset() {
	*x = ContextInputPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextInputPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextInputPair) ProtoMessage() {}

func (x *ContextInputPair) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextInputPair.ProtoReflect.Descriptor instead.
func (*ContextInputPair) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{54}
}

func (x *ContextInputPair) GetPositive() *VectorInput {
	if x != nil {
		return x.Positive
	}
	return nil
}

func (x *ContextInputPair) GetNegative() *VectorInput {
	if x != nil {
		return x.Negative
	}
	return nil
}

type DiscoverInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target  *VectorInput  `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`   // Use this as the primary search objective
	Context *ContextInput `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"` // Search space will be constrained by these pairs of vectors
}

func (x *DiscoverInput) Reset() {
	*x = DiscoverInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverInput) ProtoMessage() {}

func (x *DiscoverInput) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverInput.ProtoReflect.Descriptor instead.
func (*DiscoverInput) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{55}
}

func (x *DiscoverInput) GetTarget() *VectorInput {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *DiscoverInput) GetContext() *ContextInput {
	if x != nil {
		return x.Context
	}
	return nil
}

type ContextInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*ContextInputPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"` // Search space will be constrained by these pairs of vectors
}

func (x *ContextInput) Reset() {
	*x = ContextInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextInput) ProtoMessage() {}

func (x *ContextInput) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextInput.ProtoReflect.Descriptor instead.
func (*ContextInput) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{56}
}

func (x *ContextInput) GetPairs() []*ContextInputPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*Query_Nearest
	//	*Query_Recommend
	//	*Query_Discover
	//	*Query_Context
	//	*Query_OrderBy
	//	*Query_Fusion
	//	*Query_Sample
	Variant isQuery_Variant `protobuf_oneof:"variant"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{57}
}

func (m *Query) GetVariant() isQuery_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *Query) GetNearest() *VectorInput {
	if x, ok := x.GetVariant().(*Query_Nearest); ok {
		return x.Nearest
	}
	return nil
}

func (x *Query) GetRecommend() *RecommendInput {
	if x, ok := x.GetVariant().(*Query_Recommend); ok {
		return x.Recommend
	}
	return nil
}

func (x *Query) GetDiscover() *DiscoverInput {
	if x, ok := x.GetVariant().(*Query_Discover); ok {
		return x.Discover
	}
	return nil
}

func (x *Query) GetContext() *ContextInput {
	if x, ok := x.GetVariant().(*Query_Context); ok {
		return x.Context
	}
	return nil
}

func (x *Query) GetOrderBy() *OrderBy {
	if x, ok := x.GetVariant().(*Query_OrderBy); ok {
		return x.OrderBy
	}
	return nil
}

func (x *Query) GetFusion() Fusion {
	if x, ok := x.GetVariant().(*Query_Fusion); ok {
		return x.Fusion
	}
	return Fusion_RRF
}

func (x *Query) GetSample() Sample {
	if x, ok := x.GetVariant().(*Query_Sample); ok {
		return x.Sample
	}
	return Sample_Random
}

type isQuery_Variant interface {
	isQuery_Variant()
}

type Query_Nearest struct {
	Nearest *VectorInput `protobuf:"bytes,1,opt,name=nearest,proto3,oneof"` // Find the nearest neighbors to this vector.
}

type Query_Recommend struct {
	Recommend *RecommendInput `protobuf:"bytes,2,opt,name=recommend,proto3,oneof"` // Use multiple positive and negative vectors to find the results.
}

type Query_Discover struct {
	Discover *DiscoverInput `protobuf:"bytes,3,opt,name=discover,proto3,oneof"` // Search for nearest points, but constrain the search space with context
}

type Query_Context struct {
	Context *ContextInput `protobuf:"bytes,4,opt,name=context,proto3,oneof"` // Return points that live in positive areas.
}

type Query_OrderBy struct {
	OrderBy *OrderBy `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3,oneof"` // Order the points by a payload field.
}

type Query_Fusion struct {
	Fusion Fusion `protobuf:"varint,6,opt,name=fusion,proto3,enum=qdrant.Fusion,oneof"` // Fuse the results of multiple prefetches.
}

type Query_Sample struct {
	Sample Sample `protobuf:"varint,7,opt,name=sample,proto3,enum=qdrant.Sample,oneof"` // Sample points from the collection.
}

func (*Query_Nearest) isQuery_Variant() {}

func (*Query_Recommend) isQuery_Variant() {}

func (*Query_Discover) isQuery_Variant() {}

func (*Query_Context) isQuery_Variant() {}

func (*Query_OrderBy) isQuery_Variant() {}

func (*Query_Fusion) isQuery_Variant() {}

func (*Query_Sample) isQuery_Variant() {}

type PrefetchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefetch       []*PrefetchQuery `protobuf:"bytes,1,rep,name=prefetch,proto3" json:"prefetch,omitempty"`                                           // Sub-requests to perform first. If present, the query will be performed on the results of the prefetches.
	Query          *Query           `protobuf:"bytes,2,opt,name=query,proto3,oneof" json:"query,omitempty"`                                           // Query to perform. If missing, returns points ordered by their IDs.
	Using          *string          `protobuf:"bytes,3,opt,name=using,proto3,oneof" json:"using,omitempty"`                                           // Define which vector to use for querying. If missing, the default vector is is used.
	Filter         *Filter          `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`                                         // Filter conditions - return only those points that satisfy the specified conditions.
	Params         *SearchParams    `protobuf:"bytes,5,opt,name=params,proto3,oneof" json:"params,omitempty"`                                         // Search params for when there is no prefetch.
	ScoreThreshold *float32         `protobuf:"fixed32,6,opt,name=score_threshold,json=scoreThreshold,proto3,oneof" json:"score_threshold,omitempty"` // Return points with scores better than this threshold.
	Limit          *uint64          `protobuf:"varint,7,opt,name=limit,proto3,oneof" json:"limit,omitempty"`                                          // Max number of points. Default is 10
	LookupFrom     *LookupLocation  `protobuf:"bytes,8,opt,name=lookup_from,json=lookupFrom,proto3,oneof" json:"lookup_from,omitempty"`               // The location to use for IDs lookup, if not specified - use the current collection and the 'using' vector
}

func (x *PrefetchQuery) Reset() {
	*x = PrefetchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefetchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefetchQuery) ProtoMessage() {}

func (x *PrefetchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefetchQuery.ProtoReflect.Descriptor instead.
func (*PrefetchQuery) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{58}
}

func (x *PrefetchQuery) GetPrefetch() []*PrefetchQuery {
	if x != nil {
		return x.Prefetch
	}
	return nil
}

func (x *PrefetchQuery) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PrefetchQuery) GetUsing() string {
	if x != nil && x.Using != nil {
		return *x.Using
	}
	return ""
}

func (x *PrefetchQuery) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *PrefetchQuery) GetParams() *SearchParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PrefetchQuery) GetScoreThreshold() float32 {
	if x != nil && x.ScoreThreshold != nil {
		return *x.ScoreThreshold
	}
	return 0
}

func (x *PrefetchQuery) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *PrefetchQuery) GetLookupFrom() *LookupLocation {
	if x != nil {
		return x.LookupFrom
	}
	return nil
}

type QueryPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string               `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`                // Name of the collection
	Prefetch         []*PrefetchQuery     `protobuf:"bytes,2,rep,name=prefetch,proto3" json:"prefetch,omitempty"`                                                  // Sub-requests to perform first. If present, the query will be performed on the results of the prefetches.
	Query            *Query               `protobuf:"bytes,3,opt,name=query,proto3,oneof" json:"query,omitempty"`                                                  // Query to perform. If missing, returns points ordered by their IDs.
	Using            *string              `protobuf:"bytes,4,opt,name=using,proto3,oneof" json:"using,omitempty"`                                                  // Define which vector to use for querying. If missing, the default vector is used.
	Filter           *Filter              `protobuf:"bytes,5,opt,name=filter,proto3,oneof" json:"filter,omitempty"`                                                // Filter conditions - return only those points that satisfy the specified conditions.
	Params           *SearchParams        `protobuf:"bytes,6,opt,name=params,proto3,oneof" json:"params,omitempty"`                                                // Search params for when there is no prefetch.
	ScoreThreshold   *float32             `protobuf:"fixed32,7,opt,name=score_threshold,json=scoreThreshold,proto3,oneof" json:"score_threshold,omitempty"`        // Return points with scores better than this threshold.
	Limit            *uint64              `protobuf:"varint,8,opt,name=limit,proto3,oneof" json:"limit,omitempty"`                                                 // Max number of points. Default is 10.
	Offset           *uint64              `protobuf:"varint,9,opt,name=offset,proto3,oneof" json:"offset,omitempty"`                                               // Offset of the result. Skip this many points. Default is 0.
	WithVectors      *WithVectorsSelector `protobuf:"bytes,10,opt,name=with_vectors,json=withVectors,proto3,oneof" json:"with_vectors,omitempty"`                  // Options for specifying which vectors to include into the response.
	WithPayload      *WithPayloadSelector `protobuf:"bytes,11,opt,name=with_payload,json=withPayload,proto3,oneof" json:"with_payload,omitempty"`                  // Options for specifying which payload to include or not.
	ReadConsistency  *ReadConsistency     `protobuf:"bytes,12,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"`      // Options for specifying read consistency guarantees.
	ShardKeySelector *ShardKeySelector    `protobuf:"bytes,13,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Specify in which shards to look for the points, if not specified - look in all shards.
	LookupFrom       *LookupLocation      `protobuf:"bytes,14,opt,name=lookup_from,json=lookupFrom,proto3,oneof" json:"lookup_from,omitempty"`                     // The location to use for IDs lookup, if not specified - use the current collection and the 'using' vector
	Timeout          *uint64              `protobuf:"varint,15,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                            // If set, overrides global timeout setting for this request. Unit is seconds.
}

func (x *QueryPoints) Reset() {
	*x = QueryPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPoints) ProtoMessage() {}

func (x *QueryPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPoints.ProtoReflect.Descriptor instead.
func (*QueryPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{59}
}

func (x *QueryPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *QueryPoints) GetPrefetch() []*PrefetchQuery {
	if x != nil {
		return x.Prefetch
	}
	return nil
}

func (x *QueryPoints) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryPoints) GetUsing() string {
	if x != nil && x.Using != nil {
		return *x.Using
	}
	return ""
}

func (x *QueryPoints) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryPoints) GetParams() *SearchParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *QueryPoints) GetScoreThreshold() float32 {
	if x != nil && x.ScoreThreshold != nil {
		return *x.ScoreThreshold
	}
	return 0
}

func (x *QueryPoints) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *QueryPoints) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *QueryPoints) GetWithVectors() *WithVectorsSelector {
	if x != nil {
		return x.WithVectors
	}
	return nil
}

func (x *QueryPoints) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *QueryPoints) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *QueryPoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

func (x *QueryPoints) GetLookupFrom() *LookupLocation {
	if x != nil {
		return x.LookupFrom
	}
	return nil
}

func (x *QueryPoints) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type QueryBatchPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName  string           `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	QueryPoints     []*QueryPoints   `protobuf:"bytes,2,rep,name=query_points,json=queryPoints,proto3" json:"query_points,omitempty"`
	ReadConsistency *ReadConsistency `protobuf:"bytes,3,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"` // Options for specifying read consistency guarantees
	Timeout         *uint64          `protobuf:"varint,4,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                       // If set, overrides global timeout setting for this request. Unit is seconds.
}

func (x *QueryBatchPoints) Reset() {
	*x = QueryBatchPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBatchPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBatchPoints) ProtoMessage() {}

func (x *QueryBatchPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBatchPoints.ProtoReflect.Descriptor instead.
func (*QueryBatchPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{60}
}

func (x *QueryBatchPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *QueryBatchPoints) GetQueryPoints() []*QueryPoints {
	if x != nil {
		return x.QueryPoints
	}
	return nil
}

func (x *QueryBatchPoints) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *QueryBatchPoints) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type QueryPointGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string               `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`                // Name of the collection
	Prefetch         []*PrefetchQuery     `protobuf:"bytes,2,rep,name=prefetch,proto3" json:"prefetch,omitempty"`                                                  // Sub-requests to perform first. If present, the query will be performed on the results of the prefetches.
	Query            *Query               `protobuf:"bytes,3,opt,name=query,proto3,oneof" json:"query,omitempty"`                                                  // Query to perform. If missing, returns points ordered by their IDs.
	Using            *string              `protobuf:"bytes,4,opt,name=using,proto3,oneof" json:"using,omitempty"`                                                  // Define which vector to use for querying. If missing, the default vector is used.
	Filter           *Filter              `protobuf:"bytes,5,opt,name=filter,proto3,oneof" json:"filter,omitempty"`                                                // Filter conditions - return only those points that satisfy the specified conditions.
	Params           *SearchParams        `protobuf:"bytes,6,opt,name=params,proto3,oneof" json:"params,omitempty"`                                                // Search params for when there is no prefetch.
	ScoreThreshold   *float32             `protobuf:"fixed32,7,opt,name=score_threshold,json=scoreThreshold,proto3,oneof" json:"score_threshold,omitempty"`        // Return points with scores better than this threshold.
	WithPayload      *WithPayloadSelector `protobuf:"bytes,8,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`                         // Options for specifying which payload to include or not
	WithVectors      *WithVectorsSelector `protobuf:"bytes,9,opt,name=with_vectors,json=withVectors,proto3,oneof" json:"with_vectors,omitempty"`                   // Options for specifying which vectors to include into response
	LookupFrom       *LookupLocation      `protobuf:"bytes,10,opt,name=lookup_from,json=lookupFrom,proto3,oneof" json:"lookup_from,omitempty"`                     // The location to use for IDs lookup, if not specified - use the current collection and the 'using' vector
	Limit            *uint64              `protobuf:"varint,11,opt,name=limit,proto3,oneof" json:"limit,omitempty"`                                                // Max number of points. Default is 3.
	GroupSize        *uint64              `protobuf:"varint,12,opt,name=group_size,json=groupSize,proto3,oneof" json:"group_size,omitempty"`                       // Maximum amount of points to return per group. Default to 10.
	GroupBy          string               `protobuf:"bytes,13,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`                                    // Payload field to group by, must be a string or number field. If there are multiple values for the field, all of them will be used. One point can be in multiple groups.
	ReadConsistency  *ReadConsistency     `protobuf:"bytes,14,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"`      // Options for specifying read consistency guarantees
	WithLookup       *WithLookup          `protobuf:"bytes,15,opt,name=with_lookup,json=withLookup,proto3,oneof" json:"with_lookup,omitempty"`                     // Options for specifying how to use the group id to lookup points in another collection
	Timeout          *uint64              `protobuf:"varint,16,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                            // If set, overrides global timeout setting for this request. Unit is seconds.
	ShardKeySelector *ShardKeySelector    `protobuf:"bytes,17,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Specify in which shards to look for the points, if not specified - look in all shards
}

func (x *QueryPointGroups) Reset() {
	*x = QueryPointGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPointGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPointGroups) ProtoMessage() {}

func (x *QueryPointGroups) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPointGroups.ProtoReflect.Descriptor instead.
func (*QueryPointGroups) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{61}
}

func (x *QueryPointGroups) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *QueryPointGroups) GetPrefetch() []*PrefetchQuery {
	if x != nil {
		return x.Prefetch
	}
	return nil
}

func (x *QueryPointGroups) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryPointGroups) GetUsing() string {
	if x != nil && x.Using != nil {
		return *x.Using
	}
	return ""
}

func (x *QueryPointGroups) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryPointGroups) GetParams() *SearchParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *QueryPointGroups) GetScoreThreshold() float32 {
	if x != nil && x.ScoreThreshold != nil {
		return *x.ScoreThreshold
	}
	return 0
}

func (x *QueryPointGroups) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *QueryPointGroups) GetWithVectors() *WithVectorsSelector {
	if x != nil {
		return x.WithVectors
	}
	return nil
}

func (x *QueryPointGroups) GetLookupFrom() *LookupLocation {
	if x != nil {
		return x.LookupFrom
	}
	return nil
}

func (x *QueryPointGroups) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *QueryPointGroups) GetGroupSize() uint64 {
	if x != nil && x.GroupSize != nil {
		return *x.GroupSize
	}
	return 0
}

func (x *QueryPointGroups) GetGroupBy() string {
	if x != nil {
		return x.GroupBy
	}
	return ""
}

func (x *QueryPointGroups) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *QueryPointGroups) GetWithLookup() *WithLookup {
	if x != nil {
		return x.WithLookup
	}
	return nil
}

func (x *QueryPointGroups) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *QueryPointGroups) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type FacetCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`               // Name of the collection
	Key              string            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`                                                           // Payload key of the facet
	Filter           *Filter           `protobuf:"bytes,3,opt,name=filter,proto3,oneof" json:"filter,omitempty"`                                               // Filter conditions - return only those points that satisfy the specified conditions.
	Limit            *uint64           `protobuf:"varint,4,opt,name=limit,proto3,oneof" json:"limit,omitempty"`                                                // Max number of facets. Default is 10.
	Exact            *bool             `protobuf:"varint,5,opt,name=exact,proto3,oneof" json:"exact,omitempty"`                                                // If true, return exact counts, slower but useful for debugging purposes. Default is false.
	Timeout          *uint64           `protobuf:"varint,6,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                            // If set, overrides global timeout setting for this request. Unit is seconds.
	ReadConsistency  *ReadConsistency  `protobuf:"bytes,7,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"`      // Options for specifying read consistency guarantees
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,8,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Specify in which shards to look for the points, if not specified - look in all shards
}

func (x *FacetCounts) Reset() {
	*x = FacetCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetCounts) ProtoMessage() {}

func (x *FacetCounts) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetCounts.ProtoReflect.Descriptor instead.
func (*FacetCounts) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{62}
}

func (x *FacetCounts) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *FacetCounts) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FacetCounts) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FacetCounts) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *FacetCounts) GetExact() bool {
	if x != nil && x.Exact != nil {
		return *x.Exact
	}
	return false
}

func (x *FacetCounts) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *FacetCounts) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *FacetCounts) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type FacetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*FacetValue_StringValue
	//	*FacetValue_IntegerValue
	//	*FacetValue_BoolValue
	Variant isFacetValue_Variant `protobuf_oneof:"variant"`
}

func (x *FacetValue) Reset() {
	*x = FacetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetValue) ProtoMessage() {}

func (x *FacetValue) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetValue.ProtoReflect.Descriptor instead.
func (*FacetValue) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{63}
}

func (m *FacetValue) GetVariant() isFacetValue_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *FacetValue) GetStringValue() string {
	if x, ok := x.GetVariant().(*FacetValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *FacetValue) GetIntegerValue() int64 {
	if x, ok := x.GetVariant().(*FacetValue_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (x *FacetValue) GetBoolValue() bool {
	if x, ok := x.GetVariant().(*FacetValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

type isFacetValue_Variant interface {
	isFacetValue_Variant()
}

type FacetValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"` // String value from the facet
}

type FacetValue_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,2,opt,name=integer_value,json=integerValue,proto3,oneof"` // Integer value from the facet
}

type FacetValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,3,opt,name=bool_value,json=boolValue,proto3,oneof"` // Boolean value from the facet
}

func (*FacetValue_StringValue) isFacetValue_Variant() {}

func (*FacetValue_IntegerValue) isFacetValue_Variant() {}

func (*FacetValue_BoolValue) isFacetValue_Variant() {}

type FacetHit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *FacetValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`  // Value from the facet
	Count uint64      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"` // Number of points with this value
}

func (x *FacetHit) Reset() {
	*x = FacetHit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetHit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetHit) ProtoMessage() {}

func (x *FacetHit) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetHit.ProtoReflect.Descriptor instead.
func (*FacetHit) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{64}
}

func (x *FacetHit) GetValue() *FacetValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FacetHit) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SearchMatrixPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`               // Name of the collection
	Filter           *Filter           `protobuf:"bytes,2,opt,name=filter,proto3,oneof" json:"filter,omitempty"`                                               // Filter conditions - return only those points that satisfy the specified conditions.
	Sample           *uint64           `protobuf:"varint,3,opt,name=sample,proto3,oneof" json:"sample,omitempty"`                                              // How many points to select and search within. Default is 10.
	Limit            *uint64           `protobuf:"varint,4,opt,name=limit,proto3,oneof" json:"limit,omitempty"`                                                // How many neighbours per sample to find. Default is 3.
	Using            *string           `protobuf:"bytes,5,opt,name=using,proto3,oneof" json:"using,omitempty"`                                                 // Define which vector to use for querying. If missing, the default vector is is used.
	Timeout          *uint64           `protobuf:"varint,6,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                            // If set, overrides global timeout setting for this request. Unit is seconds.
	ReadConsistency  *ReadConsistency  `protobuf:"bytes,7,opt,name=read_consistency,json=readConsistency,proto3,oneof" json:"read_consistency,omitempty"`      // Options for specifying read consistency guarantees
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,8,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Specify in which shards to look for the points, if not specified - look in all shards
}

func (x *SearchMatrixPoints) Reset() {
	*x = SearchMatrixPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMatrixPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMatrixPoints) ProtoMessage() {}

func (x *SearchMatrixPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMatrixPoints.ProtoReflect.Descriptor instead.
func (*SearchMatrixPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{65}
}

func (x *SearchMatrixPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SearchMatrixPoints) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchMatrixPoints) GetSample() uint64 {
	if x != nil && x.Sample != nil {
		return *x.Sample
	}
	return 0
}

func (x *SearchMatrixPoints) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchMatrixPoints) GetUsing() string {
	if x != nil && x.Using != nil {
		return *x.Using
	}
	return ""
}

func (x *SearchMatrixPoints) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *SearchMatrixPoints) GetReadConsistency() *ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return nil
}

func (x *SearchMatrixPoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type SearchMatrixPairs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*SearchMatrixPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"` // List of pairs of points with scores
}

func (x *SearchMatrixPairs) Reset() {
	*x = SearchMatrixPairs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMatrixPairs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMatrixPairs) ProtoMessage() {}

func (x *SearchMatrixPairs) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMatrixPairs.ProtoReflect.Descriptor instead.
func (*SearchMatrixPairs) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{66}
}

func (x *SearchMatrixPairs) GetPairs() []*SearchMatrixPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type SearchMatrixPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A     *PointId `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`           // first id of the pair
	B     *PointId `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`           // second id of the pair
	Score float32  `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"` // score of the pair
}

func (x *SearchMatrixPair) Reset() {
	*x = SearchMatrixPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMatrixPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMatrixPair) ProtoMessage() {}

func (x *SearchMatrixPair) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMatrixPair.ProtoReflect.Descriptor instead.
func (*SearchMatrixPair) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{67}
}

func (x *SearchMatrixPair) GetA() *PointId {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *SearchMatrixPair) GetB() *PointId {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *SearchMatrixPair) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type SearchMatrixOffsets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffsetsRow []uint64   `protobuf:"varint,1,rep,packed,name=offsets_row,json=offsetsRow,proto3" json:"offsets_row,omitempty"` // Row indices of the matrix
	OffsetsCol []uint64   `protobuf:"varint,2,rep,packed,name=offsets_col,json=offsetsCol,proto3" json:"offsets_col,omitempty"` // Column indices of the matrix
	Scores     []float32  `protobuf:"fixed32,3,rep,packed,name=scores,proto3" json:"scores,omitempty"`                          // Scores associated with matrix coordinates
	Ids        []*PointId `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`                                         // Ids of the points in order
}

func (x *SearchMatrixOffsets) Reset() {
	*x = SearchMatrixOffsets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMatrixOffsets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMatrixOffsets) ProtoMessage() {}

func (x *SearchMatrixOffsets) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMatrixOffsets.ProtoReflect.Descriptor instead.
func (*SearchMatrixOffsets) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{68}
}

func (x *SearchMatrixOffsets) GetOffsetsRow() []uint64 {
	if x != nil {
		return x.OffsetsRow
	}
	return nil
}

func (x *SearchMatrixOffsets) GetOffsetsCol() []uint64 {
	if x != nil {
		return x.OffsetsCol
	}
	return nil
}

func (x *SearchMatrixOffsets) GetScores() []float32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *SearchMatrixOffsets) GetIds() []*PointId {
	if x != nil {
		return x.Ids
	}
	return nil
}

type PointsUpdateOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operation:
	//
	//	*PointsUpdateOperation_Upsert
	//	*PointsUpdateOperation_DeleteDeprecated
	//	*PointsUpdateOperation_SetPayload_
	//	*PointsUpdateOperation_OverwritePayload_
	//	*PointsUpdateOperation_DeletePayload_
	//	*PointsUpdateOperation_ClearPayloadDeprecated
	//	*PointsUpdateOperation_UpdateVectors_
	//	*PointsUpdateOperation_DeleteVectors_
	//	*PointsUpdateOperation_DeletePoints_
	//	*PointsUpdateOperation_ClearPayload_
	Operation isPointsUpdateOperation_Operation `protobuf_oneof:"operation"`
}

func (x *PointsUpdateOperation) Reset() {
	*x = PointsUpdateOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsUpdateOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsUpdateOperation) ProtoMessage() {}

func (x *PointsUpdateOperation) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsUpdateOperation.ProtoReflect.Descriptor instead.
func (*PointsUpdateOperation) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{69}
}

func (m *PointsUpdateOperation) GetOperation() isPointsUpdateOperation_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *PointsUpdateOperation) GetUpsert() *PointsUpdateOperation_PointStructList {
	if x, ok := x.GetOperation().(*PointsUpdateOperation_Upsert); ok {
		return x.Upsert
	}
	return nil
}

// Deprecated: Marked as deprecated in points.proto.
func (x *PointsUpdateOperation) GetDeleteDeprecated() *PointsSelector {
	if x, ok := x.GetOperation().(*PointsUpdateOperation_DeleteDeprecated); ok {
		return x.DeleteDeprecated
	}
	return nil
}

func (x *PointsUpdateOperation) GetSetPayload() *PointsUpdateOperation_SetPayload {
	if x, ok := x.GetOperation().(*PointsUpdateOperation_SetPayload_); ok {
		return x.SetPayload
	}
	return nil
}

func (x *PointsUpdateOperation) GetOverwritePayload() *PointsUpdateOperation_OverwritePayload {
	if x, ok := x.GetOperation().(*PointsUpdateOperation_OverwritePayload_); ok {
		return x.OverwritePayload
	}
	return nil
}

func (x *PointsUpdateOperation) GetDeletePayload() *PointsUpdateOperation_DeletePayload {
	if x, ok := x.GetOperation().(*PointsUpdateOperation_DeletePayload_); ok {
		return x.DeletePayload
	}
	return nil
}

// Deprecated: Marked as deprecated in points.proto.
func (x *PointsUpdateOperation) GetClearPayloadDeprecated() *PointsSelector {
	if x, ok := x.GetOperation().(*PointsUpdateOperation_ClearPayloadDeprecated); ok {
		return x.ClearPayloadDeprecated
	}
	return nil
}

func (x *PointsUpdateOperation) GetUpdateVectors() *PointsUpdateOperation_UpdateVectors {
	if x, ok := x.GetOperation().(*PointsUpdateOperation_UpdateVectors_); ok {
		return x.UpdateVectors
	}
	return nil
}

func (x *PointsUpdateOperation) GetDeleteVectors() *PointsUpdateOperation_DeleteVectors {
	if x, ok := x.GetOperation().(*PointsUpdateOperation_DeleteVectors_); ok {
		return x.DeleteVectors
	}
	return nil
}

func (x *PointsUpdateOperation) GetDeletePoints() *PointsUpdateOperation_DeletePoints {
	if x, ok := x.GetOperation().(*PointsUpdateOperation_DeletePoints_); ok {
		return x.DeletePoints
	}
	return nil
}

func (x *PointsUpdateOperation) GetClearPayload() *PointsUpdateOperation_ClearPayload {
	if x, ok := x.GetOperation().(*PointsUpdateOperation_ClearPayload_); ok {
		return x.ClearPayload
	}
	return nil
}

type isPointsUpdateOperation_Operation interface {
	isPointsUpdateOperation_Operation()
}

type PointsUpdateOperation_Upsert struct {
	Upsert *PointsUpdateOperation_PointStructList `protobuf:"bytes,1,opt,name=upsert,proto3,oneof"`
}

type PointsUpdateOperation_DeleteDeprecated struct {
	// Deprecated: Marked as deprecated in points.proto.
	DeleteDeprecated *PointsSelector `protobuf:"bytes,2,opt,name=delete_deprecated,json=deleteDeprecated,proto3,oneof"`
}

type PointsUpdateOperation_SetPayload_ struct {
	SetPayload *PointsUpdateOperation_SetPayload `protobuf:"bytes,3,opt,name=set_payload,json=setPayload,proto3,oneof"`
}

type PointsUpdateOperation_OverwritePayload_ struct {
	OverwritePayload *PointsUpdateOperation_OverwritePayload `protobuf:"bytes,4,opt,name=overwrite_payload,json=overwritePayload,proto3,oneof"`
}

type PointsUpdateOperation_DeletePayload_ struct {
	DeletePayload *PointsUpdateOperation_DeletePayload `protobuf:"bytes,5,opt,name=delete_payload,json=deletePayload,proto3,oneof"`
}

type PointsUpdateOperation_ClearPayloadDeprecated struct {
	// Deprecated: Marked as deprecated in points.proto.
	ClearPayloadDeprecated *PointsSelector `protobuf:"bytes,6,opt,name=clear_payload_deprecated,json=clearPayloadDeprecated,proto3,oneof"`
}

type PointsUpdateOperation_UpdateVectors_ struct {
	UpdateVectors *PointsUpdateOperation_UpdateVectors `protobuf:"bytes,7,opt,name=update_vectors,json=updateVectors,proto3,oneof"`
}

type PointsUpdateOperation_DeleteVectors_ struct {
	DeleteVectors *PointsUpdateOperation_DeleteVectors `protobuf:"bytes,8,opt,name=delete_vectors,json=deleteVectors,proto3,oneof"`
}

type PointsUpdateOperation_DeletePoints_ struct {
	DeletePoints *PointsUpdateOperation_DeletePoints `protobuf:"bytes,9,opt,name=delete_points,json=deletePoints,proto3,oneof"`
}

type PointsUpdateOperation_ClearPayload_ struct {
	ClearPayload *PointsUpdateOperation_ClearPayload `protobuf:"bytes,10,opt,name=clear_payload,json=clearPayload,proto3,oneof"`
}

func (*PointsUpdateOperation_Upsert) isPointsUpdateOperation_Operation() {}

func (*PointsUpdateOperation_DeleteDeprecated) isPointsUpdateOperation_Operation() {}

func (*PointsUpdateOperation_SetPayload_) isPointsUpdateOperation_Operation() {}

func (*PointsUpdateOperation_OverwritePayload_) isPointsUpdateOperation_Operation() {}

func (*PointsUpdateOperation_DeletePayload_) isPointsUpdateOperation_Operation() {}

func (*PointsUpdateOperation_ClearPayloadDeprecated) isPointsUpdateOperation_Operation() {}

func (*PointsUpdateOperation_UpdateVectors_) isPointsUpdateOperation_Operation() {}

func (*PointsUpdateOperation_DeleteVectors_) isPointsUpdateOperation_Operation() {}

func (*PointsUpdateOperation_DeletePoints_) isPointsUpdateOperation_Operation() {}

func (*PointsUpdateOperation_ClearPayload_) isPointsUpdateOperation_Operation() {}

type UpdateBatchPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string                   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // name of the collection
	Wait           *bool                    `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                    // Wait until the changes have been applied?
	Operations     []*PointsUpdateOperation `protobuf:"bytes,3,rep,name=operations,proto3" json:"operations,omitempty"`
	Ordering       *WriteOrdering           `protobuf:"bytes,4,opt,name=ordering,proto3,oneof" json:"ordering,omitempty"` // Write ordering guarantees
}

func (x *UpdateBatchPoints) Reset() {
	*x = UpdateBatchPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBatchPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBatchPoints) ProtoMessage() {}

func (x *UpdateBatchPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBatchPoints.ProtoReflect.Descriptor instead.
func (*UpdateBatchPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateBatchPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *UpdateBatchPoints) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *UpdateBatchPoints) GetOperations() []*PointsUpdateOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *UpdateBatchPoints) GetOrdering() *WriteOrdering {
	if x != nil {
		return x.Ordering
	}
	return nil
}

type PointsOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *UpdateResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Time   float64       `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *PointsOperationResponse) Reset() {
	*x = PointsOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsOperationResponse) ProtoMessage() {}

func (x *PointsOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsOperationResponse.ProtoReflect.Descriptor instead.
func (*PointsOperationResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{71}
}

func (x *PointsOperationResponse) GetResult() *UpdateResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *PointsOperationResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type UpdateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationId *uint64      `protobuf:"varint,1,opt,name=operation_id,json=operationId,proto3,oneof" json:"operation_id,omitempty"` // Number of operation
	Status      UpdateStatus `protobuf:"varint,2,opt,name=status,proto3,enum=qdrant.UpdateStatus" json:"status,omitempty"`           // Operation status
}

func (x *UpdateResult) Reset() {
	*x = UpdateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResult) ProtoMessage() {}

func (x *UpdateResult) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResult.ProtoReflect.Descriptor instead.
func (*UpdateResult) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{72}
}

func (x *UpdateResult) GetOperationId() uint64 {
	if x != nil && x.OperationId != nil {
		return *x.OperationId
	}
	return 0
}

func (x *UpdateResult) GetStatus() UpdateStatus {
	if x != nil {
		return x.Status
	}
	return UpdateStatus_UnknownUpdateStatus
}

type OrderValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*OrderValue_Int
	//	*OrderValue_Float
	Variant isOrderValue_Variant `protobuf_oneof:"variant"`
}

func (x *OrderValue) Reset() {
	*x = OrderValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderValue) ProtoMessage() {}

func (x *OrderValue) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderValue.ProtoReflect.Descriptor instead.
func (*OrderValue) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{73}
}

func (m *OrderValue) GetVariant() isOrderValue_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *OrderValue) GetInt() int64 {
	if x, ok := x.GetVariant().(*OrderValue_Int); ok {
		return x.Int
	}
	return 0
}

func (x *OrderValue) GetFloat() float64 {
	if x, ok := x.GetVariant().(*OrderValue_Float); ok {
		return x.Float
	}
	return 0
}

type isOrderValue_Variant interface {
	isOrderValue_Variant()
}

type OrderValue_Int struct {
	Int int64 `protobuf:"varint,1,opt,name=int,proto3,oneof"`
}

type OrderValue_Float struct {
	Float float64 `protobuf:"fixed64,2,opt,name=float,proto3,oneof"`
}

func (*OrderValue_Int) isOrderValue_Variant() {}

func (*OrderValue_Float) isOrderValue_Variant() {}

type ScoredPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *PointId          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                   // Point id
	Payload    map[string]*Value `protobuf:"bytes,2,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Payload
	Score      float32           `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`                                                                                           // Similarity score
	Version    uint64            `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`                                                                                        // Last update operation applied to this point
	Vectors    *VectorsOutput    `protobuf:"bytes,6,opt,name=vectors,proto3,oneof" json:"vectors,omitempty"`                                                                                   // Vectors to search
	ShardKey   *ShardKey         `protobuf:"bytes,7,opt,name=shard_key,json=shardKey,proto3,oneof" json:"shard_key,omitempty"`                                                                 // Shard key
	OrderValue *OrderValue       `protobuf:"bytes,8,opt,name=order_value,json=orderValue,proto3,oneof" json:"order_value,omitempty"`                                                           // Order by value
}

func (x *ScoredPoint) Reset() {
	*x = ScoredPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoredPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoredPoint) ProtoMessage() {}

func (x *ScoredPoint) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoredPoint.ProtoReflect.Descriptor instead.
func (*ScoredPoint) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{74}
}

func (x *ScoredPoint) GetId() *PointId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ScoredPoint) GetPayload() map[string]*Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ScoredPoint) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ScoredPoint) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ScoredPoint) GetVectors() *VectorsOutput {
	if x != nil {
		return x.Vectors
	}
	return nil
}

func (x *ScoredPoint) GetShardKey() *ShardKey {
	if x != nil {
		return x.ShardKey
	}
	return nil
}

func (x *ScoredPoint) GetOrderValue() *OrderValue {
	if x != nil {
		return x.OrderValue
	}
	return nil
}

type GroupId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*GroupId_UnsignedValue
	//	*GroupId_IntegerValue
	//	*GroupId_StringValue
	Kind isGroupId_Kind `protobuf_oneof:"kind"`
}

func (x *GroupId) Reset() {
	*x = GroupId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupId) ProtoMessage() {}

func (x *GroupId) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupId.ProtoReflect.Descriptor instead.
func (*GroupId) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{75}
}

func (m *GroupId) GetKind() isGroupId_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *GroupId) GetUnsignedValue() uint64 {
	if x, ok := x.GetKind().(*GroupId_UnsignedValue); ok {
		return x.UnsignedValue
	}
	return 0
}

func (x *GroupId) GetIntegerValue() int64 {
	if x, ok := x.GetKind().(*GroupId_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (x *GroupId) GetStringValue() string {
	if x, ok := x.GetKind().(*GroupId_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isGroupId_Kind interface {
	isGroupId_Kind()
}

type GroupId_UnsignedValue struct {
	// Represents a double value.
	UnsignedValue uint64 `protobuf:"varint,1,opt,name=unsigned_value,json=unsignedValue,proto3,oneof"`
}

type GroupId_IntegerValue struct {
	// Represents an integer value
	IntegerValue int64 `protobuf:"varint,2,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type GroupId_StringValue struct {
	// Represents a string value.
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*GroupId_UnsignedValue) isGroupId_Kind() {}

func (*GroupId_IntegerValue) isGroupId_Kind() {}

func (*GroupId_StringValue) isGroupId_Kind() {}

type PointGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *GroupId        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // Group id
	Hits   []*ScoredPoint  `protobuf:"bytes,2,rep,name=hits,proto3" json:"hits,omitempty"`     // Points in the group
	Lookup *RetrievedPoint `protobuf:"bytes,3,opt,name=lookup,proto3" json:"lookup,omitempty"` // Point(s) from the lookup collection that matches the group id
}

func (x *PointGroup) Reset() {
	*x = PointGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointGroup) ProtoMessage() {}

func (x *PointGroup) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointGroup.ProtoReflect.Descriptor instead.
func (*PointGroup) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{76}
}

func (x *PointGroup) GetId() *GroupId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PointGroup) GetHits() []*ScoredPoint {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *PointGroup) GetLookup() *RetrievedPoint {
	if x != nil {
		return x.Lookup
	}
	return nil
}

type GroupsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*PointGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"` // Groups
}

func (x *GroupsResult) Reset() {
	*x = GroupsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupsResult) ProtoMessage() {}

func (x *GroupsResult) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupsResult.ProtoReflect.Descriptor instead.
func (*GroupsResult) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{77}
}

func (x *GroupsResult) GetGroups() []*PointGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*ScoredPoint `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{78}
}

func (x *SearchResponse) GetResult() []*ScoredPoint {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SearchResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SearchResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*ScoredPoint `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{79}
}

func (x *QueryResponse) GetResult() []*ScoredPoint {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *QueryResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type QueryBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*BatchResult `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *QueryBatchResponse) Reset() {
	*x = QueryBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBatchResponse) ProtoMessage() {}

func (x *QueryBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBatchResponse.ProtoReflect.Descriptor instead.
func (*QueryBatchResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{80}
}

func (x *QueryBatchResponse) GetResult() []*BatchResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryBatchResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *QueryBatchResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type QueryGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *GroupsResult  `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *QueryGroupsResponse) Reset() {
	*x = QueryGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGroupsResponse) ProtoMessage() {}

func (x *QueryGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGroupsResponse.ProtoReflect.Descriptor instead.
func (*QueryGroupsResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{81}
}

func (x *QueryGroupsResponse) GetResult() *GroupsResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryGroupsResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *QueryGroupsResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type BatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*ScoredPoint `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *BatchResult) Reset() {
	*x = BatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResult) ProtoMessage() {}

func (x *BatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResult.ProtoReflect.Descriptor instead.
func (*BatchResult) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{82}
}

func (x *BatchResult) GetResult() []*ScoredPoint {
	if x != nil {
		return x.Result
	}
	return nil
}

type SearchBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*BatchResult `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *SearchBatchResponse) Reset() {
	*x = SearchBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBatchResponse) ProtoMessage() {}

func (x *SearchBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBatchResponse.ProtoReflect.Descriptor instead.
func (*SearchBatchResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{83}
}

func (x *SearchBatchResponse) GetResult() []*BatchResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SearchBatchResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SearchBatchResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type SearchGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *GroupsResult  `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *SearchGroupsResponse) Reset() {
	*x = SearchGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchGroupsResponse) ProtoMessage() {}

func (x *SearchGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchGroupsResponse.ProtoReflect.Descriptor instead.
func (*SearchGroupsResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{84}
}

func (x *SearchGroupsResponse) GetResult() *GroupsResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SearchGroupsResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SearchGroupsResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type CountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CountResult   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *CountResponse) Reset() {
	*x = CountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResponse) ProtoMessage() {}

func (x *CountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResponse.ProtoReflect.Descriptor instead.
func (*CountResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{85}
}

func (x *CountResponse) GetResult() *CountResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CountResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CountResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type ScrollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageOffset *PointId          `protobuf:"bytes,1,opt,name=next_page_offset,json=nextPageOffset,proto3,oneof" json:"next_page_offset,omitempty"` // Use this offset for the next query
	Result         []*RetrievedPoint `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
	Time           float64           `protobuf:"fixed64,3,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *ScrollResponse) Reset() {
	*x = ScrollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrollResponse) ProtoMessage() {}

func (x *ScrollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrollResponse.ProtoReflect.Descriptor instead.
func (*ScrollResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{86}
}

func (x *ScrollResponse) GetNextPageOffset() *PointId {
	if x != nil {
		return x.NextPageOffset
	}
	return nil
}

func (x *ScrollResponse) GetResult() []*RetrievedPoint {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ScrollResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type CountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountResult) Reset() {
	*x = CountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResult) ProtoMessage() {}

func (x *CountResult) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResult.ProtoReflect.Descriptor instead.
func (*CountResult) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{87}
}

func (x *CountResult) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RetrievedPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *PointId          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Payload    map[string]*Value `protobuf:"bytes,2,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Vectors    *VectorsOutput    `protobuf:"bytes,4,opt,name=vectors,proto3,oneof" json:"vectors,omitempty"`
	ShardKey   *ShardKey         `protobuf:"bytes,5,opt,name=shard_key,json=shardKey,proto3,oneof" json:"shard_key,omitempty"`       // Shard key
	OrderValue *OrderValue       `protobuf:"bytes,6,opt,name=order_value,json=orderValue,proto3,oneof" json:"order_value,omitempty"` // Order-by value
}

func (x *RetrievedPoint) Reset() {
	*x = RetrievedPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrievedPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrievedPoint) ProtoMessage() {}

func (x *RetrievedPoint) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrievedPoint.ProtoReflect.Descriptor instead.
func (*RetrievedPoint) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{88}
}

func (x *RetrievedPoint) GetId() *PointId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RetrievedPoint) GetPayload() map[string]*Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RetrievedPoint) GetVectors() *VectorsOutput {
	if x != nil {
		return x.Vectors
	}
	return nil
}

func (x *RetrievedPoint) GetShardKey() *ShardKey {
	if x != nil {
		return x.ShardKey
	}
	return nil
}

func (x *RetrievedPoint) GetOrderValue() *OrderValue {
	if x != nil {
		return x.OrderValue
	}
	return nil
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*RetrievedPoint `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Time   float64           `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{89}
}

func (x *GetResponse) GetResult() []*RetrievedPoint {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type RecommendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*ScoredPoint `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *RecommendResponse) Reset() {
	*x = RecommendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendResponse) ProtoMessage() {}

func (x *RecommendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendResponse.ProtoReflect.Descriptor instead.
func (*RecommendResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{90}
}

func (x *RecommendResponse) GetResult() []*ScoredPoint {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RecommendResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RecommendResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type RecommendBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*BatchResult `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *RecommendBatchResponse) Reset() {
	*x = RecommendBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendBatchResponse) ProtoMessage() {}

func (x *RecommendBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendBatchResponse.ProtoReflect.Descriptor instead.
func (*RecommendBatchResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{91}
}

func (x *RecommendBatchResponse) GetResult() []*BatchResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RecommendBatchResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RecommendBatchResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type DiscoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*ScoredPoint `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *DiscoverResponse) Reset() {
	*x = DiscoverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverResponse) ProtoMessage() {}

func (x *DiscoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverResponse.ProtoReflect.Descriptor instead.
func (*DiscoverResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{92}
}

func (x *DiscoverResponse) GetResult() []*ScoredPoint {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *DiscoverResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DiscoverResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type DiscoverBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*BatchResult `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *DiscoverBatchResponse) Reset() {
	*x = DiscoverBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverBatchResponse) ProtoMessage() {}

func (x *DiscoverBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverBatchResponse.ProtoReflect.Descriptor instead.
func (*DiscoverBatchResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{93}
}

func (x *DiscoverBatchResponse) GetResult() []*BatchResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *DiscoverBatchResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DiscoverBatchResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type RecommendGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *GroupsResult  `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *RecommendGroupsResponse) Reset() {
	*x = RecommendGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendGroupsResponse) ProtoMessage() {}

func (x *RecommendGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendGroupsResponse.ProtoReflect.Descriptor instead.
func (*RecommendGroupsResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{94}
}

func (x *RecommendGroupsResponse) GetResult() *GroupsResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RecommendGroupsResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RecommendGroupsResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type UpdateBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*UpdateResult `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Time   float64         `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *UpdateBatchResponse) Reset() {
	*x = UpdateBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBatchResponse) ProtoMessage() {}

func (x *UpdateBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBatchResponse.ProtoReflect.Descriptor instead.
func (*UpdateBatchResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{95}
}

func (x *UpdateBatchResponse) GetResult() []*UpdateResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *UpdateBatchResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type FacetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hits []*FacetHit `protobuf:"bytes,1,rep,name=hits,proto3" json:"hits,omitempty"`
	Time float64     `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *FacetResponse) Reset() {
	*x = FacetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetResponse) ProtoMessage() {}

func (x *FacetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetResponse.ProtoReflect.Descriptor instead.
func (*FacetResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{96}
}

func (x *FacetResponse) GetHits() []*FacetHit {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *FacetResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SearchMatrixPairsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *SearchMatrixPairs `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Time   float64            `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage     `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *SearchMatrixPairsResponse) Reset() {
	*x = SearchMatrixPairsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMatrixPairsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMatrixPairsResponse) ProtoMessage() {}

func (x *SearchMatrixPairsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMatrixPairsResponse.ProtoReflect.Descriptor instead.
func (*SearchMatrixPairsResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{97}
}

func (x *SearchMatrixPairsResponse) GetResult() *SearchMatrixPairs {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SearchMatrixPairsResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SearchMatrixPairsResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type SearchMatrixOffsetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *SearchMatrixOffsets `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Time   float64              `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
	Usage  *HardwareUsage       `protobuf:"bytes,3,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *SearchMatrixOffsetsResponse) Reset() {
	*x = SearchMatrixOffsetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMatrixOffsetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMatrixOffsetsResponse) ProtoMessage() {}

func (x *SearchMatrixOffsetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMatrixOffsetsResponse.ProtoReflect.Descriptor instead.
func (*SearchMatrixOffsetsResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{98}
}

func (x *SearchMatrixOffsetsResponse) GetResult() *SearchMatrixOffsets {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SearchMatrixOffsetsResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SearchMatrixOffsetsResponse) GetUsage() *HardwareUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Should    []*Condition `protobuf:"bytes,1,rep,name=should,proto3" json:"should,omitempty"`                              // At least one of those conditions should match
	Must      []*Condition `protobuf:"bytes,2,rep,name=must,proto3" json:"must,omitempty"`                                  // All conditions must match
	MustNot   []*Condition `protobuf:"bytes,3,rep,name=must_not,json=mustNot,proto3" json:"must_not,omitempty"`             // All conditions must NOT match
	MinShould *MinShould   `protobuf:"bytes,4,opt,name=min_should,json=minShould,proto3,oneof" json:"min_should,omitempty"` // At least minimum amount of given conditions should match
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{99}
}

func (x *Filter) GetShould() []*Condition {
	if x != nil {
		return x.Should
	}
	return nil
}

func (x *Filter) GetMust() []*Condition {
	if x != nil {
		return x.Must
	}
	return nil
}

func (x *Filter) GetMustNot() []*Condition {
	if x != nil {
		return x.MustNot
	}
	return nil
}

func (x *Filter) GetMinShould() *MinShould {
	if x != nil {
		return x.MinShould
	}
	return nil
}

type MinShould struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*Condition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	MinCount   uint64       `protobuf:"varint,2,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
}

func (x *MinShould) Reset() {
	*x = MinShould{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinShould) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinShould) ProtoMessage() {}

func (x *MinShould) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinShould.ProtoReflect.Descriptor instead.
func (*MinShould) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{100}
}

func (x *MinShould) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *MinShould) GetMinCount() uint64 {
	if x != nil {
		return x.MinCount
	}
	return 0
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ConditionOneOf:
	//
	//	*Condition_Field
	//	*Condition_IsEmpty
	//	*Condition_HasId
	//	*Condition_Filter
	//	*Condition_IsNull
	//	*Condition_Nested
	//	*Condition_HasVector
	ConditionOneOf isCondition_ConditionOneOf `protobuf_oneof:"condition_one_of"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{101}
}

func (m *Condition) GetConditionOneOf() isCondition_ConditionOneOf {
	if m != nil {
		return m.ConditionOneOf
	}
	return nil
}

func (x *Condition) GetField() *FieldCondition {
	if x, ok := x.GetConditionOneOf().(*Condition_Field); ok {
		return x.Field
	}
	return nil
}

func (x *Condition) GetIsEmpty() *IsEmptyCondition {
	if x, ok := x.GetConditionOneOf().(*Condition_IsEmpty); ok {
		return x.IsEmpty
	}
	return nil
}

func (x *Condition) GetHasId() *HasIdCondition {
	if x, ok := x.GetConditionOneOf().(*Condition_HasId); ok {
		return x.HasId
	}
	return nil
}

func (x *Condition) GetFilter() *Filter {
	if x, ok := x.GetConditionOneOf().(*Condition_Filter); ok {
		return x.Filter
	}
	return nil
}

func (x *Condition) GetIsNull() *IsNullCondition {
	if x, ok := x.GetConditionOneOf().(*Condition_IsNull); ok {
		return x.IsNull
	}
	return nil
}

func (x *Condition) GetNested() *NestedCondition {
	if x, ok := x.GetConditionOneOf().(*Condition_Nested); ok {
		return x.Nested
	}
	return nil
}

func (x *Condition) GetHasVector() *HasVectorCondition {
	if x, ok := x.GetConditionOneOf().(*Condition_HasVector); ok {
		return x.HasVector
	}
	return nil
}

type isCondition_ConditionOneOf interface {
	isCondition_ConditionOneOf()
}

type Condition_Field struct {
	Field *FieldCondition `protobuf:"bytes,1,opt,name=field,proto3,oneof"`
}

type Condition_IsEmpty struct {
	IsEmpty *IsEmptyCondition `protobuf:"bytes,2,opt,name=is_empty,json=isEmpty,proto3,oneof"`
}

type Condition_HasId struct {
	HasId *HasIdCondition `protobuf:"bytes,3,opt,name=has_id,json=hasId,proto3,oneof"`
}

type Condition_Filter struct {
	Filter *Filter `protobuf:"bytes,4,opt,name=filter,proto3,oneof"`
}

type Condition_IsNull struct {
	IsNull *IsNullCondition `protobuf:"bytes,5,opt,name=is_null,json=isNull,proto3,oneof"`
}

type Condition_Nested struct {
	Nested *NestedCondition `protobuf:"bytes,6,opt,name=nested,proto3,oneof"`
}

type Condition_HasVector struct {
	HasVector *HasVectorCondition `protobuf:"bytes,7,opt,name=has_vector,json=hasVector,proto3,oneof"`
}

func (*Condition_Field) isCondition_ConditionOneOf() {}

func (*Condition_IsEmpty) isCondition_ConditionOneOf() {}

func (*Condition_HasId) isCondition_ConditionOneOf() {}

func (*Condition_Filter) isCondition_ConditionOneOf() {}

func (*Condition_IsNull) isCondition_ConditionOneOf() {}

func (*Condition_Nested) isCondition_ConditionOneOf() {}

func (*Condition_HasVector) isCondition_ConditionOneOf() {}

type IsEmptyCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *IsEmptyCondition) Reset() {
	*x = IsEmptyCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsEmptyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsEmptyCondition) ProtoMessage() {}

func (x *IsEmptyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsEmptyCondition.ProtoReflect.Descriptor instead.
func (*IsEmptyCondition) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{102}
}

func (x *IsEmptyCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type IsNullCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *IsNullCondition) Reset() {
	*x = IsNullCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsNullCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsNullCondition) ProtoMessage() {}

func (x *IsNullCondition) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsNullCondition.ProtoReflect.Descriptor instead.
func (*IsNullCondition) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{103}
}

func (x *IsNullCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type HasIdCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasId []*PointId `protobuf:"bytes,1,rep,name=has_id,json=hasId,proto3" json:"has_id,omitempty"`
}

func (x *HasIdCondition) Reset() {
	*x = HasIdCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasIdCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasIdCondition) ProtoMessage() {}

func (x *HasIdCondition) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasIdCondition.ProtoReflect.Descriptor instead.
func (*HasIdCondition) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{104}
}

func (x *HasIdCondition) GetHasId() []*PointId {
	if x != nil {
		return x.HasId
	}
	return nil
}

type HasVectorCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasVector string `protobuf:"bytes,1,opt,name=has_vector,json=hasVector,proto3" json:"has_vector,omitempty"`
}

func (x *HasVectorCondition) Reset() {
	*x = HasVectorCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasVectorCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasVectorCondition) ProtoMessage() {}

func (x *HasVectorCondition) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasVectorCondition.ProtoReflect.Descriptor instead.
func (*HasVectorCondition) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{105}
}

func (x *HasVectorCondition) GetHasVector() string {
	if x != nil {
		return x.HasVector
	}
	return ""
}

type NestedCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`       // Path to nested object
	Filter *Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"` // Filter condition
}

func (x *NestedCondition) Reset() {
	*x = NestedCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedCondition) ProtoMessage() {}

func (x *NestedCondition) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedCondition.ProtoReflect.Descriptor instead.
func (*NestedCondition) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{106}
}

func (x *NestedCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NestedCondition) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type FieldCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Match          *Match          `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`                                           // Check if point has field with a given value
	Range          *Range          `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`                                           // Check if points value lies in a given range
	GeoBoundingBox *GeoBoundingBox `protobuf:"bytes,4,opt,name=geo_bounding_box,json=geoBoundingBox,proto3" json:"geo_bounding_box,omitempty"` // Check if points geolocation lies in a given area
	GeoRadius      *GeoRadius      `protobuf:"bytes,5,opt,name=geo_radius,json=geoRadius,proto3" json:"geo_radius,omitempty"`                  // Check if geo point is within a given radius
	ValuesCount    *ValuesCount    `protobuf:"bytes,6,opt,name=values_count,json=valuesCount,proto3" json:"values_count,omitempty"`            // Check number of values for a specific field
	GeoPolygon     *GeoPolygon     `protobuf:"bytes,7,opt,name=geo_polygon,json=geoPolygon,proto3" json:"geo_polygon,omitempty"`               // Check if geo point is within a given polygon
	DatetimeRange  *DatetimeRange  `protobuf:"bytes,8,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`      // Check if datetime is within a given range
}

func (x *FieldCondition) Reset() {
	*x = FieldCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldCondition) ProtoMessage() {}

func (x *FieldCondition) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldCondition.ProtoReflect.Descriptor instead.
func (*FieldCondition) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{107}
}

func (x *FieldCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FieldCondition) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *FieldCondition) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *FieldCondition) GetGeoBoundingBox() *GeoBoundingBox {
	if x != nil {
		return x.GeoBoundingBox
	}
	return nil
}

func (x *FieldCondition) GetGeoRadius() *GeoRadius {
	if x != nil {
		return x.GeoRadius
	}
	return nil
}

func (x *FieldCondition) GetValuesCount() *ValuesCount {
	if x != nil {
		return x.ValuesCount
	}
	return nil
}

func (x *FieldCondition) GetGeoPolygon() *GeoPolygon {
	if x != nil {
		return x.GeoPolygon
	}
	return nil
}

func (x *FieldCondition) GetDatetimeRange() *DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MatchValue:
	//
	//	*Match_Keyword
	//	*Match_Integer
	//	*Match_Boolean
	//	*Match_Text
	//	*Match_Keywords
	//	*Match_Integers
	//	*Match_ExceptIntegers
	//	*Match_ExceptKeywords
	MatchValue isMatch_MatchValue `protobuf_oneof:"match_value"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{108}
}

func (m *Match) GetMatchValue() isMatch_MatchValue {
	if m != nil {
		return m.MatchValue
	}
	return nil
}

func (x *Match) GetKeyword() string {
	if x, ok := x.GetMatchValue().(*Match_Keyword); ok {
		return x.Keyword
	}
	return ""
}

func (x *Match) GetInteger() int64 {
	if x, ok := x.GetMatchValue().(*Match_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *Match) GetBoolean() bool {
	if x, ok := x.GetMatchValue().(*Match_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *Match) GetText() string {
	if x, ok := x.GetMatchValue().(*Match_Text); ok {
		return x.Text
	}
	return ""
}

func (x *Match) GetKeywords() *RepeatedStrings {
	if x, ok := x.GetMatchValue().(*Match_Keywords); ok {
		return x.Keywords
	}
	return nil
}

func (x *Match) GetIntegers() *RepeatedIntegers {
	if x, ok := x.GetMatchValue().(*Match_Integers); ok {
		return x.Integers
	}
	return nil
}

func (x *Match) GetExceptIntegers() *RepeatedIntegers {
	if x, ok := x.GetMatchValue().(*Match_ExceptIntegers); ok {
		return x.ExceptIntegers
	}
	return nil
}

func (x *Match) GetExceptKeywords() *RepeatedStrings {
	if x, ok := x.GetMatchValue().(*Match_ExceptKeywords); ok {
		return x.ExceptKeywords
	}
	return nil
}

type isMatch_MatchValue interface {
	isMatch_MatchValue()
}

type Match_Keyword struct {
	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3,oneof"` // Match string keyword
}

type Match_Integer struct {
	Integer int64 `protobuf:"varint,2,opt,name=integer,proto3,oneof"` // Match integer
}

type Match_Boolean struct {
	Boolean bool `protobuf:"varint,3,opt,name=boolean,proto3,oneof"` // Match boolean
}

type Match_Text struct {
	Text string `protobuf:"bytes,4,opt,name=text,proto3,oneof"` // Match text
}

type Match_Keywords struct {
	Keywords *RepeatedStrings `protobuf:"bytes,5,opt,name=keywords,proto3,oneof"` // Match multiple keywords
}

type Match_Integers struct {
	Integers *RepeatedIntegers `protobuf:"bytes,6,opt,name=integers,proto3,oneof"` // Match multiple integers
}

type Match_ExceptIntegers struct {
	ExceptIntegers *RepeatedIntegers `protobuf:"bytes,7,opt,name=except_integers,json=exceptIntegers,proto3,oneof"` // Match any other value except those integers
}

type Match_ExceptKeywords struct {
	ExceptKeywords *RepeatedStrings `protobuf:"bytes,8,opt,name=except_keywords,json=exceptKeywords,proto3,oneof"` // Match any other value except those keywords
}

func (*Match_Keyword) isMatch_MatchValue() {}

func (*Match_Integer) isMatch_MatchValue() {}

func (*Match_Boolean) isMatch_MatchValue() {}

func (*Match_Text) isMatch_MatchValue() {}

func (*Match_Keywords) isMatch_MatchValue() {}

func (*Match_Integers) isMatch_MatchValue() {}

func (*Match_ExceptIntegers) isMatch_MatchValue() {}

func (*Match_ExceptKeywords) isMatch_MatchValue() {}

type RepeatedStrings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strings []string `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
}

func (x *RepeatedStrings) Reset() {
	*x = RepeatedStrings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedStrings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedStrings) ProtoMessage() {}

func (x *RepeatedStrings) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedStrings.ProtoReflect.Descriptor instead.
func (*RepeatedStrings) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{109}
}

func (x *RepeatedStrings) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type RepeatedIntegers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integers []int64 `protobuf:"varint,1,rep,packed,name=integers,proto3" json:"integers,omitempty"`
}

func (x *RepeatedIntegers) Reset() {
	*x = RepeatedIntegers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedIntegers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedIntegers) ProtoMessage() {}

func (x *RepeatedIntegers) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedIntegers.ProtoReflect.Descriptor instead.
func (*RepeatedIntegers) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{110}
}

func (x *RepeatedIntegers) GetIntegers() []int64 {
	if x != nil {
		return x.Integers
	}
	return nil
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lt  *float64 `protobuf:"fixed64,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	Gt  *float64 `protobuf:"fixed64,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	Gte *float64 `protobuf:"fixed64,3,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	Lte *float64 `protobuf:"fixed64,4,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{111}
}

func (x *Range) GetLt() float64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Range) GetGt() float64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Range) GetGte() float64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *Range) GetLte() float64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

type DatetimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lt  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	Gt  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	Gte *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	Lte *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
}

func (x *DatetimeRange) Reset() {
	*x = DatetimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatetimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimeRange) ProtoMessage() {}

func (x *DatetimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimeRange.ProtoReflect.Descriptor instead.
func (*DatetimeRange) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{112}
}

func (x *DatetimeRange) GetLt() *timestamppb.Timestamp {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *DatetimeRange) GetGt() *timestamppb.Timestamp {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *DatetimeRange) GetGte() *timestamppb.Timestamp {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *DatetimeRange) GetLte() *timestamppb.Timestamp {
	if x != nil {
		return x.Lte
	}
	return nil
}

type GeoBoundingBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopLeft     *GeoPoint `protobuf:"bytes,1,opt,name=top_left,json=topLeft,proto3" json:"top_left,omitempty"`             // north-west corner
	BottomRight *GeoPoint `protobuf:"bytes,2,opt,name=bottom_right,json=bottomRight,proto3" json:"bottom_right,omitempty"` // south-east corner
}

func (x *GeoBoundingBox) Reset() {
	*x = GeoBoundingBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoBoundingBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoBoundingBox) ProtoMessage() {}

func (x *GeoBoundingBox) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoBoundingBox.ProtoReflect.Descriptor instead.
func (*GeoBoundingBox) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{113}
}

func (x *GeoBoundingBox) GetTopLeft() *GeoPoint {
	if x != nil {
		return x.TopLeft
	}
	return nil
}

func (x *GeoBoundingBox) GetBottomRight() *GeoPoint {
	if x != nil {
		return x.BottomRight
	}
	return nil
}

type GeoRadius struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Center *GeoPoint `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`   // Center of the circle
	Radius float32   `protobuf:"fixed32,2,opt,name=radius,proto3" json:"radius,omitempty"` // In meters
}

func (x *GeoRadius) Reset() {
	*x = GeoRadius{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoRadius) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoRadius) ProtoMessage() {}

func (x *GeoRadius) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoRadius.ProtoReflect.Descriptor instead.
func (*GeoRadius) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{114}
}

func (x *GeoRadius) GetCenter() *GeoPoint {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *GeoRadius) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

type GeoLineString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*GeoPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"` // Ordered sequence of GeoPoints representing the line
}

func (x *GeoLineString) Reset() {
	*x = GeoLineString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoLineString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLineString) ProtoMessage() {}

func (x *GeoLineString) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLineString.ProtoReflect.Descriptor instead.
func (*GeoLineString) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{115}
}

func (x *GeoLineString) GetPoints() []*GeoPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

// For a valid GeoPolygon, both the exterior and interior GeoLineStrings must consist of a minimum of 4 points.
// Additionally, the first and last points of each GeoLineString must be the same.
type GeoPolygon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exterior  *GeoLineString   `protobuf:"bytes,1,opt,name=exterior,proto3" json:"exterior,omitempty"`   // The exterior line bounds the surface
	Interiors []*GeoLineString `protobuf:"bytes,2,rep,name=interiors,proto3" json:"interiors,omitempty"` // Interior lines (if present) bound holes within the surface
}

func (x *GeoPolygon) Reset() {
	*x = GeoPolygon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPolygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPolygon) ProtoMessage() {}

func (x *GeoPolygon) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPolygon.ProtoReflect.Descriptor instead.
func (*GeoPolygon) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{116}
}

func (x *GeoPolygon) GetExterior() *GeoLineString {
	if x != nil {
		return x.Exterior
	}
	return nil
}

func (x *GeoPolygon) GetInteriors() []*GeoLineString {
	if x != nil {
		return x.Interiors
	}
	return nil
}

type ValuesCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lt  *uint64 `protobuf:"varint,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	Gt  *uint64 `protobuf:"varint,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	Gte *uint64 `protobuf:"varint,3,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	Lte *uint64 `protobuf:"varint,4,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
}

func (x *ValuesCount) Reset() {
	*x = ValuesCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuesCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesCount) ProtoMessage() {}

func (x *ValuesCount) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesCount.ProtoReflect.Descriptor instead.
func (*ValuesCount) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{117}
}

func (x *ValuesCount) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *ValuesCount) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *ValuesCount) GetGte() uint64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *ValuesCount) GetLte() uint64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

type PointsSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PointsSelectorOneOf:
	//
	//	*PointsSelector_Points
	//	*PointsSelector_Filter
	PointsSelectorOneOf isPointsSelector_PointsSelectorOneOf `protobuf_oneof:"points_selector_one_of"`
}

func (x *PointsSelector) Reset() {
	*x = PointsSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsSelector) ProtoMessage() {}

func (x *PointsSelector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsSelector.ProtoReflect.Descriptor instead.
func (*PointsSelector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{118}
}

func (m *PointsSelector) GetPointsSelectorOneOf() isPointsSelector_PointsSelectorOneOf {
	if m != nil {
		return m.PointsSelectorOneOf
	}
	return nil
}

func (x *PointsSelector) GetPoints() *PointsIdsList {
	if x, ok := x.GetPointsSelectorOneOf().(*PointsSelector_Points); ok {
		return x.Points
	}
	return nil
}

func (x *PointsSelector) GetFilter() *Filter {
	if x, ok := x.GetPointsSelectorOneOf().(*PointsSelector_Filter); ok {
		return x.Filter
	}
	return nil
}

type isPointsSelector_PointsSelectorOneOf interface {
	isPointsSelector_PointsSelectorOneOf()
}

type PointsSelector_Points struct {
	Points *PointsIdsList `protobuf:"bytes,1,opt,name=points,proto3,oneof"`
}

type PointsSelector_Filter struct {
	Filter *Filter `protobuf:"bytes,2,opt,name=filter,proto3,oneof"`
}

func (*PointsSelector_Points) isPointsSelector_PointsSelectorOneOf() {}

func (*PointsSelector_Filter) isPointsSelector_PointsSelectorOneOf() {}

type PointsIdsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*PointId `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *PointsIdsList) Reset() {
	*x = PointsIdsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsIdsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsIdsList) ProtoMessage() {}

func (x *PointsIdsList) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsIdsList.ProtoReflect.Descriptor instead.
func (*PointsIdsList) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{119}
}

func (x *PointsIdsList) GetIds() []*PointId {
	if x != nil {
		return x.Ids
	}
	return nil
}

type PointStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *PointId          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Payload map[string]*Value `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Vectors *Vectors          `protobuf:"bytes,4,opt,name=vectors,proto3,oneof" json:"vectors,omitempty"`
}

func (x *PointStruct) Reset() {
	*x = PointStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointStruct) ProtoMessage() {}

func (x *PointStruct) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointStruct.ProtoReflect.Descriptor instead.
func (*PointStruct) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{120}
}

func (x *PointStruct) GetId() *PointId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PointStruct) GetPayload() map[string]*Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PointStruct) GetVectors() *Vectors {
	if x != nil {
		return x.Vectors
	}
	return nil
}

type GeoPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lon float64 `protobuf:"fixed64,1,opt,name=lon,proto3" json:"lon,omitempty"`
	Lat float64 `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty"`
}

func (x *GeoPoint) Reset() {
	*x = GeoPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPoint) ProtoMessage() {}

func (x *GeoPoint) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPoint.ProtoReflect.Descriptor instead.
func (*GeoPoint) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{121}
}

func (x *GeoPoint) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *GeoPoint) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

type HardwareUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu     uint64 `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	IoRead  uint64 `protobuf:"varint,2,opt,name=io_read,json=ioRead,proto3" json:"io_read,omitempty"`
	IoWrite uint64 `protobuf:"varint,3,opt,name=io_write,json=ioWrite,proto3" json:"io_write,omitempty"`
}

func (x *HardwareUsage) Reset() {
	*x = HardwareUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareUsage) ProtoMessage() {}

func (x *HardwareUsage) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareUsage.ProtoReflect.Descriptor instead.
func (*HardwareUsage) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{122}
}

func (x *HardwareUsage) GetCpu() uint64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *HardwareUsage) GetIoRead() uint64 {
	if x != nil {
		return x.IoRead
	}
	return 0
}

func (x *HardwareUsage) GetIoWrite() uint64 {
	if x != nil {
		return x.IoWrite
	}
	return 0
}

type PointsUpdateOperation_PointStructList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points           []*PointStruct    `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,2,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
}

func (x *PointsUpdateOperation_PointStructList) Reset() {
	*x = PointsUpdateOperation_PointStructList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsUpdateOperation_PointStructList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsUpdateOperation_PointStructList) ProtoMessage() {}

func (x *PointsUpdateOperation_PointStructList) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsUpdateOperation_PointStructList.ProtoReflect.Descriptor instead.
func (*PointsUpdateOperation_PointStructList) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{69, 0}
}

func (x *PointsUpdateOperation_PointStructList) GetPoints() []*PointStruct {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *PointsUpdateOperation_PointStructList) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type PointsUpdateOperation_SetPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload          map[string]*Value `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PointsSelector   *PointsSelector   `protobuf:"bytes,2,opt,name=points_selector,json=pointsSelector,proto3,oneof" json:"points_selector,omitempty"`         // Affected points
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,3,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
	Key              *string           `protobuf:"bytes,4,opt,name=key,proto3,oneof" json:"key,omitempty"`                                                     // Option for indicate property of payload
}

func (x *PointsUpdateOperation_SetPayload) Reset() {
	*x = PointsUpdateOperation_SetPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsUpdateOperation_SetPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsUpdateOperation_SetPayload) ProtoMessage() {}

func (x *PointsUpdateOperation_SetPayload) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsUpdateOperation_SetPayload.ProtoReflect.Descriptor instead.
func (*PointsUpdateOperation_SetPayload) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{69, 1}
}

func (x *PointsUpdateOperation_SetPayload) GetPayload() map[string]*Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PointsUpdateOperation_SetPayload) GetPointsSelector() *PointsSelector {
	if x != nil {
		return x.PointsSelector
	}
	return nil
}

func (x *PointsUpdateOperation_SetPayload) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

func (x *PointsUpdateOperation_SetPayload) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type PointsUpdateOperation_OverwritePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload          map[string]*Value `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PointsSelector   *PointsSelector   `protobuf:"bytes,2,opt,name=points_selector,json=pointsSelector,proto3,oneof" json:"points_selector,omitempty"`         // Affected points
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,3,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
	Key              *string           `protobuf:"bytes,4,opt,name=key,proto3,oneof" json:"key,omitempty"`                                                     // Option for indicate property of payload
}

func (x *PointsUpdateOperation_OverwritePayload) Reset() {
	*x = PointsUpdateOperation_OverwritePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsUpdateOperation_OverwritePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsUpdateOperation_OverwritePayload) ProtoMessage() {}

func (x *PointsUpdateOperation_OverwritePayload) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsUpdateOperation_OverwritePayload.ProtoReflect.Descriptor instead.
func (*PointsUpdateOperation_OverwritePayload) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{69, 2}
}

func (x *PointsUpdateOperation_OverwritePayload) GetPayload() map[string]*Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PointsUpdateOperation_OverwritePayload) GetPointsSelector() *PointsSelector {
	if x != nil {
		return x.PointsSelector
	}
	return nil
}

func (x *PointsUpdateOperation_OverwritePayload) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

func (x *PointsUpdateOperation_OverwritePayload) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type PointsUpdateOperation_DeletePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys             []string          `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	PointsSelector   *PointsSelector   `protobuf:"bytes,2,opt,name=points_selector,json=pointsSelector,proto3,oneof" json:"points_selector,omitempty"`         // Affected points
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,3,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
}

func (x *PointsUpdateOperation_DeletePayload) Reset() {
	*x = PointsUpdateOperation_DeletePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsUpdateOperation_DeletePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsUpdateOperation_DeletePayload) ProtoMessage() {}

func (x *PointsUpdateOperation_DeletePayload) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsUpdateOperation_DeletePayload.ProtoReflect.Descriptor instead.
func (*PointsUpdateOperation_DeletePayload) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{69, 3}
}

func (x *PointsUpdateOperation_DeletePayload) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *PointsUpdateOperation_DeletePayload) GetPointsSelector() *PointsSelector {
	if x != nil {
		return x.PointsSelector
	}
	return nil
}

func (x *PointsUpdateOperation_DeletePayload) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type PointsUpdateOperation_UpdateVectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points           []*PointVectors   `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`                                                     // List of points and vectors to update
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,2,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
}

func (x *PointsUpdateOperation_UpdateVectors) Reset() {
	*x = PointsUpdateOperation_UpdateVectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsUpdateOperation_UpdateVectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsUpdateOperation_UpdateVectors) ProtoMessage() {}

func (x *PointsUpdateOperation_UpdateVectors) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsUpdateOperation_UpdateVectors.ProtoReflect.Descriptor instead.
func (*PointsUpdateOperation_UpdateVectors) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{69, 4}
}

func (x *PointsUpdateOperation_UpdateVectors) GetPoints() []*PointVectors {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *PointsUpdateOperation_UpdateVectors) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type PointsUpdateOperation_DeleteVectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointsSelector   *PointsSelector   `protobuf:"bytes,1,opt,name=points_selector,json=pointsSelector,proto3" json:"points_selector,omitempty"`               // Affected points
	Vectors          *VectorsSelector  `protobuf:"bytes,2,opt,name=vectors,proto3" json:"vectors,omitempty"`                                                   // List of vector names to delete
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,3,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
}

func (x *PointsUpdateOperation_DeleteVectors) Reset() {
	*x = PointsUpdateOperation_DeleteVectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsUpdateOperation_DeleteVectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsUpdateOperation_DeleteVectors) ProtoMessage() {}

func (x *PointsUpdateOperation_DeleteVectors) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsUpdateOperation_DeleteVectors.ProtoReflect.Descriptor instead.
func (*PointsUpdateOperation_DeleteVectors) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{69, 5}
}

func (x *PointsUpdateOperation_DeleteVectors) GetPointsSelector() *PointsSelector {
	if x != nil {
		return x.PointsSelector
	}
	return nil
}

func (x *PointsUpdateOperation_DeleteVectors) GetVectors() *VectorsSelector {
	if x != nil {
		return x.Vectors
	}
	return nil
}

func (x *PointsUpdateOperation_DeleteVectors) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type PointsUpdateOperation_DeletePoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points           *PointsSelector   `protobuf:"bytes,1,opt,name=points,proto3" json:"points,omitempty"`                                                     // Affected points
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,2,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
}

func (x *PointsUpdateOperation_DeletePoints) Reset() {
	*x = PointsUpdateOperation_DeletePoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsUpdateOperation_DeletePoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsUpdateOperation_DeletePoints) ProtoMessage() {}

func (x *PointsUpdateOperation_DeletePoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsUpdateOperation_DeletePoints.ProtoReflect.Descriptor instead.
func (*PointsUpdateOperation_DeletePoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{69, 6}
}

func (x *PointsUpdateOperation_DeletePoints) GetPoints() *PointsSelector {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *PointsUpdateOperation_DeletePoints) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

type PointsUpdateOperation_ClearPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points           *PointsSelector   `protobuf:"bytes,1,opt,name=points,proto3" json:"points,omitempty"`                                                     // Affected points
	ShardKeySelector *ShardKeySelector `protobuf:"bytes,2,opt,name=shard_key_selector,json=shardKeySelector,proto3,oneof" json:"shard_key_selector,omitempty"` // Option for custom sharding to specify used shard keys
}

func (x *PointsUpdateOperation_ClearPayload) Reset() {
	*x = PointsUpdateOperation_ClearPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsUpdateOperation_ClearPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsUpdateOperation_ClearPayload) ProtoMessage() {}

func (x *PointsUpdateOperation_ClearPayload) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsUpdateOperation_ClearPayload.ProtoReflect.Descriptor instead.
func (*PointsUpdateOperation_ClearPayload) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{69, 7}
}

func (x *PointsUpdateOperation_ClearPayload) GetPoints() *PointsSelector {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *PointsUpdateOperation_ClearPayload) GetShardKeySelector() *ShardKeySelector {
	if x != nil {
		return x.ShardKeySelector
	}
	return nil
}

var File_points_proto protoreflect.FileDescriptor

var file_points_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x1a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x3e, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x67, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x07, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x23, 0x0a, 0x0d, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x37, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x49, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc3, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x49, 0x0a, 0x0c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x49, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xc8, 0x03, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x48, 0x01, 0x52, 0x07, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x02, 0x52, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc4,
	0x02, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x48, 0x01, 0x52, 0x07, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x02, 0x52, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6e, 0x73,
	0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x21, 0x0a, 0x0b, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x10, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d,
	0x0a, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xdf, 0x02,
	0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2b, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x06, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22,
	0x43, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x4b, 0x65, 0x79, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x0c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04,
	0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x01, 0x52,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x48, 0x02, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xb2, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xe0, 0x03, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x01, 0x52,
	0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x10, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xb6,
	0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04,
	0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x01,
	0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a,
	0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x5a, 0x0a, 0x0c, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0xfc, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a,
	0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x36, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x02,
	0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0x91, 0x04, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0e, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x02, 0x52, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x03,
	0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x1a, 0x49, 0x0a, 0x0c,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xfd, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x02, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x03, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xb8, 0x02, 0x0a, 0x12, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x02, 0x52,
	0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0xf7, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x77, 0x61, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x48, 0x02, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x03, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xcb, 0x01, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x30, 0x0a, 0x16, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x16, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xbb, 0x01,
	0x0a, 0x13, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0c,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x07,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x4a, 0x0a, 0x0c, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x12, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x07,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a,
	0x50, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x78, 0x0a, 0x07, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x06,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0d,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a,
	0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a,
	0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x27, 0x0a, 0x0f, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x78, 0x0a, 0x13, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x18,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0c, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0xf2, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x68, 0x6e, 0x73, 0x77, 0x5f, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x68, 0x6e, 0x73, 0x77, 0x45,
	0x66, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x49, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x02, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x6e, 0x73, 0x77, 0x5f, 0x65, 0x66, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0xba, 0x06, 0x0a, 0x0c, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x77,
	0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x03, 0x52, 0x0b,
	0x77, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x47,
	0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x48, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x06, 0x52, 0x10,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x48, 0x07, 0x52, 0x0d, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x0a, 0x57,
	0x69, 0x74, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b,
	0x77, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x01, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x95, 0x07, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x77,
	0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48,
	0x02, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x03,
	0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x04, 0x52,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a,
	0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x48, 0x06, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x48, 0x07, 0x52, 0x0d, 0x73, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0xa2, 0x01,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x34, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x84, 0x05, 0x0a, 0x0c, 0x53,
	0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x03, 0x52,
	0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x04, 0x52, 0x10, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x48, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x06, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4a, 0x04, 0x08, 0x05, 0x10,
	0x06, 0x22, 0xd3, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x10, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xa5, 0x08, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x26,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x0c,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x77, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x43, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x48, 0x03, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x06, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1d,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x07, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a,
	0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x48, 0x08, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22,
	0x8c, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x01, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x80,
	0x09, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a,
	0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x77, 0x69, 0x74,
	0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x43, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x48, 0x02, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x47, 0x0a, 0x10,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48,
	0x04, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x05,
	0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x06, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x10, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x07, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x08, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0x49, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x67, 0x0a, 0x0d,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x21, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x7a, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x31,
	0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x22, 0xa7, 0x06, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x3e, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x04, 0x52, 0x0f, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x06, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x88, 0x02, 0x0a, 0x13,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a,
	0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xf0, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x02, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x61, 0x63,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a,
	0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x74, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x6c, 0x0a,
	0x0d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3e, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x70,
	0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x05,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x6e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6e,
	0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x33,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x22, 0xc6, 0x03, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x02, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48,
	0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x06, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0xae, 0x07, 0x0a, 0x0b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x02, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48,
	0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x07, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x08, 0x52, 0x0b, 0x77, 0x69,
	0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x0a, 0x52, 0x10, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x0b, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x0c, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xfc, 0x01, 0x0a,
	0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x8d, 0x08, 0x0a, 0x10,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x48, 0x02, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x48, 0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x0e, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x43, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x48, 0x05, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x06, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x07, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x08, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x47, 0x0a, 0x10,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x0a,
	0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x0b, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b,
	0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x48, 0x0c, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xb7, 0x03, 0x0a, 0x0b,
	0x46, 0x61, 0x63, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x04, 0x52, 0x0f, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x05, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x08,
	0x46, 0x61, 0x63, 0x65, 0x74, 0x48, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd4, 0x03, 0x0a, 0x12, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x05, 0x52, 0x0f, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x06, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0x43, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70,
	0x61, 0x69, 0x72, 0x73, 0x22, 0x66, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x01, 0x61, 0x12, 0x1d, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x01, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x92, 0x01, 0x0a,
	0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x5f,
	0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x52, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0xe1, 0x15, 0x0a, 0x15, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x06, 0x75,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x10, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x4b, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5d, 0x0a, 0x11,
	0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x56, 0x0a, 0x18, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x02, 0x18, 0x01, 0x48,
	0x00, 0x52, 0x16, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x48, 0x00,
	0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x54, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xa2, 0x01, 0x0a, 0x0f,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x12,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x1a, 0x85, 0x03, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x4f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x44, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x10,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x1a, 0x49, 0x0a, 0x0c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x1a, 0x91, 0x03, 0x0a, 0x10, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x55, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x48, 0x01, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x1a, 0x49,
	0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x1a, 0xe1, 0x01, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01,
	0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x1a, 0xa1, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x1a, 0xe7, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xa2,
	0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x1a, 0xa2, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x10, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x5b, 0x0a, 0x17, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x43,
	0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x03,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x22, 0xb9, 0x03, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x48, 0x01, 0x52, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x1a, 0x49, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22,
	0x86, 0x01, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x75,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x69, 0x74,
	0x73, 0x12, 0x2e, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x22, 0x3a, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2a, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x8d, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8c, 0x01,
	0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x91, 0x01, 0x0a,
	0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x93, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8c,
	0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa9, 0x01,
	0x0a, 0x0e, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x23, 0x0a, 0x0b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8f,
	0x03, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x34, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x48, 0x01, 0x52, 0x08,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x49, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x22, 0x51, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8f,
	0x01, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x94, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x57, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x46, 0x61,
	0x63, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x68,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x48, 0x69, 0x74, 0x52, 0x04, 0x68, 0x69, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x75, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x6d, 0x75, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x75, 0x73, 0x74,
	0x5f, 0x6e, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d,
	0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x4d, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x48, 0x00, 0x52,
	0x09, 0x6d, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x22, 0x5b, 0x0a, 0x09,
	0x4d, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x85, 0x03, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x49, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f,
	0x0a, 0x06, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x49, 0x64, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x68, 0x61, 0x73, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x49, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x31, 0x0a,
	0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x3b, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61,
	0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x68, 0x61, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x12, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x66, 0x22, 0x24, 0x0a, 0x10, 0x49, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x23, 0x0a, 0x0f, 0x49, 0x73, 0x4e, 0x75, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x38, 0x0a, 0x0e,
	0x48, 0x61, 0x73, 0x49, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x06, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52,
	0x05, 0x68, 0x61, 0x73, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x68, 0x61, 0x73, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x68, 0x61, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x4b, 0x0a, 0x0f, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8b, 0x03, 0x0a, 0x0e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x67, 0x65, 0x6f, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6f, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x52, 0x0e, 0x67, 0x65, 0x6f, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x30, 0x0a, 0x0a, 0x67, 0x65, 0x6f,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x52, 0x09, 0x67, 0x65, 0x6f, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x67,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x0a, 0x67, 0x65,
	0x6f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xf8, 0x02, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x1a, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0e,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x73, 0x12, 0x42,
	0x0a, 0x0f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x2b, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x2e,
	0x0a, 0x10, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x73, 0x22, 0x7d,
	0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02,
	0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02,
	0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x67, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x22, 0xf5, 0x01,
	0x0a, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x03, 0x67, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52,
	0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6c, 0x74, 0x65, 0x22, 0x72, 0x0a, 0x0e, 0x47, 0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x2b, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x6f, 0x70,
	0x4c, 0x65, 0x66, 0x74, 0x12, 0x33, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4d, 0x0a, 0x09, 0x47, 0x65, 0x6f,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x39, 0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x4c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x74, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6f,
	0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13,
	0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x02, 0x67, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x02, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x18, 0x0a,
	0x16, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x22, 0x32, 0x0a, 0x0d, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x0b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x49, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x2e, 0x0a, 0x08, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6c, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6c, 0x61, 0x74, 0x22, 0x55, 0x0a, 0x0d, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6f, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x6f, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6f, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x2a, 0x35, 0x0a, 0x11,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x65, 0x61, 0x6b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x6f, 0x6e,
	0x67, 0x10, 0x02, 0x2a, 0x38, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c,
	0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x10, 0x02, 0x2a, 0xad, 0x01,
	0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x47, 0x65, 0x6f, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6f,
	0x6c, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x10, 0x07, 0x2a, 0x1e, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x73,
	0x63, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x10, 0x01, 0x2a, 0x35, 0x0a,
	0x11, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x10, 0x01, 0x2a, 0x1b, 0x0a, 0x06, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x52, 0x46, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x42, 0x53, 0x46, 0x10,
	0x01, 0x2a, 0x14, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x10, 0x00, 0x2a, 0x5b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x10, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_points_proto_rawDescOnce sync.Once
	file_points_proto_rawDescData = file_points_proto_rawDesc
)

func file_points_proto_rawDescGZIP() []byte {
	file_points_proto_rawDescOnce.Do(func() {
		file_points_proto_rawDescData = protoimpl.X.CompressGZIP(file_points_proto_rawDescData)
	})
	return file_points_proto_rawDescData
}

var file_points_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_points_proto_msgTypes = make([]protoimpl.MessageInfo, 142)
var file_points_proto_goTypes = []any{
	(WriteOrderingType)(0),                         // 0: qdrant.WriteOrderingType
	(ReadConsistencyType)(0),                       // 1: qdrant.ReadConsistencyType
	(FieldType)(0),                                 // 2: qdrant.FieldType
	(Direction)(0),                                 // 3: qdrant.Direction
	(RecommendStrategy)(0),                         // 4: qdrant.RecommendStrategy
	(Fusion)(0),                                    // 5: qdrant.Fusion
	(Sample)(0),                                    // 6: qdrant.Sample
	(UpdateStatus)(0),                              // 7: qdrant.UpdateStatus
	(*WriteOrdering)(nil),                          // 8: qdrant.WriteOrdering
	(*ReadConsistency)(nil),                        // 9: qdrant.ReadConsistency
	(*PointId)(nil),                                // 10: qdrant.PointId
	(*SparseIndices)(nil),                          // 11: qdrant.SparseIndices
	(*Document)(nil),                               // 12: qdrant.Document
	(*Image)(nil),                                  // 13: qdrant.Image
	(*InferenceObject)(nil),                        // 14: qdrant.InferenceObject
	(*Vector)(nil),                                 // 15: qdrant.Vector
	(*VectorOutput)(nil),                           // 16: qdrant.VectorOutput
	(*DenseVector)(nil),                            // 17: qdrant.DenseVector
	(*SparseVector)(nil),                           // 18: qdrant.SparseVector
	(*MultiDenseVector)(nil),                       // 19: qdrant.MultiDenseVector
	(*VectorInput)(nil),                            // 20: qdrant.VectorInput
	(*ShardKeySelector)(nil),                       // 21: qdrant.ShardKeySelector
	(*UpsertPoints)(nil),                           // 22: qdrant.UpsertPoints
	(*DeletePoints)(nil),                           // 23: qdrant.DeletePoints
	(*GetPoints)(nil),                              // 24: qdrant.GetPoints
	(*UpdatePointVectors)(nil),                     // 25: qdrant.UpdatePointVectors
	(*PointVectors)(nil),                           // 26: qdrant.PointVectors
	(*DeletePointVectors)(nil),                     // 27: qdrant.DeletePointVectors
	(*SetPayloadPoints)(nil),                       // 28: qdrant.SetPayloadPoints
	(*DeletePayloadPoints)(nil),                    // 29: qdrant.DeletePayloadPoints
	(*ClearPayloadPoints)(nil),                     // 30: qdrant.ClearPayloadPoints
	(*CreateFieldIndexCollection)(nil),             // 31: qdrant.CreateFieldIndexCollection
	(*DeleteFieldIndexCollection)(nil),             // 32: qdrant.DeleteFieldIndexCollection
	(*PayloadIncludeSelector)(nil),                 // 33: qdrant.PayloadIncludeSelector
	(*PayloadExcludeSelector)(nil),                 // 34: qdrant.PayloadExcludeSelector
	(*WithPayloadSelector)(nil),                    // 35: qdrant.WithPayloadSelector
	(*NamedVectors)(nil),                           // 36: qdrant.NamedVectors
	(*NamedVectorsOutput)(nil),                     // 37: qdrant.NamedVectorsOutput
	(*Vectors)(nil),                                // 38: qdrant.Vectors
	(*VectorsOutput)(nil),                          // 39: qdrant.VectorsOutput
	(*VectorsSelector)(nil),                        // 40: qdrant.VectorsSelector
	(*WithVectorsSelector)(nil),                    // 41: qdrant.WithVectorsSelector
	(*QuantizationSearchParams)(nil),               // 42: qdrant.QuantizationSearchParams
	(*SearchParams)(nil),                           // 43: qdrant.SearchParams
	(*SearchPoints)(nil),                           // 44: qdrant.SearchPoints
	(*SearchBatchPoints)(nil),                      // 45: qdrant.SearchBatchPoints
	(*WithLookup)(nil),                             // 46: qdrant.WithLookup
	(*SearchPointGroups)(nil),                      // 47: qdrant.SearchPointGroups
	(*StartFrom)(nil),                              // 48: qdrant.StartFrom
	(*OrderBy)(nil),                                // 49: qdrant.OrderBy
	(*ScrollPoints)(nil),                           // 50: qdrant.ScrollPoints
	(*LookupLocation)(nil),                         // 51: qdrant.LookupLocation
	(*RecommendPoints)(nil),                        // 52: qdrant.RecommendPoints
	(*RecommendBatchPoints)(nil),                   // 53: qdrant.RecommendBatchPoints
	(*RecommendPointGroups)(nil),                   // 54: qdrant.RecommendPointGroups
	(*TargetVector)(nil),                           // 55: qdrant.TargetVector
	(*VectorExample)(nil),                          // 56: qdrant.VectorExample
	(*ContextExamplePair)(nil),                     // 57: qdrant.ContextExamplePair
	(*DiscoverPoints)(nil),                         // 58: qdrant.DiscoverPoints
	(*DiscoverBatchPoints)(nil),                    // 59: qdrant.DiscoverBatchPoints
	(*CountPoints)(nil),                            // 60: qdrant.CountPoints
	(*RecommendInput)(nil),                         // 61: qdrant.RecommendInput
	(*ContextInputPair)(nil),                       // 62: qdrant.ContextInputPair
	(*DiscoverInput)(nil),                          // 63: qdrant.DiscoverInput
	(*ContextInput)(nil),                           // 64: qdrant.ContextInput
	(*Query)(nil),                                  // 65: qdrant.Query
	(*PrefetchQuery)(nil),                          // 66: qdrant.PrefetchQuery
	(*QueryPoints)(nil),                            // 67: qdrant.QueryPoints
	(*QueryBatchPoints)(nil),                       // 68: qdrant.QueryBatchPoints
	(*QueryPointGroups)(nil),                       // 69: qdrant.QueryPointGroups
	(*FacetCounts)(nil),                            // 70: qdrant.FacetCounts
	(*FacetValue)(nil),                             // 71: qdrant.FacetValue
	(*FacetHit)(nil),                               // 72: qdrant.FacetHit
	(*SearchMatrixPoints)(nil),                     // 73: qdrant.SearchMatrixPoints
	(*SearchMatrixPairs)(nil),                      // 74: qdrant.SearchMatrixPairs
	(*SearchMatrixPair)(nil),                       // 75: qdrant.SearchMatrixPair
	(*SearchMatrixOffsets)(nil),                    // 76: qdrant.SearchMatrixOffsets
	(*PointsUpdateOperation)(nil),                  // 77: qdrant.PointsUpdateOperation
	(*UpdateBatchPoints)(nil),                      // 78: qdrant.UpdateBatchPoints
	(*PointsOperationResponse)(nil),                // 79: qdrant.PointsOperationResponse
	(*UpdateResult)(nil),                           // 80: qdrant.UpdateResult
	(*OrderValue)(nil),                             // 81: qdrant.OrderValue
	(*ScoredPoint)(nil),                            // 82: qdrant.ScoredPoint
	(*GroupId)(nil),                                // 83: qdrant.GroupId
	(*PointGroup)(nil),                             // 84: qdrant.PointGroup
	(*GroupsResult)(nil),                           // 85: qdrant.GroupsResult
	(*SearchResponse)(nil),                         // 86: qdrant.SearchResponse
	(*QueryResponse)(nil),                          // 87: qdrant.QueryResponse
	(*QueryBatchResponse)(nil),                     // 88: qdrant.QueryBatchResponse
	(*QueryGroupsResponse)(nil),                    // 89: qdrant.QueryGroupsResponse
	(*BatchResult)(nil),                            // 90: qdrant.BatchResult
	(*SearchBatchResponse)(nil),                    // 91: qdrant.SearchBatchResponse
	(*SearchGroupsResponse)(nil),                   // 92: qdrant.SearchGroupsResponse
	(*CountResponse)(nil),                          // 93: qdrant.CountResponse
	(*ScrollResponse)(nil),                         // 94: qdrant.ScrollResponse
	(*CountResult)(nil),                            // 95: qdrant.CountResult
	(*RetrievedPoint)(nil),                         // 96: qdrant.RetrievedPoint
	(*GetResponse)(nil),                            // 97: qdrant.GetResponse
	(*RecommendResponse)(nil),                      // 98: qdrant.RecommendResponse
	(*RecommendBatchResponse)(nil),                 // 99: qdrant.RecommendBatchResponse
	(*DiscoverResponse)(nil),                       // 100: qdrant.DiscoverResponse
	(*DiscoverBatchResponse)(nil),                  // 101: qdrant.DiscoverBatchResponse
	(*RecommendGroupsResponse)(nil),                // 102: qdrant.RecommendGroupsResponse
	(*UpdateBatchResponse)(nil),                    // 103: qdrant.UpdateBatchResponse
	(*FacetResponse)(nil),                          // 104: qdrant.FacetResponse
	(*SearchMatrixPairsResponse)(nil),              // 105: qdrant.SearchMatrixPairsResponse
	(*SearchMatrixOffsetsResponse)(nil),            // 106: qdrant.SearchMatrixOffsetsResponse
	(*Filter)(nil),                                 // 107: qdrant.Filter
	(*MinShould)(nil),                              // 108: qdrant.MinShould
	(*Condition)(nil),                              // 109: qdrant.Condition
	(*IsEmptyCondition)(nil),                       // 110: qdrant.IsEmptyCondition
	(*IsNullCondition)(nil),                        // 111: qdrant.IsNullCondition
	(*HasIdCondition)(nil),                         // 112: qdrant.HasIdCondition
	(*HasVectorCondition)(nil),                     // 113: qdrant.HasVectorCondition
	(*NestedCondition)(nil),                        // 114: qdrant.NestedCondition
	(*FieldCondition)(nil),                         // 115: qdrant.FieldCondition
	(*Match)(nil),                                  // 116: qdrant.Match
	(*RepeatedStrings)(nil),                        // 117: qdrant.RepeatedStrings
	(*RepeatedIntegers)(nil),                       // 118: qdrant.RepeatedIntegers
	(*Range)(nil),                                  // 119: qdrant.Range
	(*DatetimeRange)(nil),                          // 120: qdrant.DatetimeRange
	(*GeoBoundingBox)(nil),                         // 121: qdrant.GeoBoundingBox
	(*GeoRadius)(nil),                              // 122: qdrant.GeoRadius
	(*GeoLineString)(nil),                          // 123: qdrant.GeoLineString
	(*GeoPolygon)(nil),                             // 124: qdrant.GeoPolygon
	(*ValuesCount)(nil),                            // 125: qdrant.ValuesCount
	(*PointsSelector)(nil),                         // 126: qdrant.PointsSelector
	(*PointsIdsList)(nil),                          // 127: qdrant.PointsIdsList
	(*PointStruct)(nil),                            // 128: qdrant.PointStruct
	(*GeoPoint)(nil),                               // 129: qdrant.GeoPoint
	(*HardwareUsage)(nil),                          // 130: qdrant.HardwareUsage
	nil,                                            // 131: qdrant.Document.OptionsEntry
	nil,                                            // 132: qdrant.Image.OptionsEntry
	nil,                                            // 133: qdrant.InferenceObject.OptionsEntry
	nil,                                            // 134: qdrant.SetPayloadPoints.PayloadEntry
	nil,                                            // 135: qdrant.NamedVectors.VectorsEntry
	nil,                                            // 136: qdrant.NamedVectorsOutput.VectorsEntry
	(*PointsUpdateOperation_PointStructList)(nil),  // 137: qdrant.PointsUpdateOperation.PointStructList
	(*PointsUpdateOperation_SetPayload)(nil),       // 138: qdrant.PointsUpdateOperation.SetPayload
	(*PointsUpdateOperation_OverwritePayload)(nil), // 139: qdrant.PointsUpdateOperation.OverwritePayload
	(*PointsUpdateOperation_DeletePayload)(nil),    // 140: qdrant.PointsUpdateOperation.DeletePayload
	(*PointsUpdateOperation_UpdateVectors)(nil),    // 141: qdrant.PointsUpdateOperation.UpdateVectors
	(*PointsUpdateOperation_DeleteVectors)(nil),    // 142: qdrant.PointsUpdateOperation.DeleteVectors
	(*PointsUpdateOperation_DeletePoints)(nil),     // 143: qdrant.PointsUpdateOperation.DeletePoints
	(*PointsUpdateOperation_ClearPayload)(nil),     // 144: qdrant.PointsUpdateOperation.ClearPayload
	nil,                           // 145: qdrant.PointsUpdateOperation.SetPayload.PayloadEntry
	nil,                           // 146: qdrant.PointsUpdateOperation.OverwritePayload.PayloadEntry
	nil,                           // 147: qdrant.ScoredPoint.PayloadEntry
	nil,                           // 148: qdrant.RetrievedPoint.PayloadEntry
	nil,                           // 149: qdrant.PointStruct.PayloadEntry
	(*Value)(nil),                 // 150: qdrant.Value
	(*ShardKey)(nil),              // 151: qdrant.ShardKey
	(*PayloadIndexParams)(nil),    // 152: qdrant.PayloadIndexParams
	(*timestamppb.Timestamp)(nil), // 153: google.protobuf.Timestamp
}
var file_points_proto_depIdxs = []int32{
	0,   // 0: qdrant.WriteOrdering.type:type_name -> qdrant.WriteOrderingType
	1,   // 1: qdrant.ReadConsistency.type:type_name -> qdrant.ReadConsistencyType
	131, // 2: qdrant.Document.options:type_name -> qdrant.Document.OptionsEntry
	150, // 3: qdrant.Image.image:type_name -> qdrant.Value
	132, // 4: qdrant.Image.options:type_name -> qdrant.Image.OptionsEntry
	150, // 5: qdrant.InferenceObject.object:type_name -> qdrant.Value
	133, // 6: qdrant.InferenceObject.options:type_name -> qdrant.InferenceObject.OptionsEntry
	11,  // 7: qdrant.Vector.indices:type_name -> qdrant.SparseIndices
	17,  // 8: qdrant.Vector.dense:type_name -> qdrant.DenseVector
	18,  // 9: qdrant.Vector.sparse:type_name -> qdrant.SparseVector
	19,  // 10: qdrant.Vector.multi_dense:type_name -> qdrant.MultiDenseVector
	12,  // 11: qdrant.Vector.document:type_name -> qdrant.Document
	13,  // 12: qdrant.Vector.image:type_name -> qdrant.Image
	14,  // 13: qdrant.Vector.object:type_name -> qdrant.InferenceObject
	11,  // 14: qdrant.VectorOutput.indices:type_name -> qdrant.SparseIndices
	17,  // 15: qdrant.VectorOutput.dense:type_name -> qdrant.DenseVector
	18,  // 16: qdrant.VectorOutput.sparse:type_name -> qdrant.SparseVector
	19,  // 17: qdrant.VectorOutput.multi_dense:type_name -> qdrant.MultiDenseVector
	17,  // 18: qdrant.MultiDenseVector.vectors:type_name -> qdrant.DenseVector
	10,  // 19: qdrant.VectorInput.id:type_name -> qdrant.PointId
	17,  // 20: qdrant.VectorInput.dense:type_name -> qdrant.DenseVector
	18,  // 21: qdrant.VectorInput.sparse:type_name -> qdrant.SparseVector
	19,  // 22: qdrant.VectorInput.multi_dense:type_name -> qdrant.MultiDenseVector
	12,  // 23: qdrant.VectorInput.document:type_name -> qdrant.Document
	13,  // 24: qdrant.VectorInput.image:type_name -> qdrant.Image
	14,  // 25: qdrant.VectorInput.object:type_name -> qdrant.InferenceObject
	151, // 26: qdrant.ShardKeySelector.shard_keys:type_name -> qdrant.ShardKey
	128, // 27: qdrant.UpsertPoints.points:type_name -> qdrant.PointStruct
	8,   // 28: qdrant.UpsertPoints.ordering:type_name -> qdrant.WriteOrdering
	21,  // 29: qdrant.UpsertPoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	126, // 30: qdrant.DeletePoints.points:type_name -> qdrant.PointsSelector
	8,   // 31: qdrant.DeletePoints.ordering:type_name -> qdrant.WriteOrdering
	21,  // 32: qdrant.DeletePoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	10,  // 33: qdrant.GetPoints.ids:type_name -> qdrant.PointId
	35,  // 34: qdrant.GetPoints.with_payload:type_name -> qdrant.WithPayloadSelector
	41,  // 35: qdrant.GetPoints.with_vectors:type_name -> qdrant.WithVectorsSelector
	9,   // 36: qdrant.GetPoints.read_consistency:type_name -> qdrant.ReadConsistency
	21,  // 37: qdrant.GetPoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	26,  // 38: qdrant.UpdatePointVectors.points:type_name -> qdrant.PointVectors
	8,   // 39: qdrant.UpdatePointVectors.ordering:type_name -> qdrant.WriteOrdering
	21,  // 40: qdrant.UpdatePointVectors.shard_key_selector:type_name -> qdrant.ShardKeySelector
	10,  // 41: qdrant.PointVectors.id:type_name -> qdrant.PointId
	38,  // 42: qdrant.PointVectors.vectors:type_name -> qdrant.Vectors
	126, // 43: qdrant.DeletePointVectors.points_selector:type_name -> qdrant.PointsSelector
	40,  // 44: qdrant.DeletePointVectors.vectors:type_name -> qdrant.VectorsSelector
	8,   // 45: qdrant.DeletePointVectors.ordering:type_name -> qdrant.WriteOrdering
	21,  // 46: qdrant.DeletePointVectors.shard_key_selector:type_name -> qdrant.ShardKeySelector
	134, // 47: qdrant.SetPayloadPoints.payload:type_name -> qdrant.SetPayloadPoints.PayloadEntry
	126, // 48: qdrant.SetPayloadPoints.points_selector:type_name -> qdrant.PointsSelector
	8,   // 49: qdrant.SetPayloadPoints.ordering:type_name -> qdrant.WriteOrdering
	21,  // 50: qdrant.SetPayloadPoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	126, // 51: qdrant.DeletePayloadPoints.points_selector:type_name -> qdrant.PointsSelector
	8,   // 52: qdrant.DeletePayloadPoints.ordering:type_name -> qdrant.WriteOrdering
	21,  // 53: qdrant.DeletePayloadPoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	126, // 54: qdrant.ClearPayloadPoints.points:type_name -> qdrant.PointsSelector
	8,   // 55: qdrant.ClearPayloadPoints.ordering:type_name -> qdrant.WriteOrdering
	21,  // 56: qdrant.ClearPayloadPoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	2,   // 57: qdrant.CreateFieldIndexCollection.field_type:type_name -> qdrant.FieldType
	152, // 58: qdrant.CreateFieldIndexCollection.field_index_params:type_name -> qdrant.PayloadIndexParams
	8,   // 59: qdrant.CreateFieldIndexCollection.ordering:type_name -> qdrant.WriteOrdering
	8,   // 60: qdrant.DeleteFieldIndexCollection.ordering:type_name -> qdrant.WriteOrdering
	33,  // 61: qdrant.WithPayloadSelector.include:type_name -> qdrant.PayloadIncludeSelector
	34,  // 62: qdrant.WithPayloadSelector.exclude:type_name -> qdrant.PayloadExcludeSelector
	135, // 63: qdrant.NamedVectors.vectors:type_name -> qdrant.NamedVectors.VectorsEntry
	136, // 64: qdrant.NamedVectorsOutput.vectors:type_name -> qdrant.NamedVectorsOutput.VectorsEntry
	15,  // 65: qdrant.Vectors.vector:type_name -> qdrant.Vector
	36,  // 66: qdrant.Vectors.vectors:type_name -> qdrant.NamedVectors
	16,  // 67: qdrant.VectorsOutput.vector:type_name -> qdrant.VectorOutput
	37,  // 68: qdrant.VectorsOutput.vectors:type_name -> qdrant.NamedVectorsOutput
	40,  // 69: qdrant.WithVectorsSelector.include:type_name -> qdrant.VectorsSelector
	42,  // 70: qdrant.SearchParams.quantization:type_name -> qdrant.QuantizationSearchParams
	107, // 71: qdrant.SearchPoints.filter:type_name -> qdrant.Filter
	35,  // 72: qdrant.SearchPoints.with_payload:type_name -> qdrant.WithPayloadSelector
	43,  // 73: qdrant.SearchPoints.params:type_name -> qdrant.SearchParams
	41,  // 74: qdrant.SearchPoints.with_vectors:type_name -> qdrant.WithVectorsSelector
	9,   // 75: qdrant.SearchPoints.read_consistency:type_name -> qdrant.ReadConsistency
	21,  // 76: qdrant.SearchPoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	11,  // 77: qdrant.SearchPoints.sparse_indices:type_name -> qdrant.SparseIndices
	44,  // 78: qdrant.SearchBatchPoints.search_points:type_name -> qdrant.SearchPoints
	9,   // 79: qdrant.SearchBatchPoints.read_consistency:type_name -> qdrant.ReadConsistency
	35,  // 80: qdrant.WithLookup.with_payload:type_name -> qdrant.WithPayloadSelector
	41,  // 81: qdrant.WithLookup.with_vectors:type_name -> qdrant.WithVectorsSelector
	107, // 82: qdrant.SearchPointGroups.filter:type_name -> qdrant.Filter
	35,  // 83: qdrant.SearchPointGroups.with_payload:type_name -> qdrant.WithPayloadSelector
	43,  // 84: qdrant.SearchPointGroups.params:type_name -> qdrant.SearchParams
	41,  // 85: qdrant.SearchPointGroups.with_vectors:type_name -> qdrant.WithVectorsSelector
	9,   // 86: qdrant.SearchPointGroups.read_consistency:type_name -> qdrant.ReadConsistency
	46,  // 87: qdrant.SearchPointGroups.with_lookup:type_name -> qdrant.WithLookup
	21,  // 88: qdrant.SearchPointGroups.shard_key_selector:type_name -> qdrant.ShardKeySelector
	11,  // 89: qdrant.SearchPointGroups.sparse_indices:type_name -> qdrant.SparseIndices
	153, // 90: qdrant.StartFrom.timestamp:type_name -> google.protobuf.Timestamp
	3,   // 91: qdrant.OrderBy.direction:type_name -> qdrant.Direction
	48,  // 92: qdrant.OrderBy.start_from:type_name -> qdrant.StartFrom
	107, // 93: qdrant.ScrollPoints.filter:type_name -> qdrant.Filter
	10,  // 94: qdrant.ScrollPoints.offset:type_name -> qdrant.PointId
	35,  // 95: qdrant.ScrollPoints.with_payload:type_name -> qdrant.WithPayloadSelector
	41,  // 96: qdrant.ScrollPoints.with_vectors:type_name -> qdrant.WithVectorsSelector
	9,   // 97: qdrant.ScrollPoints.read_consistency:type_name -> qdrant.ReadConsistency
	21,  // 98: qdrant.ScrollPoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	49,  // 99: qdrant.ScrollPoints.order_by:type_name -> qdrant.OrderBy
	21,  // 100: qdrant.LookupLocation.shard_key_selector:type_name -> qdrant.ShardKeySelector
	10,  // 101: qdrant.RecommendPoints.positive:type_name -> qdrant.PointId
	10,  // 102: qdrant.RecommendPoints.negative:type_name -> qdrant.PointId
	107, // 103: qdrant.RecommendPoints.filter:type_name -> qdrant.Filter
	35,  // 104: qdrant.RecommendPoints.with_payload:type_name -> qdrant.WithPayloadSelector
	43,  // 105: qdrant.RecommendPoints.params:type_name -> qdrant.SearchParams
	41,  // 106: qdrant.RecommendPoints.with_vectors:type_name -> qdrant.WithVectorsSelector
	51,  // 107: qdrant.RecommendPoints.lookup_from:type_name -> qdrant.LookupLocation
	9,   // 108: qdrant.RecommendPoints.read_consistency:type_name -> qdrant.ReadConsistency
	4,   // 109: qdrant.RecommendPoints.strategy:type_name -> qdrant.RecommendStrategy
	15,  // 110: qdrant.RecommendPoints.positive_vectors:type_name -> qdrant.Vector
	15,  // 111: qdrant.RecommendPoints.negative_vectors:type_name -> qdrant.Vector
	21,  // 112: qdrant.RecommendPoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	52,  // 113: qdrant.RecommendBatchPoints.recommend_points:type_name -> qdrant.RecommendPoints
	9,   // 114: qdrant.RecommendBatchPoints.read_consistency:type_name -> qdrant.ReadConsistency
	10,  // 115: qdrant.RecommendPointGroups.positive:type_name -> qdrant.PointId
	10,  // 116: qdrant.RecommendPointGroups.negative:type_name -> qdrant.PointId
	107, // 117: qdrant.RecommendPointGroups.filter:type_name -> qdrant.Filter
	35,  // 118: qdrant.RecommendPointGroups.with_payload:type_name -> qdrant.WithPayloadSelector
	43,  // 119: qdrant.RecommendPointGroups.params:type_name -> qdrant.SearchParams
	41,  // 120: qdrant.RecommendPointGroups.with_vectors:type_name -> qdrant.WithVectorsSelector
	51,  // 121: qdrant.RecommendPointGroups.lookup_from:type_name -> qdrant.LookupLocation
	9,   // 122: qdrant.RecommendPointGroups.read_consistency:type_name -> qdrant.ReadConsistency
	46,  // 123: qdrant.RecommendPointGroups.with_lookup:type_name -> qdrant.WithLookup
	4,   // 124: qdrant.RecommendPointGroups.strategy:type_name -> qdrant.RecommendStrategy
	15,  // 125: qdrant.RecommendPointGroups.positive_vectors:type_name -> qdrant.Vector
	15,  // 126: qdrant.RecommendPointGroups.negative_vectors:type_name -> qdrant.Vector
	21,  // 127: qdrant.RecommendPointGroups.shard_key_selector:type_name -> qdrant.ShardKeySelector
	56,  // 128: qdrant.TargetVector.single:type_name -> qdrant.VectorExample
	10,  // 129: qdrant.VectorExample.id:type_name -> qdrant.PointId
	15,  // 130: qdrant.VectorExample.vector:type_name -> qdrant.Vector
	56,  // 131: qdrant.ContextExamplePair.positive:type_name -> qdrant.VectorExample
	56,  // 132: qdrant.ContextExamplePair.negative:type_name -> qdrant.VectorExample
	55,  // 133: qdrant.DiscoverPoints.target:type_name -> qdrant.TargetVector
	57,  // 134: qdrant.DiscoverPoints.context:type_name -> qdrant.ContextExamplePair
	107, // 135: qdrant.DiscoverPoints.filter:type_name -> qdrant.Filter
	35,  // 136: qdrant.DiscoverPoints.with_payload:type_name -> qdrant.WithPayloadSelector
	43,  // 137: qdrant.DiscoverPoints.params:type_name -> qdrant.SearchParams
	41,  // 138: qdrant.DiscoverPoints.with_vectors:type_name -> qdrant.WithVectorsSelector
	51,  // 139: qdrant.DiscoverPoints.lookup_from:type_name -> qdrant.LookupLocation
	9,   // 140: qdrant.DiscoverPoints.read_consistency:type_name -> qdrant.ReadConsistency
	21,  // 141: qdrant.DiscoverPoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	58,  // 142: qdrant.DiscoverBatchPoints.discover_points:type_name -> qdrant.DiscoverPoints
	9,   // 143: qdrant.DiscoverBatchPoints.read_consistency:type_name -> qdrant.ReadConsistency
	107, // 144: qdrant.CountPoints.filter:type_name -> qdrant.Filter
	9,   // 145: qdrant.CountPoints.read_consistency:type_name -> qdrant.ReadConsistency
	21,  // 146: qdrant.CountPoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	20,  // 147: qdrant.RecommendInput.positive:type_name -> qdrant.VectorInput
	20,  // 148: qdrant.RecommendInput.negative:type_name -> qdrant.VectorInput
	4,   // 149: qdrant.RecommendInput.strategy:type_name -> qdrant.RecommendStrategy
	20,  // 150: qdrant.ContextInputPair.positive:type_name -> qdrant.VectorInput
	20,  // 151: qdrant.ContextInputPair.negative:type_name -> qdrant.VectorInput
	20,  // 152: qdrant.DiscoverInput.target:type_name -> qdrant.VectorInput
	64,  // 153: qdrant.DiscoverInput.context:type_name -> qdrant.ContextInput
	62,  // 154: qdrant.ContextInput.pairs:type_name -> qdrant.ContextInputPair
	20,  // 155: qdrant.Query.nearest:type_name -> qdrant.VectorInput
	61,  // 156: qdrant.Query.recommend:type_name -> qdrant.RecommendInput
	63,  // 157: qdrant.Query.discover:type_name -> qdrant.DiscoverInput
	64,  // 158: qdrant.Query.context:type_name -> qdrant.ContextInput
	49,  // 159: qdrant.Query.order_by:type_name -> qdrant.OrderBy
	5,   // 160: qdrant.Query.fusion:type_name -> qdrant.Fusion
	6,   // 161: qdrant.Query.sample:type_name -> qdrant.Sample
	66,  // 162: qdrant.PrefetchQuery.prefetch:type_name -> qdrant.PrefetchQuery
	65,  // 163: qdrant.PrefetchQuery.query:type_name -> qdrant.Query
	107, // 164: qdrant.PrefetchQuery.filter:type_name -> qdrant.Filter
	43,  // 165: qdrant.PrefetchQuery.params:type_name -> qdrant.SearchParams
	51,  // 166: qdrant.PrefetchQuery.lookup_from:type_name -> qdrant.LookupLocation
	66,  // 167: qdrant.QueryPoints.prefetch:type_name -> qdrant.PrefetchQuery
	65,  // 168: qdrant.QueryPoints.query:type_name -> qdrant.Query
	107, // 169: qdrant.QueryPoints.filter:type_name -> qdrant.Filter
	43,  // 170: qdrant.QueryPoints.params:type_name -> qdrant.SearchParams
	41,  // 171: qdrant.QueryPoints.with_vectors:type_name -> qdrant.WithVectorsSelector
	35,  // 172: qdrant.QueryPoints.with_payload:type_name -> qdrant.WithPayloadSelector
	9,   // 173: qdrant.QueryPoints.read_consistency:type_name -> qdrant.ReadConsistency
	21,  // 174: qdrant.QueryPoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	51,  // 175: qdrant.QueryPoints.lookup_from:type_name -> qdrant.LookupLocation
	67,  // 176: qdrant.QueryBatchPoints.query_points:type_name -> qdrant.QueryPoints
	9,   // 177: qdrant.QueryBatchPoints.read_consistency:type_name -> qdrant.ReadConsistency
	66,  // 178: qdrant.QueryPointGroups.prefetch:type_name -> qdrant.PrefetchQuery
	65,  // 179: qdrant.QueryPointGroups.query:type_name -> qdrant.Query
	107, // 180: qdrant.QueryPointGroups.filter:type_name -> qdrant.Filter
	43,  // 181: qdrant.QueryPointGroups.params:type_name -> qdrant.SearchParams
	35,  // 182: qdrant.QueryPointGroups.with_payload:type_name -> qdrant.WithPayloadSelector
	41,  // 183: qdrant.QueryPointGroups.with_vectors:type_name -> qdrant.WithVectorsSelector
	51,  // 184: qdrant.QueryPointGroups.lookup_from:type_name -> qdrant.LookupLocation
	9,   // 185: qdrant.QueryPointGroups.read_consistency:type_name -> qdrant.ReadConsistency
	46,  // 186: qdrant.QueryPointGroups.with_lookup:type_name -> qdrant.WithLookup
	21,  // 187: qdrant.QueryPointGroups.shard_key_selector:type_name -> qdrant.ShardKeySelector
	107, // 188: qdrant.FacetCounts.filter:type_name -> qdrant.Filter
	9,   // 189: qdrant.FacetCounts.read_consistency:type_name -> qdrant.ReadConsistency
	21,  // 190: qdrant.FacetCounts.shard_key_selector:type_name -> qdrant.ShardKeySelector
	71,  // 191: qdrant.FacetHit.value:type_name -> qdrant.FacetValue
	107, // 192: qdrant.SearchMatrixPoints.filter:type_name -> qdrant.Filter
	9,   // 193: qdrant.SearchMatrixPoints.read_consistency:type_name -> qdrant.ReadConsistency
	21,  // 194: qdrant.SearchMatrixPoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	75,  // 195: qdrant.SearchMatrixPairs.pairs:type_name -> qdrant.SearchMatrixPair
	10,  // 196: qdrant.SearchMatrixPair.a:type_name -> qdrant.PointId
	10,  // 197: qdrant.SearchMatrixPair.b:type_name -> qdrant.PointId
	10,  // 198: qdrant.SearchMatrixOffsets.ids:type_name -> qdrant.PointId
	137, // 199: qdrant.PointsUpdateOperation.upsert:type_name -> qdrant.PointsUpdateOperation.PointStructList
	126, // 200: qdrant.PointsUpdateOperation.delete_deprecated:type_name -> qdrant.PointsSelector
	138, // 201: qdrant.PointsUpdateOperation.set_payload:type_name -> qdrant.PointsUpdateOperation.SetPayload
	139, // 202: qdrant.PointsUpdateOperation.overwrite_payload:type_name -> qdrant.PointsUpdateOperation.OverwritePayload
	140, // 203: qdrant.PointsUpdateOperation.delete_payload:type_name -> qdrant.PointsUpdateOperation.DeletePayload
	126, // 204: qdrant.PointsUpdateOperation.clear_payload_deprecated:type_name -> qdrant.PointsSelector
	141, // 205: qdrant.PointsUpdateOperation.update_vectors:type_name -> qdrant.PointsUpdateOperation.UpdateVectors
	142, // 206: qdrant.PointsUpdateOperation.delete_vectors:type_name -> qdrant.PointsUpdateOperation.DeleteVectors
	143, // 207: qdrant.PointsUpdateOperation.delete_points:type_name -> qdrant.PointsUpdateOperation.DeletePoints
	144, // 208: qdrant.PointsUpdateOperation.clear_payload:type_name -> qdrant.PointsUpdateOperation.ClearPayload
	77,  // 209: qdrant.UpdateBatchPoints.operations:type_name -> qdrant.PointsUpdateOperation
	8,   // 210: qdrant.UpdateBatchPoints.ordering:type_name -> qdrant.WriteOrdering
	80,  // 211: qdrant.PointsOperationResponse.result:type_name -> qdrant.UpdateResult
	7,   // 212: qdrant.UpdateResult.status:type_name -> qdrant.UpdateStatus
	10,  // 213: qdrant.ScoredPoint.id:type_name -> qdrant.PointId
	147, // 214: qdrant.ScoredPoint.payload:type_name -> qdrant.ScoredPoint.PayloadEntry
	39,  // 215: qdrant.ScoredPoint.vectors:type_name -> qdrant.VectorsOutput
	151, // 216: qdrant.ScoredPoint.shard_key:type_name -> qdrant.ShardKey
	81,  // 217: qdrant.ScoredPoint.order_value:type_name -> qdrant.OrderValue
	83,  // 218: qdrant.PointGroup.id:type_name -> qdrant.GroupId
	82,  // 219: qdrant.PointGroup.hits:type_name -> qdrant.ScoredPoint
	96,  // 220: qdrant.PointGroup.lookup:type_name -> qdrant.RetrievedPoint
	84,  // 221: qdrant.GroupsResult.groups:type_name -> qdrant.PointGroup
	82,  // 222: qdrant.SearchResponse.result:type_name -> qdrant.ScoredPoint
	130, // 223: qdrant.SearchResponse.usage:type_name -> qdrant.HardwareUsage
	82,  // 224: qdrant.QueryResponse.result:type_name -> qdrant.ScoredPoint
	130, // 225: qdrant.QueryResponse.usage:type_name -> qdrant.HardwareUsage
	90,  // 226: qdrant.QueryBatchResponse.result:type_name -> qdrant.BatchResult
	130, // 227: qdrant.QueryBatchResponse.usage:type_name -> qdrant.HardwareUsage
	85,  // 228: qdrant.QueryGroupsResponse.result:type_name -> qdrant.GroupsResult
	130, // 229: qdrant.QueryGroupsResponse.usage:type_name -> qdrant.HardwareUsage
	82,  // 230: qdrant.BatchResult.result:type_name -> qdrant.ScoredPoint
	90,  // 231: qdrant.SearchBatchResponse.result:type_name -> qdrant.BatchResult
	130, // 232: qdrant.SearchBatchResponse.usage:type_name -> qdrant.HardwareUsage
	85,  // 233: qdrant.SearchGroupsResponse.result:type_name -> qdrant.GroupsResult
	130, // 234: qdrant.SearchGroupsResponse.usage:type_name -> qdrant.HardwareUsage
	95,  // 235: qdrant.CountResponse.result:type_name -> qdrant.CountResult
	130, // 236: qdrant.CountResponse.usage:type_name -> qdrant.HardwareUsage
	10,  // 237: qdrant.ScrollResponse.next_page_offset:type_name -> qdrant.PointId
	96,  // 238: qdrant.ScrollResponse.result:type_name -> qdrant.RetrievedPoint
	10,  // 239: qdrant.RetrievedPoint.id:type_name -> qdrant.PointId
	148, // 240: qdrant.RetrievedPoint.payload:type_name -> qdrant.RetrievedPoint.PayloadEntry
	39,  // 241: qdrant.RetrievedPoint.vectors:type_name -> qdrant.VectorsOutput
	151, // 242: qdrant.RetrievedPoint.shard_key:type_name -> qdrant.ShardKey
	81,  // 243: qdrant.RetrievedPoint.order_value:type_name -> qdrant.OrderValue
	96,  // 244: qdrant.GetResponse.result:type_name -> qdrant.RetrievedPoint
	82,  // 245: qdrant.RecommendResponse.result:type_name -> qdrant.ScoredPoint
	130, // 246: qdrant.RecommendResponse.usage:type_name -> qdrant.HardwareUsage
	90,  // 247: qdrant.RecommendBatchResponse.result:type_name -> qdrant.BatchResult
	130, // 248: qdrant.RecommendBatchResponse.usage:type_name -> qdrant.HardwareUsage
	82,  // 249: qdrant.DiscoverResponse.result:type_name -> qdrant.ScoredPoint
	130, // 250: qdrant.DiscoverResponse.usage:type_name -> qdrant.HardwareUsage
	90,  // 251: qdrant.DiscoverBatchResponse.result:type_name -> qdrant.BatchResult
	130, // 252: qdrant.DiscoverBatchResponse.usage:type_name -> qdrant.HardwareUsage
	85,  // 253: qdrant.RecommendGroupsResponse.result:type_name -> qdrant.GroupsResult
	130, // 254: qdrant.RecommendGroupsResponse.usage:type_name -> qdrant.HardwareUsage
	80,  // 255: qdrant.UpdateBatchResponse.result:type_name -> qdrant.UpdateResult
	72,  // 256: qdrant.FacetResponse.hits:type_name -> qdrant.FacetHit
	74,  // 257: qdrant.SearchMatrixPairsResponse.result:type_name -> qdrant.SearchMatrixPairs
	130, // 258: qdrant.SearchMatrixPairsResponse.usage:type_name -> qdrant.HardwareUsage
	76,  // 259: qdrant.SearchMatrixOffsetsResponse.result:type_name -> qdrant.SearchMatrixOffsets
	130, // 260: qdrant.SearchMatrixOffsetsResponse.usage:type_name -> qdrant.HardwareUsage
	109, // 261: qdrant.Filter.should:type_name -> qdrant.Condition
	109, // 262: qdrant.Filter.must:type_name -> qdrant.Condition
	109, // 263: qdrant.Filter.must_not:type_name -> qdrant.Condition
	108, // 264: qdrant.Filter.min_should:type_name -> qdrant.MinShould
	109, // 265: qdrant.MinShould.conditions:type_name -> qdrant.Condition
	115, // 266: qdrant.Condition.field:type_name -> qdrant.FieldCondition
	110, // 267: qdrant.Condition.is_empty:type_name -> qdrant.IsEmptyCondition
	112, // 268: qdrant.Condition.has_id:type_name -> qdrant.HasIdCondition
	107, // 269: qdrant.Condition.filter:type_name -> qdrant.Filter
	111, // 270: qdrant.Condition.is_null:type_name -> qdrant.IsNullCondition
	114, // 271: qdrant.Condition.nested:type_name -> qdrant.NestedCondition
	113, // 272: qdrant.Condition.has_vector:type_name -> qdrant.HasVectorCondition
	10,  // 273: qdrant.HasIdCondition.has_id:type_name -> qdrant.PointId
	107, // 274: qdrant.NestedCondition.filter:type_name -> qdrant.Filter
	116, // 275: qdrant.FieldCondition.match:type_name -> qdrant.Match
	119, // 276: qdrant.FieldCondition.range:type_name -> qdrant.Range
	121, // 277: qdrant.FieldCondition.geo_bounding_box:type_name -> qdrant.GeoBoundingBox
	122, // 278: qdrant.FieldCondition.geo_radius:type_name -> qdrant.GeoRadius
	125, // 279: qdrant.FieldCondition.values_count:type_name -> qdrant.ValuesCount
	124, // 280: qdrant.FieldCondition.geo_polygon:type_name -> qdrant.GeoPolygon
	120, // 281: qdrant.FieldCondition.datetime_range:type_name -> qdrant.DatetimeRange
	117, // 282: qdrant.Match.keywords:type_name -> qdrant.RepeatedStrings
	118, // 283: qdrant.Match.integers:type_name -> qdrant.RepeatedIntegers
	118, // 284: qdrant.Match.except_integers:type_name -> qdrant.RepeatedIntegers
	117, // 285: qdrant.Match.except_keywords:type_name -> qdrant.RepeatedStrings
	153, // 286: qdrant.DatetimeRange.lt:type_name -> google.protobuf.Timestamp
	153, // 287: qdrant.DatetimeRange.gt:type_name -> google.protobuf.Timestamp
	153, // 288: qdrant.DatetimeRange.gte:type_name -> google.protobuf.Timestamp
	153, // 289: qdrant.DatetimeRange.lte:type_name -> google.protobuf.Timestamp
	129, // 290: qdrant.GeoBoundingBox.top_left:type_name -> qdrant.GeoPoint
	129, // 291: qdrant.GeoBoundingBox.bottom_right:type_name -> qdrant.GeoPoint
	129, // 292: qdrant.GeoRadius.center:type_name -> qdrant.GeoPoint
	129, // 293: qdrant.GeoLineString.points:type_name -> qdrant.GeoPoint
	123, // 294: qdrant.GeoPolygon.exterior:type_name -> qdrant.GeoLineString
	123, // 295: qdrant.GeoPolygon.interiors:type_name -> qdrant.GeoLineString
	127, // 296: qdrant.PointsSelector.points:type_name -> qdrant.PointsIdsList
	107, // 297: qdrant.PointsSelector.filter:type_name -> qdrant.Filter
	10,  // 298: qdrant.PointsIdsList.ids:type_name -> qdrant.PointId
	10,  // 299: qdrant.PointStruct.id:type_name -> qdrant.PointId
	149, // 300: qdrant.PointStruct.payload:type_name -> qdrant.PointStruct.PayloadEntry
	38,  // 301: qdrant.PointStruct.vectors:type_name -> qdrant.Vectors
	150, // 302: qdrant.Document.OptionsEntry.value:type_name -> qdrant.Value
	150, // 303: qdrant.Image.OptionsEntry.value:type_name -> qdrant.Value
	150, // 304: qdrant.InferenceObject.OptionsEntry.value:type_name -> qdrant.Value
	150, // 305: qdrant.SetPayloadPoints.PayloadEntry.value:type_name -> qdrant.Value
	15,  // 306: qdrant.NamedVectors.VectorsEntry.value:type_name -> qdrant.Vector
	16,  // 307: qdrant.NamedVectorsOutput.VectorsEntry.value:type_name -> qdrant.VectorOutput
	128, // 308: qdrant.PointsUpdateOperation.PointStructList.points:type_name -> qdrant.PointStruct
	21,  // 309: qdrant.PointsUpdateOperation.PointStructList.shard_key_selector:type_name -> qdrant.ShardKeySelector
	145, // 310: qdrant.PointsUpdateOperation.SetPayload.payload:type_name -> qdrant.PointsUpdateOperation.SetPayload.PayloadEntry
	126, // 311: qdrant.PointsUpdateOperation.SetPayload.points_selector:type_name -> qdrant.PointsSelector
	21,  // 312: qdrant.PointsUpdateOperation.SetPayload.shard_key_selector:type_name -> qdrant.ShardKeySelector
	146, // 313: qdrant.PointsUpdateOperation.OverwritePayload.payload:type_name -> qdrant.PointsUpdateOperation.OverwritePayload.PayloadEntry
	126, // 314: qdrant.PointsUpdateOperation.OverwritePayload.points_selector:type_name -> qdrant.PointsSelector
	21,  // 315: qdrant.PointsUpdateOperation.OverwritePayload.shard_key_selector:type_name -> qdrant.ShardKeySelector
	126, // 316: qdrant.PointsUpdateOperation.DeletePayload.points_selector:type_name -> qdrant.PointsSelector
	21,  // 317: qdrant.PointsUpdateOperation.DeletePayload.shard_key_selector:type_name -> qdrant.ShardKeySelector
	26,  // 318: qdrant.PointsUpdateOperation.UpdateVectors.points:type_name -> qdrant.PointVectors
	21,  // 319: qdrant.PointsUpdateOperation.UpdateVectors.shard_key_selector:type_name -> qdrant.ShardKeySelector
	126, // 320: qdrant.PointsUpdateOperation.DeleteVectors.points_selector:type_name -> qdrant.PointsSelector
	40,  // 321: qdrant.PointsUpdateOperation.DeleteVectors.vectors:type_name -> qdrant.VectorsSelector
	21,  // 322: qdrant.PointsUpdateOperation.DeleteVectors.shard_key_selector:type_name -> qdrant.ShardKeySelector
	126, // 323: qdrant.PointsUpdateOperation.DeletePoints.points:type_name -> qdrant.PointsSelector
	21,  // 324: qdrant.PointsUpdateOperation.DeletePoints.shard_key_selector:type_name -> qdrant.ShardKeySelector
	126, // 325: qdrant.PointsUpdateOperation.ClearPayload.points:type_name -> qdrant.PointsSelector
	21,  // 326: qdrant.PointsUpdateOperation.ClearPayload.shard_key_selector:type_name -> qdrant.ShardKeySelector
	150, // 327: qdrant.PointsUpdateOperation.SetPayload.PayloadEntry.value:type_name -> qdrant.Value
	150, // 328: qdrant.PointsUpdateOperation.OverwritePayload.PayloadEntry.value:type_name -> qdrant.Value
	150, // 329: qdrant.ScoredPoint.PayloadEntry.value:type_name -> qdrant.Value
	150, // 330: qdrant.RetrievedPoint.PayloadEntry.value:type_name -> qdrant.Value
	150, // 331: qdrant.PointStruct.PayloadEntry.value:type_name -> qdrant.Value
	332, // [332:332] is the sub-list for method output_type
	332, // [332:332] is the sub-list for method input_type
	332, // [332:332] is the sub-list for extension type_name
	332, // [332:332] is the sub-list for extension extendee
	0,   // [0:332] is the sub-list for field type_name
}

func init() { file_points_proto_init() }
func file_points_proto_init() {
	if File_points_proto != nil {
		return
	}
	file_collections_proto_init()
	file_json_with_int_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_points_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*WriteOrdering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ReadConsistency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PointId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SparseIndices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*InferenceObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*VectorOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DenseVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SparseVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MultiDenseVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*VectorInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ShardKeySelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*UpsertPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePointVectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*PointVectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePointVectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*SetPayloadPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePayloadPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ClearPayloadPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CreateFieldIndexCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteFieldIndexCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PayloadIncludeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*PayloadExcludeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*WithPayloadSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*NamedVectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*NamedVectorsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*Vectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*VectorsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*VectorsSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*WithVectorsSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*QuantizationSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*SearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*SearchPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*SearchBatchPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*WithLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*SearchPointGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*StartFrom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*OrderBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*ScrollPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*LookupLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*RecommendPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*RecommendBatchPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*RecommendPointGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*TargetVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*VectorExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*ContextExamplePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*DiscoverPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*DiscoverBatchPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*CountPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*RecommendInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*ContextInputPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*DiscoverInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*ContextInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*PrefetchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*QueryPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*QueryBatchPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*QueryPointGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*FacetCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*FacetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*FacetHit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*SearchMatrixPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*SearchMatrixPairs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*SearchMatrixPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*SearchMatrixOffsets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*PointsUpdateOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBatchPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*PointsOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*OrderValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*ScoredPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*GroupId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*PointGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*GroupsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*QueryBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*QueryGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*BatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*SearchBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*SearchGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*CountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*ScrollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*CountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*RetrievedPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*RecommendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*RecommendBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*DiscoverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*DiscoverBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*RecommendGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*FacetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*SearchMatrixPairsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*SearchMatrixOffsetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*MinShould); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*IsEmptyCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*IsNullCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*HasIdCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*HasVectorCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*NestedCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*FieldCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*RepeatedStrings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*RepeatedIntegers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*DatetimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*GeoBoundingBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*GeoRadius); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*GeoLineString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*GeoPolygon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*ValuesCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*PointsSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*PointsIdsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*PointStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*GeoPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[122].Exporter = func(v any, i int) any {
			switch v := v.(*HardwareUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[129].Exporter = func(v any, i int) any {
			switch v := v.(*PointsUpdateOperation_PointStructList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*PointsUpdateOperation_SetPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*PointsUpdateOperation_OverwritePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[132].Exporter = func(v any, i int) any {
			switch v := v.(*PointsUpdateOperation_DeletePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[133].Exporter = func(v any, i int) any {
			switch v := v.(*PointsUpdateOperation_UpdateVectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[134].Exporter = func(v any, i int) any {
			switch v := v.(*PointsUpdateOperation_DeleteVectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[135].Exporter = func(v any, i int) any {
			switch v := v.(*PointsUpdateOperation_DeletePoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[136].Exporter = func(v any, i int) any {
			switch v := v.(*PointsUpdateOperation_ClearPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_points_proto_msgTypes[1].OneofWrappers = []any{
		(*ReadConsistency_Type)(nil),
		(*ReadConsistency_Factor)(nil),
	}
	file_points_proto_msgTypes[2].OneofWrappers = []any{
		(*PointId_Num)(nil),
		(*PointId_Uuid)(nil),
	}
	file_points_proto_msgTypes[7].OneofWrappers = []any{
		(*Vector_Dense)(nil),
		(*Vector_Sparse)(nil),
		(*Vector_MultiDense)(nil),
		(*Vector_Document)(nil),
		(*Vector_Image)(nil),
		(*Vector_Object)(nil),
	}
	file_points_proto_msgTypes[8].OneofWrappers = []any{
		(*VectorOutput_Dense)(nil),
		(*VectorOutput_Sparse)(nil),
		(*VectorOutput_MultiDense)(nil),
	}
	file_points_proto_msgTypes[12].OneofWrappers = []any{
		(*VectorInput_Id)(nil),
		(*VectorInput_Dense)(nil),
		(*VectorInput_Sparse)(nil),
		(*VectorInput_MultiDense)(nil),
		(*VectorInput_Document)(nil),
		(*VectorInput_Image)(nil),
		(*VectorInput_Object)(nil),
	}
	file_points_proto_msgTypes[14].OneofWrappers = []any{}
	file_points_proto_msgTypes[15].OneofWrappers = []any{}
	file_points_proto_msgTypes[16].OneofWrappers = []any{}
	file_points_proto_msgTypes[17].OneofWrappers = []any{}
	file_points_proto_msgTypes[19].OneofWrappers = []any{}
	file_points_proto_msgTypes[20].OneofWrappers = []any{}
	file_points_proto_msgTypes[21].OneofWrappers = []any{}
	file_points_proto_msgTypes[22].OneofWrappers = []any{}
	file_points_proto_msgTypes[23].OneofWrappers = []any{}
	file_points_proto_msgTypes[24].OneofWrappers = []any{}
	file_points_proto_msgTypes[27].OneofWrappers = []any{
		(*WithPayloadSelector_Enable)(nil),
		(*WithPayloadSelector_Include)(nil),
		(*WithPayloadSelector_Exclude)(nil),
	}
	file_points_proto_msgTypes[30].OneofWrappers = []any{
		(*Vectors_Vector)(nil),
		(*Vectors_Vectors)(nil),
	}
	file_points_proto_msgTypes[31].OneofWrappers = []any{
		(*VectorsOutput_Vector)(nil),
		(*VectorsOutput_Vectors)(nil),
	}
	file_points_proto_msgTypes[33].OneofWrappers = []any{
		(*WithVectorsSelector_Enable)(nil),
		(*WithVectorsSelector_Include)(nil),
	}
	file_points_proto_msgTypes[34].OneofWrappers = []any{}
	file_points_proto_msgTypes[35].OneofWrappers = []any{}
	file_points_proto_msgTypes[36].OneofWrappers = []any{}
	file_points_proto_msgTypes[37].OneofWrappers = []any{}
	file_points_proto_msgTypes[38].OneofWrappers = []any{}
	file_points_proto_msgTypes[39].OneofWrappers = []any{}
	file_points_proto_msgTypes[40].OneofWrappers = []any{
		(*StartFrom_Float)(nil),
		(*StartFrom_Integer)(nil),
		(*StartFrom_Timestamp)(nil),
		(*StartFrom_Datetime)(nil),
	}
	file_points_proto_msgTypes[41].OneofWrappers = []any{}
	file_points_proto_msgTypes[42].OneofWrappers = []any{}
	file_points_proto_msgTypes[43].OneofWrappers = []any{}
	file_points_proto_msgTypes[44].OneofWrappers = []any{}
	file_points_proto_msgTypes[45].OneofWrappers = []any{}
	file_points_proto_msgTypes[46].OneofWrappers = []any{}
	file_points_proto_msgTypes[47].OneofWrappers = []any{
		(*TargetVector_Single)(nil),
	}
	file_points_proto_msgTypes[48].OneofWrappers = []any{
		(*VectorExample_Id)(nil),
		(*VectorExample_Vector)(nil),
	}
	file_points_proto_msgTypes[50].OneofWrappers = []any{}
	file_points_proto_msgTypes[51].OneofWrappers = []any{}
	file_points_proto_msgTypes[52].OneofWrappers = []any{}
	file_points_proto_msgTypes[53].OneofWrappers = []any{}
	file_points_proto_msgTypes[57].OneofWrappers = []any{
		(*Query_Nearest)(nil),
		(*Query_Recommend)(nil),
		(*Query_Discover)(nil),
		(*Query_Context)(nil),
		(*Query_OrderBy)(nil),
		(*Query_Fusion)(nil),
		(*Query_Sample)(nil),
	}
	file_points_proto_msgTypes[58].OneofWrappers = []any{}
	file_points_proto_msgTypes[59].OneofWrappers = []any{}
	file_points_proto_msgTypes[60].OneofWrappers = []any{}
	file_points_proto_msgTypes[61].OneofWrappers = []any{}
	file_points_proto_msgTypes[62].OneofWrappers = []any{}
	file_points_proto_msgTypes[63].OneofWrappers = []any{
		(*FacetValue_StringValue)(nil),
		(*FacetValue_IntegerValue)(nil),
		(*FacetValue_BoolValue)(nil),
	}
	file_points_proto_msgTypes[65].OneofWrappers = []any{}
	file_points_proto_msgTypes[69].OneofWrappers = []any{
		(*PointsUpdateOperation_Upsert)(nil),
		(*PointsUpdateOperation_DeleteDeprecated)(nil),
		(*PointsUpdateOperation_SetPayload_)(nil),
		(*PointsUpdateOperation_OverwritePayload_)(nil),
		(*PointsUpdateOperation_DeletePayload_)(nil),
		(*PointsUpdateOperation_ClearPayloadDeprecated)(nil),
		(*PointsUpdateOperation_UpdateVectors_)(nil),
		(*PointsUpdateOperation_DeleteVectors_)(nil),
		(*PointsUpdateOperation_DeletePoints_)(nil),
		(*PointsUpdateOperation_ClearPayload_)(nil),
	}
	file_points_proto_msgTypes[70].OneofWrappers = []any{}
	file_points_proto_msgTypes[72].OneofWrappers = []any{}
	file_points_proto_msgTypes[73].OneofWrappers = []any{
		(*OrderValue_Int)(nil),
		(*OrderValue_Float)(nil),
	}
	file_points_proto_msgTypes[74].OneofWrappers = []any{}
	file_points_proto_msgTypes[75].OneofWrappers = []any{
		(*GroupId_UnsignedValue)(nil),
		(*GroupId_IntegerValue)(nil),
		(*GroupId_StringValue)(nil),
	}
	file_points_proto_msgTypes[78].OneofWrappers = []any{}
	file_points_proto_msgTypes[79].OneofWrappers = []any{}
	file_points_proto_msgTypes[80].OneofWrappers = []any{}
	file_points_proto_msgTypes[81].OneofWrappers = []any{}
	file_points_proto_msgTypes[83].OneofWrappers = []any{}
	file_points_proto_msgTypes[84].OneofWrappers = []any{}
	file_points_proto_msgTypes[85].OneofWrappers = []any{}
	file_points_proto_msgTypes[86].OneofWrappers = []any{}
	file_points_proto_msgTypes[88].OneofWrappers = []any{}
	file_points_proto_msgTypes[90].OneofWrappers = []any{}
	file_points_proto_msgTypes[91].OneofWrappers = []any{}
	file_points_proto_msgTypes[92].OneofWrappers = []any{}
	file_points_proto_msgTypes[93].OneofWrappers = []any{}
	file_points_proto_msgTypes[94].OneofWrappers = []any{}
	file_points_proto_msgTypes[97].OneofWrappers = []any{}
	file_points_proto_msgTypes[98].OneofWrappers = []any{}
	file_points_proto_msgTypes[99].OneofWrappers = []any{}
	file_points_proto_msgTypes[101].OneofWrappers = []any{
		(*Condition_Field)(nil),
		(*Condition_IsEmpty)(nil),
		(*Condition_HasId)(nil),
		(*Condition_Filter)(nil),
		(*Condition_IsNull)(nil),
		(*Condition_Nested)(nil),
		(*Condition_HasVector)(nil),
	}
	file_points_proto_msgTypes[108].OneofWrappers = []any{
		(*Match_Keyword)(nil),
		(*Match_Integer)(nil),
		(*Match_Boolean)(nil),
		(*Match_Text)(nil),
		(*Match_Keywords)(nil),
		(*Match_Integers)(nil),
		(*Match_ExceptIntegers)(nil),
		(*Match_ExceptKeywords)(nil),
	}
	file_points_proto_msgTypes[111].OneofWrappers = []any{}
	file_points_proto_msgTypes[112].OneofWrappers = []any{}
	file_points_proto_msgTypes[117].OneofWrappers = []any{}
	file_points_proto_msgTypes[118].OneofWrappers = []any{
		(*PointsSelector_Points)(nil),
		(*PointsSelector_Filter)(nil),
	}
	file_points_proto_msgTypes[120].OneofWrappers = []any{}
	file_points_proto_msgTypes[129].OneofWrappers = []any{}
	file_points_proto_msgTypes[130].OneofWrappers = []any{}
	file_points_proto_msgTypes[131].OneofWrappers = []any{}
	file_points_proto_msgTypes[132].OneofWrappers = []any{}
	file_points_proto_msgTypes[133].OneofWrappers = []any{}
	file_points_proto_msgTypes[134].OneofWrappers = []any{}
	file_points_proto_msgTypes[135].OneofWrappers = []any{}
	file_points_proto_msgTypes[136].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_points_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   142,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_points_proto_goTypes,
		DependencyIndexes: file_points_proto_depIdxs,
		EnumInfos:         file_points_proto_enumTypes,
		MessageInfos:      file_points_proto_msgTypes,
	}.Build()
	File_points_proto = out.File
	file_points_proto_rawDesc = nil
	file_points_proto_goTypes = nil
	file_points_proto_depIdxs = nil
}
