// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: collections_service.proto

package qdrant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Collections_Get_FullMethodName                          = "/qdrant.Collections/Get"
	Collections_List_FullMethodName                         = "/qdrant.Collections/List"
	Collections_Create_FullMethodName                       = "/qdrant.Collections/Create"
	Collections_Update_FullMethodName                       = "/qdrant.Collections/Update"
	Collections_Delete_FullMethodName                       = "/qdrant.Collections/Delete"
	Collections_UpdateAliases_FullMethodName                = "/qdrant.Collections/UpdateAliases"
	Collections_ListCollectionAliases_FullMethodName        = "/qdrant.Collections/ListCollectionAliases"
	Collections_ListAliases_FullMethodName                  = "/qdrant.Collections/ListAliases"
	Collections_CollectionClusterInfo_FullMethodName        = "/qdrant.Collections/CollectionClusterInfo"
	Collections_CollectionExists_FullMethodName             = "/qdrant.Collections/CollectionExists"
	Collections_UpdateCollectionClusterSetup_FullMethodName = "/qdrant.Collections/UpdateCollectionClusterSetup"
	Collections_CreateShardKey_FullMethodName               = "/qdrant.Collections/CreateShardKey"
	Collections_DeleteShardKey_FullMethodName               = "/qdrant.Collections/DeleteShardKey"
)

// CollectionsClient is the client API for Collections service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionsClient interface {
	// Get detailed information about specified existing collection
	Get(ctx context.Context, in *GetCollectionInfoRequest, opts ...grpc.CallOption) (*GetCollectionInfoResponse, error)
	// Get list name of all existing collections
	List(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
	// Create new collection with given parameters
	Create(ctx context.Context, in *CreateCollection, opts ...grpc.CallOption) (*CollectionOperationResponse, error)
	// Update parameters of the existing collection
	Update(ctx context.Context, in *UpdateCollection, opts ...grpc.CallOption) (*CollectionOperationResponse, error)
	// Drop collection and all associated data
	Delete(ctx context.Context, in *DeleteCollection, opts ...grpc.CallOption) (*CollectionOperationResponse, error)
	// Update Aliases of the existing collection
	UpdateAliases(ctx context.Context, in *ChangeAliases, opts ...grpc.CallOption) (*CollectionOperationResponse, error)
	// Get list of all aliases for a collection
	ListCollectionAliases(ctx context.Context, in *ListCollectionAliasesRequest, opts ...grpc.CallOption) (*ListAliasesResponse, error)
	// Get list of all aliases for all existing collections
	ListAliases(ctx context.Context, in *ListAliasesRequest, opts ...grpc.CallOption) (*ListAliasesResponse, error)
	// Get cluster information for a collection
	CollectionClusterInfo(ctx context.Context, in *CollectionClusterInfoRequest, opts ...grpc.CallOption) (*CollectionClusterInfoResponse, error)
	// Check the existence of a collection
	CollectionExists(ctx context.Context, in *CollectionExistsRequest, opts ...grpc.CallOption) (*CollectionExistsResponse, error)
	// Update cluster setup for a collection
	UpdateCollectionClusterSetup(ctx context.Context, in *UpdateCollectionClusterSetupRequest, opts ...grpc.CallOption) (*UpdateCollectionClusterSetupResponse, error)
	// Create shard key
	CreateShardKey(ctx context.Context, in *CreateShardKeyRequest, opts ...grpc.CallOption) (*CreateShardKeyResponse, error)
	// Delete shard key
	DeleteShardKey(ctx context.Context, in *DeleteShardKeyRequest, opts ...grpc.CallOption) (*DeleteShardKeyResponse, error)
}

type collectionsClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionsClient(cc grpc.ClientConnInterface) CollectionsClient {
	return &collectionsClient{cc}
}

func (c *collectionsClient) Get(ctx context.Context, in *GetCollectionInfoRequest, opts ...grpc.CallOption) (*GetCollectionInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCollectionInfoResponse)
	err := c.cc.Invoke(ctx, Collections_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) List(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCollectionsResponse)
	err := c.cc.Invoke(ctx, Collections_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) Create(ctx context.Context, in *CreateCollection, opts ...grpc.CallOption) (*CollectionOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionOperationResponse)
	err := c.cc.Invoke(ctx, Collections_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) Update(ctx context.Context, in *UpdateCollection, opts ...grpc.CallOption) (*CollectionOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionOperationResponse)
	err := c.cc.Invoke(ctx, Collections_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) Delete(ctx context.Context, in *DeleteCollection, opts ...grpc.CallOption) (*CollectionOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionOperationResponse)
	err := c.cc.Invoke(ctx, Collections_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) UpdateAliases(ctx context.Context, in *ChangeAliases, opts ...grpc.CallOption) (*CollectionOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionOperationResponse)
	err := c.cc.Invoke(ctx, Collections_UpdateAliases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) ListCollectionAliases(ctx context.Context, in *ListCollectionAliasesRequest, opts ...grpc.CallOption) (*ListAliasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAliasesResponse)
	err := c.cc.Invoke(ctx, Collections_ListCollectionAliases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) ListAliases(ctx context.Context, in *ListAliasesRequest, opts ...grpc.CallOption) (*ListAliasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAliasesResponse)
	err := c.cc.Invoke(ctx, Collections_ListAliases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) CollectionClusterInfo(ctx context.Context, in *CollectionClusterInfoRequest, opts ...grpc.CallOption) (*CollectionClusterInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionClusterInfoResponse)
	err := c.cc.Invoke(ctx, Collections_CollectionClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) CollectionExists(ctx context.Context, in *CollectionExistsRequest, opts ...grpc.CallOption) (*CollectionExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionExistsResponse)
	err := c.cc.Invoke(ctx, Collections_CollectionExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) UpdateCollectionClusterSetup(ctx context.Context, in *UpdateCollectionClusterSetupRequest, opts ...grpc.CallOption) (*UpdateCollectionClusterSetupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCollectionClusterSetupResponse)
	err := c.cc.Invoke(ctx, Collections_UpdateCollectionClusterSetup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) CreateShardKey(ctx context.Context, in *CreateShardKeyRequest, opts ...grpc.CallOption) (*CreateShardKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShardKeyResponse)
	err := c.cc.Invoke(ctx, Collections_CreateShardKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) DeleteShardKey(ctx context.Context, in *DeleteShardKeyRequest, opts ...grpc.CallOption) (*DeleteShardKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteShardKeyResponse)
	err := c.cc.Invoke(ctx, Collections_DeleteShardKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionsServer is the server API for Collections service.
// All implementations must embed UnimplementedCollectionsServer
// for forward compatibility.
type CollectionsServer interface {
	// Get detailed information about specified existing collection
	Get(context.Context, *GetCollectionInfoRequest) (*GetCollectionInfoResponse, error)
	// Get list name of all existing collections
	List(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
	// Create new collection with given parameters
	Create(context.Context, *CreateCollection) (*CollectionOperationResponse, error)
	// Update parameters of the existing collection
	Update(context.Context, *UpdateCollection) (*CollectionOperationResponse, error)
	// Drop collection and all associated data
	Delete(context.Context, *DeleteCollection) (*CollectionOperationResponse, error)
	// Update Aliases of the existing collection
	UpdateAliases(context.Context, *ChangeAliases) (*CollectionOperationResponse, error)
	// Get list of all aliases for a collection
	ListCollectionAliases(context.Context, *ListCollectionAliasesRequest) (*ListAliasesResponse, error)
	// Get list of all aliases for all existing collections
	ListAliases(context.Context, *ListAliasesRequest) (*ListAliasesResponse, error)
	// Get cluster information for a collection
	CollectionClusterInfo(context.Context, *CollectionClusterInfoRequest) (*CollectionClusterInfoResponse, error)
	// Check the existence of a collection
	CollectionExists(context.Context, *CollectionExistsRequest) (*CollectionExistsResponse, error)
	// Update cluster setup for a collection
	UpdateCollectionClusterSetup(context.Context, *UpdateCollectionClusterSetupRequest) (*UpdateCollectionClusterSetupResponse, error)
	// Create shard key
	CreateShardKey(context.Context, *CreateShardKeyRequest) (*CreateShardKeyResponse, error)
	// Delete shard key
	DeleteShardKey(context.Context, *DeleteShardKeyRequest) (*DeleteShardKeyResponse, error)
	mustEmbedUnimplementedCollectionsServer()
}

// UnimplementedCollectionsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectionsServer struct{}

func (UnimplementedCollectionsServer) Get(context.Context, *GetCollectionInfoRequest) (*GetCollectionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCollectionsServer) List(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCollectionsServer) Create(context.Context, *CreateCollection) (*CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCollectionsServer) Update(context.Context, *UpdateCollection) (*CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCollectionsServer) Delete(context.Context, *DeleteCollection) (*CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCollectionsServer) UpdateAliases(context.Context, *ChangeAliases) (*CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAliases not implemented")
}
func (UnimplementedCollectionsServer) ListCollectionAliases(context.Context, *ListCollectionAliasesRequest) (*ListAliasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectionAliases not implemented")
}
func (UnimplementedCollectionsServer) ListAliases(context.Context, *ListAliasesRequest) (*ListAliasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAliases not implemented")
}
func (UnimplementedCollectionsServer) CollectionClusterInfo(context.Context, *CollectionClusterInfoRequest) (*CollectionClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionClusterInfo not implemented")
}
func (UnimplementedCollectionsServer) CollectionExists(context.Context, *CollectionExistsRequest) (*CollectionExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionExists not implemented")
}
func (UnimplementedCollectionsServer) UpdateCollectionClusterSetup(context.Context, *UpdateCollectionClusterSetupRequest) (*UpdateCollectionClusterSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionClusterSetup not implemented")
}
func (UnimplementedCollectionsServer) CreateShardKey(context.Context, *CreateShardKeyRequest) (*CreateShardKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShardKey not implemented")
}
func (UnimplementedCollectionsServer) DeleteShardKey(context.Context, *DeleteShardKeyRequest) (*DeleteShardKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShardKey not implemented")
}
func (UnimplementedCollectionsServer) mustEmbedUnimplementedCollectionsServer() {}
func (UnimplementedCollectionsServer) testEmbeddedByValue()                     {}

// UnsafeCollectionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionsServer will
// result in compilation errors.
type UnsafeCollectionsServer interface {
	mustEmbedUnimplementedCollectionsServer()
}

func RegisterCollectionsServer(s grpc.ServiceRegistrar, srv CollectionsServer) {
	// If the following call pancis, it indicates UnimplementedCollectionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Collections_ServiceDesc, srv)
}

func _Collections_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collections_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).Get(ctx, req.(*GetCollectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collections_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).List(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collections_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).Create(ctx, req.(*CreateCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collections_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).Update(ctx, req.(*UpdateCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collections_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).Delete(ctx, req.(*DeleteCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_UpdateAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAliases)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).UpdateAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collections_UpdateAliases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).UpdateAliases(ctx, req.(*ChangeAliases))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_ListCollectionAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionAliasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).ListCollectionAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collections_ListCollectionAliases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).ListCollectionAliases(ctx, req.(*ListCollectionAliasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_ListAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAliasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).ListAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collections_ListAliases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).ListAliases(ctx, req.(*ListAliasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_CollectionClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).CollectionClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collections_CollectionClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).CollectionClusterInfo(ctx, req.(*CollectionClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_CollectionExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).CollectionExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collections_CollectionExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).CollectionExists(ctx, req.(*CollectionExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_UpdateCollectionClusterSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionClusterSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).UpdateCollectionClusterSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collections_UpdateCollectionClusterSetup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).UpdateCollectionClusterSetup(ctx, req.(*UpdateCollectionClusterSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_CreateShardKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShardKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).CreateShardKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collections_CreateShardKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).CreateShardKey(ctx, req.(*CreateShardKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_DeleteShardKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShardKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).DeleteShardKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collections_DeleteShardKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).DeleteShardKey(ctx, req.(*DeleteShardKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Collections_ServiceDesc is the grpc.ServiceDesc for Collections service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collections_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.Collections",
	HandlerType: (*CollectionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Collections_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Collections_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Collections_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Collections_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Collections_Delete_Handler,
		},
		{
			MethodName: "UpdateAliases",
			Handler:    _Collections_UpdateAliases_Handler,
		},
		{
			MethodName: "ListCollectionAliases",
			Handler:    _Collections_ListCollectionAliases_Handler,
		},
		{
			MethodName: "ListAliases",
			Handler:    _Collections_ListAliases_Handler,
		},
		{
			MethodName: "CollectionClusterInfo",
			Handler:    _Collections_CollectionClusterInfo_Handler,
		},
		{
			MethodName: "CollectionExists",
			Handler:    _Collections_CollectionExists_Handler,
		},
		{
			MethodName: "UpdateCollectionClusterSetup",
			Handler:    _Collections_UpdateCollectionClusterSetup_Handler,
		},
		{
			MethodName: "CreateShardKey",
			Handler:    _Collections_CreateShardKey_Handler,
		},
		{
			MethodName: "DeleteShardKey",
			Handler:    _Collections_DeleteShardKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collections_service.proto",
}
